<!DOCTYPE article
 PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">
<article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="preprint"><?all-math-mml yes?><?use-mml?><?origin ukpmcpa?><front><journal-meta><journal-id journal-id-type="nlm-ta">bioRxiv</journal-id><journal-title-group><journal-title>bioRxiv : the preprint server for biology</journal-title></journal-title-group><issn pub-type="epub">2692-8205</issn></journal-meta><article-meta><article-id pub-id-type="manuscript">EMS192732</article-id><article-id pub-id-type="doi">10.1101/2023.12.07.570537</article-id><article-id pub-id-type="archive">PPR772464</article-id><article-version-alternatives><article-version article-version-type="status">preprint</article-version><article-version article-version-type="number">2</article-version></article-version-alternatives><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>The NeuroML ecosystem for standardized multi-scale modeling in neuroscience</article-title></title-group><contrib-group><contrib contrib-type="author" equal-contrib="yes"><name><surname>Sinha</surname><given-names>Ankur</given-names></name><xref ref-type="aff" rid="A1">1</xref></contrib><contrib contrib-type="author" equal-contrib="yes"><name><surname>Gleeson</surname><given-names>Padraig</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="corresp" rid="CR1">*</xref></contrib><contrib contrib-type="author"><name><surname>Marin</surname><given-names>Bóris</given-names></name><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><name><surname>Dura-Bernal</surname><given-names>Salvador</given-names></name><xref ref-type="aff" rid="A3">3</xref><xref ref-type="aff" rid="A4">4</xref></contrib><contrib contrib-type="author"><name><surname>Panagiotou</surname><given-names>Sotirios</given-names></name><xref ref-type="aff" rid="A5">5</xref></contrib><contrib contrib-type="author"><name><surname>Crook</surname><given-names>Sharon</given-names></name><xref ref-type="aff" rid="A6">6</xref></contrib><contrib contrib-type="author"><name><surname>Cantarelli</surname><given-names>Matteo</given-names></name><xref ref-type="aff" rid="A7">7</xref></contrib><contrib contrib-type="author"><name><surname>Cannon</surname><given-names>Robert C.</given-names></name><xref ref-type="aff" rid="A8">8</xref></contrib><contrib contrib-type="author"><name><surname>Davison</surname><given-names>Andrew P.</given-names></name><xref ref-type="aff" rid="A9">9</xref></contrib><contrib contrib-type="author"><name><surname>Gurnani</surname><given-names>Harsha</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A10">10</xref></contrib><contrib contrib-type="author"><name><surname>Silver</surname><given-names>R. Angus</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="corresp" rid="CR1">*</xref></contrib></contrib-group><aff id="A1"><label>1</label>Department of Neuroscience, Physiology and Pharmacology, <institution-wrap><institution-id institution-id-type="ror">https://ror.org/02jx3x895</institution-id><institution>University College London</institution></institution-wrap>, <country country="GB">United Kingdom</country></aff><aff id="A2"><label>2</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/028kg9j04</institution-id><institution>Universidade Federal do ABC</institution></institution-wrap>, <city>ão Bernardo do Campo</city>, <country country="BR">Brazil</country></aff><aff id="A3"><label>3</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/01q1z8k08</institution-id><institution>State University of New York</institution></institution-wrap>, <city>Brooklyn</city>, <country country="US">USA</country></aff><aff id="A4"><label>4</label>Center for Biomedical Imaging and Neuromodulation, <institution-wrap><institution-id institution-id-type="ror">https://ror.org/01s434164</institution-id><institution>Nathan S. Kline Institute for Psychiatric Research</institution></institution-wrap>, <city>Orangeburg</city>, <state>NY</state>, <country country="US">USA</country></aff><aff id="A5"><label>5</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/018906e22</institution-id><institution>Erasmus Medical Center</institution></institution-wrap>, <city>Rotterdam</city>, <country country="NL">Netherlands</country></aff><aff id="A6"><label>6</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/03efmqc40</institution-id><institution>Arizona State University</institution></institution-wrap>, <country country="US">USA</country></aff><aff id="A7"><label>7</label>MetaCell Ltd</aff><aff id="A8"><label>8</label>Opus2 International Ltd, <country country="GB">UK</country></aff><aff id="A9"><label>9</label>CNRS, Gif-sur-Yvette, France</aff><aff id="A10"><label>10</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/00cvxb145</institution-id><institution>University of Washington</institution></institution-wrap>, <city>Seattle</city>, <country country="US">USA</country></aff><author-notes><corresp id="CR1">
<label>*</label><bold>For correspondence:</bold> <email>p.gleeson@ucl.ac.uk</email> (PG) <email>a.silver@ucl.ac.uk</email> (RAS)</corresp></author-notes><pub-date pub-type="nihms-submitted"><day>13</day><month>12</month><year>2023</year></pub-date><pub-date pub-type="preprint"><day>11</day><month>12</month><year>2023</year></pub-date><permissions><ali:free_to_read/><license><ali:license_ref>https://creativecommons.org/licenses/by/4.0/</ali:license_ref><license-p>This work is licensed under a <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0 International license</ext-link>.</license-p></license></permissions><abstract><p id="P1">Data-driven models of neurons and circuits are important for understanding how the properties of membrane conductances, synapses, dendrites and the anatomical connectivity between neurons generate the complex dynamical behaviors of brain circuits in health and disease. However, the inherent complexity of these biological processes make the construction and reuse of biologically detailed models challenging. A wide range of tools have been developed to aid their construction and simulation, but differences in design and internal representation act as technical barriers to those who wish to use data-driven models in their research workflows. NeuroML, a model description language for computational neuroscience, was developed to address this fragmentation in modeling tools. Since its inception, NeuroML has evolved into a mature community standard that encompasses a wide range of model types and approaches in computational neuroscience. It has enabled the development of a large ecosystem of interoperable open source software tools for the creation, visualization, validation and simulation of data-driven models. Here, we describe how the NeuroML ecosystem can be incorporated into research workflows to simplify the construction, testing and analysis of standardized models of neural systems, and supports the FAIR (Findability, Accessibility, Interoperability, and Reusability) principles, thus promoting open, transparent and reproducible science.</p></abstract></article-meta></front><body><sec id="S1" sec-type="intro"><title>Introduction</title><p id="P2">Development of an in-depth, mechanistic understanding of brain function in health and disease requires different scientific approaches spanning multiple scales, from gene expression to behavior. Although “wet” experimental approaches are essential for characterizing the properties of neural systems and testing hypotheses, theory and modeling are critical for exploring how these complex systems behave across a wider range of conditions, and for generating new experimentally testable, physically plausible hypotheses. Theory and modeling also provide a way to integrate a panoply of experimentally measured parameters, functional properties, and responses to perturbations into a physio-chemically coherent framework that reproduces the properties of the neural system of interest (<xref ref-type="bibr" rid="R28">Einevoll et al., 2019</xref>; <xref ref-type="bibr" rid="R101">Yao et al., 2022</xref>; <xref ref-type="bibr" rid="R74">Poirazi and Papoutsi, 2020</xref>; <xref ref-type="bibr" rid="R43">Gurnani and Silver, 2021</xref>; <xref ref-type="bibr" rid="R40">Gleeson et al., 2018</xref>; <xref ref-type="bibr" rid="R19">Cayco-Gajic et al., 2017</xref>; <xref ref-type="bibr" rid="R9">Billings et al., 2014</xref>; <xref ref-type="bibr" rid="R96">Vervaeke et al., 2010</xref>; <xref ref-type="bibr" rid="R55">Kriener et al., 2022</xref>; <xref ref-type="bibr" rid="R8">Billeh et al., 2020</xref>; <xref ref-type="bibr" rid="R60">Markram et al., 2015</xref>).</p><p id="P3">Computational models in neuroscience often focus on different levels of description. For example, a cellular physiologist may construct a complex multi-compartmental model to explain the dynamical behavior of an individual neuron in terms of its morphology, biophysical properties, and ionic conductances (<xref ref-type="bibr" rid="R45">Hay et al., 2011</xref>; <xref ref-type="bibr" rid="R23">De Schutter and Bower, 1994</xref>; <xref ref-type="bibr" rid="R65">Migliore et al., 2005</xref>). In contrast, to relate neural population activity to sensory processing and behavior, a systems neurophysiologist may build a circuit level model consisting of thousands of much simpler integrate-and-fire neurons (<xref ref-type="bibr" rid="R56">Lapicque, 1907</xref>; <xref ref-type="bibr" rid="R76">Potjans and Diesmann, 2014</xref>; <xref ref-type="bibr" rid="R15">Brunel, 2000</xref>). Domain specific tools have been developed to aid the construction and simulation of models at varying levels of biological detail and scales. An ecosystem of diverse tools is powerful and flexible, but it also creates serious challenges for the research community (<xref ref-type="bibr" rid="R17">Cannon et al., 2007</xref>). Each tool typically has its own design, features, Application Programming Interface (API) and syntax, a custom set of utility libraries, and finally, a distinct machine-readable representation of the model’s physiological components. This represents a complex landscape for users to navigate. Additionally, models developed in different simulators cannot be mixed and matched or easily compared, and the translation of a model from one tool-specific implementation to another can be non-trivial and error-prone. This fragmentation in modeling tools and approaches can act as a barrier to neuroscientists who wish to use models in their research, as well as impede how Findable, Accessible, Interoperable, and Reusable (FAIR) models are (<xref ref-type="bibr" rid="R99">Wilkinson et al., 2016</xref>).</p><p id="P4">To counter fragmentation and promote cooperation and interoperability within and across fields, standardization is required. The International Neuroinformatics Co-ordinating Facility (INCF) (<xref ref-type="bibr" rid="R2">Abrams et al., 2022</xref>) has highlighted the need for standards to “make research outputs machine-readable and computable and are necessary for making research FAIR”(<xref ref-type="bibr" rid="R53">INCF, 2023</xref>). In biology, several community standards have been developed to describe experimental data (e.g. Brain Imaging Data Structure (BIDS) (<xref ref-type="bibr" rid="R42">Gorgolewski et al., 2016</xref>), Neurodata Without Borders (NWB) (<xref ref-type="bibr" rid="R92">Teeters et al., 2015</xref>)) and computational models (e.g. Systems Biology Markup Language (SBML) (<xref ref-type="bibr" rid="R50">Hucka et al., 2003</xref>), CellML (<xref ref-type="bibr" rid="R58">Lloyd et al., 2004</xref>), Scalable Open Network Architecture TemplAte (SONATA) (<xref ref-type="bibr" rid="R21">Dai et al., 2020</xref>), PyNN (<xref ref-type="bibr" rid="R22">Davison et al., 2009</xref>) and Neural Open Markup Language (NeuroML) (<xref ref-type="bibr" rid="R38">Gleeson et al., 2010</xref>)). These standards have enabled open and interoperable ecosystems of software applications, libraries and databases to emerge, facilitating the sharing of research outputs, an endeavor encouraged by a growing number of funding agencies and scientific journals.</p><p id="P5">The initial version of the NeuroML standard, version 1 (NeuroMLv1), was originally conceived as a model description format (<xref ref-type="bibr" rid="R41">Goddard et al., 2001</xref>), and implemented as a three layered, declarative, modular, simulator independent language (<xref ref-type="bibr" rid="R38">Gleeson et al., 2010</xref>). NeuroMLv1 could describe detailed neuronal morphologies and their biophysical properties as well as specific instantiations of networks. It enabled the archiving of models in a standardized format and addressed the issue of simulator fragmentation by acting as the common language for model exchange between established simulation environments—NEURON (<xref ref-type="bibr" rid="R48">Hines and Carnevale, 1997</xref>; <xref ref-type="bibr" rid="R4">Awile et al., 2022</xref>), GENESIS (<xref ref-type="bibr" rid="R13">Bower and Beeman, 1997</xref>), and MOOSE (<xref ref-type="bibr" rid="R80">Ray and Bhalla, 2008</xref>). While solving a number of long-standing problems in computational neuroscience, NeuroMLv1 had several key limitations. The most restrictive of these was that the dynamical behavior of model elements was not formally described in the standard itself, making it only partially machine readable. Information on the dynamics of elements (i.e. how the state variables should evolve in time) was only provided in the form of human-readable documentation, requiring the developers of each new simulator to re-implement the behavior of these elements in their native format. Additionally, introduction of new model components required updates to the standard and all supporting simulators, making extension of the language difficult. Finally, the use of Extensible Markup Language (XML) as the primary interface language limited usability—applications would generally have to add their own code to read/write XML files.</p><p id="P6">To address these limitations, NeuroML was redesigned from the ground up in version 2 (NeuroMLv2) using the Low Entropy Modeling Specification (LEMS) language (<xref ref-type="bibr" rid="R18">Cannon et al., 2014</xref>). LEMS was designed to define a wide range of physio-chemical systems, enabling the creation of fully machine-readable, formal definitions of the structure and dynamics of any model components. Modeling elements in NeuroMLv2 (cells, ion channels, synapses) have their mathematical and structural definitions described in LEMS (e.g. the parameters required and how the state variables change with time). Thus, NeuroMLv2 retains all the features of NeuroMLv1—it remains modular, declarative, and continues to support multiple simulation engines—but unlike version 1, it is extensible, and all specifications are fully machine-readable. NeuroMLv2 also moved to Python as its main interface language and provides a comprehensive set of Python libraries to improve usability (<xref ref-type="bibr" rid="R95">Vella et al., 2014</xref>), with XML retained as a machine-readable serialization format (i.e. the form in which the model files are saved/shared).</p><p id="P7">Since its release in 2014, the NeuroMLv2 standard, the software ecosystem, and the community have all steadily grown. An open, community based governance structure was put in place—an elected Editorial Board, overseen by an independent Scientific Committee, maintains the standard and core software tools—APIs, reference simulators, and utilities. Although these tools were initially focused on enabling the simulation of models on multiple platforms, they have been expanded to support all stages of the model life cycle (<xref ref-type="fig" rid="F1">Fig. 1</xref>). Modelers can use these tools to easily create, inspect and visualize, validate, simulate, fit and optimize, share and disseminate NeuroMLv2 models and outputs (<xref ref-type="bibr" rid="R9">Billings et al., 2014</xref>; <xref ref-type="bibr" rid="R19">Cayco-Gajic et al., 2017</xref>; <xref ref-type="bibr" rid="R43">Gurnani and Silver, 2021</xref>; <xref ref-type="bibr" rid="R55">Kriener et al., 2022</xref>; <xref ref-type="bibr" rid="R37">Gleeson et al., 2019</xref>). To provide clear, concise, searchable information for both users and developers, the NeuroML documentation has been significantly expanded and re-deployed using the latest modern web technologies<sup><xref ref-type="fn" rid="FN1">1</xref></sup>. Increased community-wide collaborations have also extended the software ecosystem well beyond the NeuroMLv2 tools developed by the NeuroML team: additional simulators such as Brian (<xref ref-type="bibr" rid="R91">Stimberg et al., 2019</xref>), NetPyNE (<xref ref-type="bibr" rid="R27">Dura-Bernal et al., 2019</xref>), Arbor (<xref ref-type="bibr" rid="R1">Abi Akar et al., 2019</xref>) and EDEN (<xref ref-type="bibr" rid="R72">Panagiotou et al., 2022</xref>) all support NeuroMLv2. We have worked to ensure interoperability with other structured formats for model development in neuroscience such as PyNN (<xref ref-type="bibr" rid="R22">Davison et al., 2009</xref>) and SONATA (<xref ref-type="bibr" rid="R21">Dai et al., 2020</xref>). Platforms for collaboratively developing, visualizing, and sharing NeuroML models (Open Source Brain (OSB) (<xref ref-type="bibr" rid="R37">Gleeson et al., 2019</xref>)) as well as a searchable database of NeuroML model components (NeuroML Database (NeuroML-DB) (<xref ref-type="bibr" rid="R11">Birgiolas et al., 2023</xref>)) have been developed. These enhancements, driven by an ever expanding community, have helped NeuroMLv2 grow into a standard that has been officially endorsed by international organizations such as the INCF and COmputational Modeling in Biology NEtwork (COMBINE) (<xref ref-type="bibr" rid="R51">Hucka et al., 2015</xref>), and that is now sufficiently mature to be incorporated into a wide range of research workflows.</p><p id="P8">In this paper, we provide an overview of the current scope of version 2 of the NeuroML standard, describe the current software ecosystem and community, and outline the extensive resources to assist researchers to incorporate NeuroML into their modeling work. We demonstrate, with examples, that NeuroML supports users at all stages of the model development life cycle (<xref ref-type="fig" rid="F1">Fig. 1</xref>) and promotes FAIR principles in computational neuroscience. We highlight the various NeuroML tools and libraries, additional utilities, supported simulation engines, and the related projects that build upon NeuroML for automated model validation, advanced analysis, visualization, and sharing/reuse of models. Finally, we summarize the organizational aspects of NeuroML, its governance structure and community.</p></sec><sec id="S2" sec-type="results"><title>Results</title><sec id="S3"><title>NeuroML provides a ready to use set of curated model elements</title><p id="P9">A central aim of the NeuroML initiative is to enable and encourage the use of multi-scale biophysically detailed models of neurons and neuronal circuits in neuroscience research. The initiative takes a range of steps to achieve this aim. NeuroML provides users with a curated library of model elements that form the NeuroML standard<sup><xref ref-type="fn" rid="FN2">2</xref></sup> (<xref ref-type="fig" rid="F2">Fig. 2</xref>). The standard is maintained by the NeuroML Editorial Board that has identified a fundamental set of model types to support, to ensure that a significant proportion of commonly used neurobiological modeling entities can be described with the language. This includes (but is not limited to): active membrane conductances (using Hodgkin-Huxley style (<xref ref-type="bibr" rid="R49">Hodgkin and Huxley, 1952</xref>) or kinetic scheme based ionic conductances), multiple synapse and plasticity mechanisms, detailed multi-compartmental neuron models with morphologies and biophysical properties, abstract point neuron models, and networks of such cells spatially arranged in populations, connected by targeted projections, receiving spiking and current based inputs.</p><p id="P10">The NeuroMLv2 standard consists of two levels that are designed to enable users to easily create their models without worrying about simulator-specific details. The first level defines a formal “schema” for the standard model elements, their attributes/parameters (e.g. an integrate and fire cell model and its necessary attributes: a threshold parameter, a reset parameter, etc.), and the relationships between them (e.g. a network contains populations; a multi-compartmental cell morphology contains segments). This allows the validation of the completeness of the description of individual NeuroML model elements and models, <italic>prior to simulation</italic>. The second level defines the underlying dynamical behavior of the model elements (e.g. how the time varying membrane potential of a cell model is to be calculated). Most users do not need to interact with this level (which is enabled by LEMS), which, among other features, enables the automated translation of <italic>simulator-independent</italic> NeuroML models into <italic>simulator-specific</italic> code.</p><p id="P11">Thus, modelers can use the standard NeuroML elements to conveniently build simulator-independent models, while also being able to examine and extend the underlying implementations of models. As a simulator independent language, NeuroML also promotes interoperability between different computational modeling tools, and as a result, the standard library is complemented by a large, well maintained ecosystem of software tools that supports all stages of the model life cycle—from creation, analysis, simulation and fitting, to sharing and reuse. Finally, as discussed in later sections, for advanced use cases where the existing NeuroML model building blocks are insufficient, NeuroML also includes a framework for creating and including new model elements.</p></sec><sec id="S4"><title>NeuroML is a modular, structured language for defining FAIR models</title><p id="P12">NeuroMLv2 is a modular, structured, hierarchical, simulator independent format. All NeuroML elements are formally defined, independent and self-contained with hierarchical relationships between them. An “ionic conductance” model element in NeuroML, for example, can contain zero, one or more “gates” and be added into a “cell” model element along with a “morphology” element, which can then fit into a “population” of a “network” (<xref ref-type="fig" rid="F2">Fig. 2</xref>). To support the range of electrical properties found in biological neurons, ionic conductances with distinct ionic selectivities and dynamics can be generated in NeuroML through the inclusion of different types of gates (e.g. activation, inactivation), their dependence on variables such as voltage and [Ca<sup>2+</sup>] and their reversal potential. Cell types with different functional and biophysical properties can then be generated by conferring combinations of ionic conductances on their membranes. The conductance density can be adjusted to generate the electrophysiological properties found in real neurons. In practice, many examples of ionic conductances that underlie the electrical behavior of neurons are already available in NeuroMLv2 and can simply be inserted into a cell membrane (<xref ref-type="fig" rid="F2">Fig. 2</xref>). Indeed, a model element, once defined in NeuroML, acts as a building block that may be reused any number of times within or across models. Elements such as ionic conductances, cell biophysics, cell morphologies, and cell definitions that incorporate them can be serialized in separate files and “included” in other models (e.g. morphologies<sup><xref ref-type="fn" rid="FN3">3</xref></sup>). Such reuse of model components speeds model construction and prototyping irrespective of the simulation engine used.</p><p id="P13">The defined structure of each model element and the relationships between them inform users of exactly how model elements are to be created and combined. This encourages the construction of well-structured models, reduces errors and redundancy and ensures that FAIR principles are firmly embedded in NeuroML models and the ecosystem of tools. As we will see in the following sections, NeuroML’s formal structure also enables features such as model validation priorto simulation, translation into simulation specific formats, and the use of NeuroML as a common language of exchange between different tools.</p></sec><sec id="S5"><title>NeuroML supports a large ecosystem of software tools that cover all stages of the model life cycle</title><p id="P14">Model building and the generation of scientific knowledge from simulation and analysis of models is a multi-step, iterative process requiring an array of software tools. NeuroML supports all stages of the model development life cycle (<xref ref-type="fig" rid="F1">Fig. 1</xref>), by providing a single model description format that interacts with a myriad of tools throughout the process. Researchers typically assemble ad-hoc sets of scripts, applications, and processes to help them in their investigations. In the absence of standardization, they must work with the specific model formats and APIs that each tool they use requires, and somehow convert model descriptions when using multiple applications in a toolchain. NeuroML addresses this issue by providing a common language for the use and exchange of models and their components between different simulation engines and modeling tools. The NeuroML ecosystem includes a large collection of software tools, both developed and maintained by the main NeuroML contributors (the “core NeuroML tools and libraries”: jNeuroML, pyNeuroML, APIs) and those external applications that have added NeuroML support (<xref ref-type="fig" rid="F3">Fig. 3</xref>, <xref ref-type="fig" rid="F4">Fig. 4a</xref>, <xref ref-type="supplementary-material" rid="SD1">Appendix 1 Tables 1 and 2</xref>).</p><p id="P15">The core NeuroML tools and libraries include APIs in several programming languages—Python, Java, C++ and MATLAB. These tools provide critical functionality to allow users to interact with NeuroML components and build models. Using these, researchers can build models from scratch, or read, modify, analyze, visualize, and simulate existing NeuroML models on supported simulation platforms. Furthermore, developers can also use the core tools, libraries and APIs to support NeuroML in their own applications.</p><p id="P16">The simulation platforms (e.g. EDEN (<xref ref-type="bibr" rid="R72">Panagiotou et al., 2022</xref>), NEURON (<xref ref-type="bibr" rid="R48">Hines and Carnevale, 1997</xref>)), along with other independently developed tools, form the next layer of the software ecosystem-providing extra functionality such as interactive model construction (e.g. neuro-Construct (<xref ref-type="bibr" rid="R36">Gleeson et al., 2007</xref>), NetPyNE (<xref ref-type="bibr" rid="R27">Dura-Bernal et al., 2019</xref>)), additional visualization (e.g. OSB (<xref ref-type="bibr" rid="R37">Gleeson et al., 2019</xref>)), analysis (e.g. NeuroML-DB (<xref ref-type="bibr" rid="R11">Birgiolas et al., 2023</xref>)), data-driven validation (e.g. SciUnit (<xref ref-type="bibr" rid="R34">Gerkin et al., 2019</xref>)), and archival/sharing (e.g. OSB, NeuroML-DB). Indeed, OSB and NeuroML-DB are prime examples of how advanced neuroinformatics resources can be built on top of standards such as NeuroML.</p><p id="P17"><xref ref-type="table" rid="T1">Table 1</xref> lists interactive, step-by-step guides in the NeuroML documentation, which can be followed to learn the fundamental NeuroML concepts, as well as illustrate how NeuroML compliant tools can be used to achieve specific tasks across the model development life cycle. In the following sections we discuss the specific functionality available at each stage of model development.</p></sec><sec id="S6"><title>Creating NeuroML models</title><p id="P18">The structured declarative elements of NeuroMLv2, when combined with a procedural scripting language such as Python, provide a powerful and yet intuitive “building block” approach to model construction. For this reason, Python is nowthe recommended language for interacting with NeuroML (<xref ref-type="fig" rid="F4">Fig. 4</xref>), although XML remains the primary serialization language for the format (i.e. for saving to disk and depositing in model repositories (<xref ref-type="fig" rid="F5">Fig. 5</xref>)). Python has emerged as a key programming language in science, including many areas of neuroscience (<xref ref-type="bibr" rid="R69">Muller et al., 2015</xref>). A Python based NeuroML ecosystem ensures that users can take advantage of Python’s features, and also use packages from the wider Python ecosystem in their work (e.g. Numpy (<xref ref-type="bibr" rid="R44">Harris et al., 2020</xref>), Matplotlib (<xref ref-type="bibr" rid="R52">Hunter, 2007</xref>)). pyNeuroML, the Python interface for working with NeuroML, is built on top of the Python NeuroML API, libNeuroML(<xref ref-type="bibr" rid="R95">Vella et al., 2014</xref>; <xref ref-type="bibr" rid="R86">Sinha et al., 2023a</xref>,<xref ref-type="bibr" rid="R87">b</xref>) (<xref ref-type="fig" rid="F4">Fig. 4</xref>).</p><p id="P19">As illustrated in <xref ref-type="fig" rid="F5">Fig. 5</xref>, Python can be used to combine different NeuroML components into a model. NeuroML supports several pathways for the creation of new models. Modelers may use elements included in the NeuroML standard, re-use user-defined NeuroML model elements from other models or define completely new model elements using LEMS (<xref ref-type="fig" rid="F5">Fig. 5</xref>) (see section on extending NeuroML below). It is common for models to use a combination of these strategies, e.g. <xref ref-type="bibr" rid="R43">Gurnani and Silver (2021)</xref>; <xref ref-type="bibr" rid="R55">Kriener et al. (2022)</xref>; <xref ref-type="bibr" rid="R19">Cayco-Gajic et al. (2017)</xref>, highlighting the flexibility provided bythe modulardesign of NeuroML. NeuroMLAPIs support all of these workflows. The Python tools also include many additional higher level utilities to speed up model construction, such as factory functions, type hints, and convenience functions for building complex multi-compartmental neuron models (Box 1).</p><p id="P20">For construction of complex 3D circuit models, or for users who are not experienced with Python, a range of NeuroML compliant online and standalone applications with graphical user interfaces are available. These include NetPyNE’s interactive web interface (<xref ref-type="bibr" rid="R27">Dura-Bernal et al., 2019</xref>) (which is available on the latest version of OSB<sup><xref ref-type="fn" rid="FN4">4</xref></sup>) and neuroConstruct (<xref ref-type="bibr" rid="R36">Gleeson et al., 2007</xref>) which can export models directly into NeuroML and LEMS. These applications can be used to build and simulate new NeuroML models without requiring programming. Thus, users can take advantage of the individual features provided by these applications to generate NeuroML compliant models and model elements.</p></sec><sec id="S7"><title>Validating NeuroML models</title><p id="P21">Ensuring a model is “valid” can have different meanings at different stages of the life cycle—from checking whether the source files are in the correct format, to ensuring the model reproduces a significant feature of its biological counterpart. NeuroML’s hierarchical, well-defined structure allows users to check their model descriptions for correctness at multiple levels (<xref ref-type="fig" rid="F6">Fig. 6</xref>), in a manner similar to multi-level testing in software development. Importantly, most of the validation tests in NeuroML are run on the models’ NeuroML descriptions <italic>prior to simulation</italic>.</p><p id="P22">A first level of validation checks the structure of individual model elements against their formal specifications contained in the NeuroML standard. The standard includes information on the parameters of each model element, restrictions on parameter values, their allowed units, their cardinality, and the location of the model element in the model hierarchy—i.e. parent/children relationships. A second level of validation includes a suite of semantic and logical checks. For example, at this level, a model of a multi-compartmental cell can be checked to ensure that all segments referenced in segment groups (e.g. the group of dendritic segments) have been defined, and only defined once with unique identifiers. A list of validation tests currently included in the NeuroML core tools can be found in <xref ref-type="supplementary-material" rid="SD1">Appendix 1 Table 4</xref>. These can be run against NeuroML files at the command line or programmatically in Python—Box 1.</p><p id="P23">A key advantage of using the NeuroML2/LEMS framework is that dimensions and units are in-built into LEMS descriptions. This enables automated conversions of units, unit checking, together with the validation of equations. Any expressions in models which are dimensionally inconsistent will be highlighted at this stage. Note that LEMS handles unit conversions internally—modelers have flexibility in how they enter the <italic>units</italic> of parameter values (e.g. specifying conductance density in <italic>S/m</italic><sup>2</sup> or <italic>mS/cm<sup>2</sup></italic>) in the NeuroML files, with the underlying LEMS definitions ensuring that a consistent set of <italic>dimensions</italic> are used in model equations (<xref ref-type="bibr" rid="R18">Cannon et al., 2014</xref>). LEMS then takes care of mapping the entered units to the target simulator’s preferred units. This makes model definition, inspection, use, extension, and translation easier and less error-prone.</p><p id="P24">Once the set of NeuroML files are validated, the model can be simulated, and checks can be made to test whether execution produces consistent results (e.g. firing rate of neurons in a given population) across multiple simulators (or versions of the same simulator). Forthis, the OSB Model Validation (OMV) framework has been developed (<xref ref-type="bibr" rid="R37">Gleeson et al., 2019</xref>). This framework can automatically check that the output (e.g. spike times) of a NeuroML model running on a given simulator is within an allowed tolerance of the expected value. OMV has been applied to NeuroML models that have been shared on OSB, to test consistent behavior of models as the models themselves, and all supported simulators, are updated. This has proven to be a valuable process for ensuring uniform usage and interpretation of NeuroML across the ecosystem of supporting tools.</p><p id="P25">A final level of validation concerns checking whether the model elements have emergent features that are in line with experimentally observed behavior of the biological equivalents. NeuronUnit (<xref ref-type="bibr" rid="R34">Gerkin et al., 2019</xref>), a SciUnit (<xref ref-type="bibr" rid="R71">Omar et al., 2014</xref>) package for data-driven unit testing and validation of neuronal and ion channel models, is also fully NeuroML compliant, and also supports automated validation of NeuroML models shared on NeuroML-DB and OSB.</p></sec><sec id="S8"><title>Visualizing/analyzing NeuroML models</title><p id="P26">Multiple visualization, inspection, and analysis tools are available in the NeuroML software ecosystem. Since NeuroML models have a fixed, well defined structure, NeuroML libraries can extract all information from their descriptions. This information can be used by modelers and their programs/tools to run automated programmatic analyses on models.</p><p id="P27">pyNeuroML includes a range of ready-made inspection utilities for users (Box 1) that can be used via Python scripts, interactive Jupyter Notebooks, and command line tools. Examining the structure of cell and network models with 2D and 3D views is important for manual validation and to compare them to their biological counterparts. Graphical views of cell model morphology and the 3-dimensional network layout (<xref ref-type="fig" rid="F7">Fig. 7</xref>), population and connectivity matrices/graphs at different levels (<xref ref-type="fig" rid="F8">Fig. 8</xref>), and model summaries can all be generated (<xref ref-type="fig" rid="F9">Fig. 9</xref>). In addition to these inspection functions, a variety of utilities for the inspection of NeuroML descriptions of electrophysiological properties of membrane conductances and their spatial distribution over the neuronal membrane are also provided (<xref ref-type="fig" rid="F9">Fig. 9</xref>).</p><p id="P28">The graphical applications included in the NeuroML ecosystem (e.g. neuroConstruct, NeuroML-DB, OSB (v1<sup><xref ref-type="fn" rid="FN5">5</xref></sup> and v2), NetPyNE, and Arbor-GUI) also provide many of their own analysis and visualization functions. OSBv1, for example, supports automated 3D visualization of networks and cell morphologies, network connectivity graphs and metrics, and advanced model inspection features (<xref ref-type="bibr" rid="R37">Gleeson et al., 2019</xref>) (<xref ref-type="fig" rid="F7">Fig. 7b</xref>). On OSBv2, NetPyNE provides advanced graphical plotting and analysis facilities (<xref ref-type="fig" rid="F7">Fig. 7c</xref>). A complete JupyterLab<sup><xref ref-type="fn" rid="FN6">6</xref></sup> interface is also included in OSBv2 for Python scripting, allowing interactive notebooks to be created and shared, mixing scripting and graphical elements, including those generated by pyNeuroML. NeuroML-DB also provides information on electrophysiology, morphology, and the simulation aspects of neuronal models (<xref ref-type="bibr" rid="R11">Birgiolas et al., 2023</xref>) (<xref ref-type="fig" rid="F9">Fig. 9a</xref>). In general, any NeuroML compliant application can be used to inspect and analyze elements of NeuroML models, each having their own distinct advantages.</p></sec><sec id="S9"><title>Simulating NeuroML models</title><p id="P29">Users can simulate NeuroML models using a number of simulation engines without making any changes to their models. This is because the NeuroML/LEMS descriptions of the models are simulator independent and can be translated to simulator specific formats. pyNeuroML facilitates access to all available simulation options, both from the command line and using function calls in Python scripts when using the Python API (Box 1).</p><p id="P30">Simulation engines can be classified into five broad categories (<xref ref-type="fig" rid="F5">Fig. 5</xref>): <list list-type="order" id="L1"><list-item><p id="P31">reference NeuroML/LEMS simulators.</p></list-item><list-item><p id="P32">independently developed simulators that natively support NeuroML.</p></list-item><list-item><p id="P33">simulators that import/translate NeuroML to their own internal formats.</p></list-item><list-item><p id="P34">simulators that are supported through generation of simulator-specific scripts by the core NeuroML tools.</p></list-item><list-item><p id="P35">export to other standardized formats which may allow simulation/analysis in other packages.</p></list-item></list></p><p id="P36">Each simulation engine supports a different set of features that NeuroML users can take advantage of (Table 3). For example, the reference NeuroML and LEMS simulators, jNeuroML, jLEMS, and PyLEMS, can simulate all LEMS models and most NeuroML models. They cannot, however, simulate multi-compartmental models, and users should opt for a simulator that does, e.g. NEURON (<xref ref-type="bibr" rid="R48">Hines and Carnevale, 1997</xref>) or EDEN (<xref ref-type="bibr" rid="R72">Panagiotou et al., 2022</xref>).</p><p id="P37">Another criteria that is relevant when choosing a simulation engine is the efficiency of simulation. Simulation engines implement different computing techniques—e.g. NetPyNE, Arbor, and EDEN support parallel execution on clusters and super computers via Message Passing Interface (MPI)—to enable simulation of large scale models. Thus, for efficient large scale simulation, users may prefer one of these simulation engines.</p><p id="P38">The preferred programming language for working with NeuroML is Python (<xref ref-type="bibr" rid="R69">Muller et al., 2015</xref>). A Python based ecosystem ensures that automated simulation of models can easily be carried out either using scripts, or the command line tools. Utilities to enable the execution of simulations on dedicated supercomputing resources, such as the Neuroscience Gateway (NSG)<sup><xref ref-type="fn" rid="FN7">7</xref></sup> (<xref ref-type="bibr" rid="R88">Sivagnanam et al., 2013</xref>) are also available within the ecosystem. OSBv1 takes advantage of these to support the submission of NeuroML model simulation jobs using the NEURON simulator on NSG. NetPyNE also includes parallel execution of simulations, batch processing and parameter exploration features, and its deployment on OSBv2 allows users to easily access these features on a scalable, cloud based platform. Finally, the JupyterLab environment on OSBv2 contains all of the core NeuroML tools and various simulation engines as pre-installed software packages, ready to use.</p></sec><sec id="S10"><title>Optimizing NeuroML models</title><p id="P39">Development of biologically detailed models of brain function requires that components and emergent properties match the behavior of the corresponding biology as closely as possible. Thus, fitting neurons and networks to experimental data is a critical step in the model life cycle (<xref ref-type="bibr" rid="R82">Rossant et al., 2011</xref>; <xref ref-type="bibr" rid="R25">Druckmann et al., 2007</xref>). pyNeuroML promotes data-driven modeling by providing functions to fit and optimize NeuroML models against experimental data. It includes the NeuroMLTuner module<sup><xref ref-type="fn" rid="FN8">8</xref></sup>, which builds on the Neurotune package<sup><xref ref-type="fn" rid="FN9">9</xref></sup> for tuning and optimizing NeuroML models against data using evolutionary computation techniques. This module allows users to select a set of weighted features from their data to calculate the fitness of populations of candidate models. In each generation, the fittest models are found and mutated to create the next generation of models, until a set of models that best exhibit the selected data features are isolated (see Guide 6 in <xref ref-type="table" rid="T1">Table 1</xref>)<sup><xref ref-type="fn" rid="FN10">10</xref></sup>.</p><p id="P40">The NeuroML ecosystem includes multiple tools that also provide model fitting features. The Blue Brain Python Optimisation Library (BluePyOpt)(<xref ref-type="bibr" rid="R94">Van Geit et al., 2016</xref>), an extensible framework for data-driven model parameter optimization, supports exporting optimized models to NeuroML files<sup><xref ref-type="fn" rid="FN11">11</xref></sup>. Similar to pyNeuroML, NetPyNE also uses the inspyred Python package<sup><xref ref-type="fn" rid="FN12">12</xref></sup> to provide evolutionary computation based model optimization features (<xref ref-type="bibr" rid="R27">Dura-Bernal et al., 2019</xref>).</p></sec><sec id="S11"><title>Sharing NeuroML models</title><p id="P41">The NeuroML ecosystem includes the advanced web based model sharing platforms NeuroML-DB (<xref ref-type="bibr" rid="R11">Birgiolas et al., 2023</xref>)<sup><xref ref-type="fn" rid="FN13">13</xref></sup> and OSB (<xref ref-type="bibr" rid="R37">Gleeson et al., 2019</xref>). These resources have been designed specifically for the dissemination of models and model elements standardized in NeuroML. The OSB platform also supports visualization, analysis, simulation, and development of NeuroML models. Researchers can create shared, collaborative NeuroML projects on it and can take advantage of the in-built automated visualization and analysis pipelines to explore and re-use models and their components. Whereas version 1 (OSBv1) focused on providing an interactive 3D interface for running pre-existing NeuroML models (e.g. sourced from linked GitHub repositories) (<xref ref-type="bibr" rid="R37">Gleeson et al., 2019</xref>), OSBv2 provides cloud based workspaces for researchers to construct NeuroML based computational models as well as analyze, and compare them to, the experimental data on which they are based, thus facilitating data-driven computational modeling. <xref ref-type="supplementary-material" rid="SD1">Appendix 1 Table 7</xref> provides a list of stable, well tested NeuroML compliant models from brain regions including the neocortex, cerebellum and hippocampus, which have been shared on OSB.</p><p id="P42">NeuroML-DB aims to promote the uptake of standardized NeuroML models by providing a convenient location for archiving and exploration. It includes advanced database search functions, including ontology based search (<xref ref-type="bibr" rid="R10">Birgiolas et al., 2015</xref>), coupled with pre-computed analyses on models’ electrophysiological and morphological properties, as well as an indication of the relative speed of execution of different models.</p><p id="P43">NeuroML’s modular nature ensures that models and their components can be easily shared with others through standard code sharing resources. The simplest way of sharing NeuroML models and components is to make their Python descriptions or their XML serializations available through these resources. Indeed, it is straightforward to make Python descriptions or the XML serializations available via different file, code (GitHub, GitLab), model sharing (ModelDB (<xref ref-type="bibr" rid="R66">Migliore et al., 2003</xref>; <xref ref-type="bibr" rid="R62">McDougal et al., 2017</xref>)), and archival (Zenodo, Open Science Framework) platforms, just like any other code/data produced in scientific investigations. Complex models with many components, spanning multiple files, such as networks and neuronal models that reference multiple cell and ionic conductance definitions, can also be exported into a COMBINE zip archive (<xref ref-type="bibr" rid="R6">Bergmann et al., 2014</xref>), a zip file that includes metadata about its contents. pyNeuroML includes functions to easily create COMBINE archives from NeuroML models and simulations (Box 1).</p><p id="P44">OSB is designed so that researchers can share their code on their chosen platform (e.g. GitHub), while retaining full control overwrite access to their repositories. Afterwards, a page for the model can be created on OSB which lists the latest files present there, with links to OSB visualization/analysis/simulation features which can use the standardized files found in the resource.</p><p id="P45">NeuroML supports the embedding of structured ontological information in model descriptions (<xref ref-type="bibr" rid="R70">Neal et al., 2018</xref>). Models can include NeuroLex (now InterLex) (<xref ref-type="bibr" rid="R57">Larson and Martone, 2013</xref>) identifiers for their components (e.g. neuro_lex_id in Box 1). This links model components to their biological counterparts and makes them more transparent, findable, and reusable. For example, different types of neurons and brain regions have unique ontological ids. A user can use these ids to search for relevant model components on NeuroML-DB. More general information to maintain provenance can also be included in NeuroML models<sup><xref ref-type="fn" rid="FN14">14</xref></sup>.</p></sec><sec id="S12"><title>Reusing NeuroML models</title><p id="P46">NeuroML models, once openly shared, become community resources that are accessible to all. Researchers can use models shared on NeuroML-DB and OSB without restrictions. Guide 5 in <xref ref-type="table" rid="T1">Table 1</xref> provides an example of finding NeuroML based model components using the API of NeuroML-DB, and creating novel models incorporating these elements.</p><p id="P47">In addition to these platforms, other experimental data and model dissemination platforms also provide standardized NeuroML versions of relevant models to promote uptake and reuse. For example, NeuroMorpho.org (<xref ref-type="bibr" rid="R3">Ascoli et al., 2007</xref>) includes a tool to download NeuroML compliant versions of its cellular reconstructions<sup><xref ref-type="fn" rid="FN15">15</xref>, <xref ref-type="fn" rid="FN16">16</xref></sup>. NeuroML versions of models released by organizations such as the Blue Brain Project (<xref ref-type="bibr" rid="R60">Markram et al., 2015</xref>) (whole cell models as well as ion channel models from Channelpedia (<xref ref-type="bibr" rid="R79">Ranjan et al., 2011</xref>)), the Allen Institute for Brain Science <italic><bold>(<xref ref-type="bibr" rid="R8">Billeh et al., 2020</xref>)</bold></italic>, and the OpenWorm project (<xref ref-type="bibr" rid="R40">Gleeson et al., 2018</xref>) are also openly available for reuse (<xref ref-type="supplementary-material" rid="SD1">Appendix 1 Table 7</xref>).</p><p id="P48">NeuroML can also interact with other standards to further promote model re-use. Whereas NeuroML is a declarative standard, PyNN (<xref ref-type="bibr" rid="R22">Davison et al., 2009</xref>) is a procedural standard with a Python API for creating network models that can be simulated on multiple simulators. NeuroML models which are within the scope of PyNN can be converted to the PyNN format, and vice-versa. Similarly, NeuroML also interacts with SONATA (<xref ref-type="bibr" rid="R21">Dai et al., 2020</xref>) data format by supporting the two way conversion of the network structures of NeuroML models into SONATA. In standards not specific to neuroscience, models from the well established SBML standard (<xref ref-type="bibr" rid="R50">Hucka et al., 2003</xref>) can be converted to LEMS (<xref ref-type="bibr" rid="R18">Cannon et al., 2014</xref>), for inclusion in neuroscience related modeling pipelines, and a subset of NeuroML/LEMS models can be exported to SBML, which allows use with simulators and analysis packages compliant to this standard, e.g. Tellurium (<xref ref-type="bibr" rid="R20">Choi et al., 2018</xref>). Simulation execution details of NeuroML/LEMS models can also be exported to Simulation Experiment Description Markup Language (SED-ML) (<xref ref-type="bibr" rid="R97">Waltemath et al., 2011</xref>), allowing advanced resources such as Biosimulators<sup><xref ref-type="fn" rid="FN17">17</xref></sup> (<xref ref-type="bibr" rid="R85">Shaikh et al., 2022</xref>) to feature NeuroML models.</p></sec><sec id="S13"><title>NeuroML is extensible</title><p id="P49">While the standard NeuroML elements (<xref ref-type="supplementary-material" rid="SD1">Appendix 1 Tables 5 and 6</xref>) provide a broad range of curated model types for simulation based investigations, NeuroML can be extended (using LEMS) to incorporate novel model elements and types when they are not (yet) available in the standard.</p><p id="P50">LEMS is a general purpose model specification language for creating fully machine readable definitions of the structure and behavior of model elements (<xref ref-type="bibr" rid="R18">Cannon et al., 2014</xref>). The dynamics of NeuroML elements are described in LEMS. The hierarchical nature of LEMS means that new elements can build on pre-existing elements of the modular NeuroML framework. For example, a novel ionic conductance element can extend the “ionChannelHH” element, which in turn extends “baseIonChannel”. Thus, the new element will be known to the NeuroML elements as depending on an external voltage and producing a conductance, properties that are inherited from “baseIonChannel”. Other elements, such as a cell, can incorporate this new type without needing any other information about its internal workings.</p><p id="P51">LEMS (and therefore NeuroML) element definitions (called “ComponentTypes”) specify the dynamical behavior of the model element in terms of a list of yet to be set parameters. Once the generic model behavior is defined, modelers only need to fill in the appropriate values of the required parameters (e.g. conductance density, reversal potential, etc.) to create new instances (called “Components”) of the element (see <xref ref-type="sec" rid="S21">Methods</xref> for more details). Users can therefore create arbitrary, reusable model elements in LEMS, which can be treated the same way as the standard model elements (for an example see Guide 7 in <xref ref-type="table" rid="T1">Table 1</xref>).</p><p id="P52">Another major advantage of NeuroML’s use of the LEMS language is its translatability. Since LEMS is fully machine readable, its primitives (e.g. state variables and their dynamics, expressed as ordinary differential equations) can be readily mapped into other languages. As a result, simulator specific code (<xref ref-type="bibr" rid="R12">Blundell et al., 2018</xref>) can be generated from NeuroML models and their LEMS extensions (<xref ref-type="fig" rid="F5">Fig. 5</xref>), allowing NeuroML to remain simulator-independent while supporting multiple simulation engines.</p><p id="P53">Newly created elements that may be of interest to the wider research community can be submitted to the NeuroML Editorial Board for inclusion into the standard. The standard, therefore, evolves as new model elements are added, and improved versions of the standard and associated software tool chain are regularly released to the community.</p></sec><sec id="S14"><title>NeuroML is a global open community initiative</title><p id="P54">NeuroML is a global open community standard that is used and maintained collectively by a diverse set of stakeholders. The NeuroML Scientific Committee<sup><xref ref-type="fn" rid="FN18">18</xref></sup> and the elected NeuroML Editorial Board<sup><xref ref-type="fn" rid="FN19">19</xref></sup> oversee the standard, the core tools, and the initiative. This ensures that NeuroML supports the myriad of use cases generated by a multi-disciplinary computational modeling community.</p><p id="P55">NeuroML is an endorsed INCF(<xref ref-type="bibr" rid="R2">Abrams et al., 2022</xref>) community standard (<xref ref-type="bibr" rid="R61">Martone et al., 2019</xref>) and is one of the main standards of the international COMBINE initiative (<xref ref-type="bibr" rid="R51">Hucka et al., 2015</xref>), which supports the development of other standards in computational biology as well (e.g. SBML <italic><bold>(<xref ref-type="bibr" rid="R50">Hucka et al., 2003</xref>)</bold></italic> and CellML (<xref ref-type="bibr" rid="R58">Lloyd et al., 2004</xref>)). Participation in these organizations guarantees that NeuroML follows current best practices in standardization, and remains linked to and interoperable with other standards wherever possible. The NeuroML community also participates in training and outreach activities such as Google Summer of Code<sup><xref ref-type="fn" rid="FN20">20</xref></sup>, tutorials, and internships under these and other organizations.</p><p id="P56">The NeuroML community maintains public open communication channels to ensure that all community members can easily participate in troubleshooting, discussions, and development activities. A public mailing list<sup><xref ref-type="fn" rid="FN21">21</xref></sup> is used for asynchronous communication and announcements while open chat channels on Gitter (now Matrix/Element<sup><xref ref-type="fn" rid="FN22">22</xref></sup>) provide immediate access to the NeuroML community. All software repositories hosted on GitHub also have issue trackers for software specific queries. A community Code of Conduct<sup><xref ref-type="fn" rid="FN23">23</xref></sup> sets the standards of communication and behavior expected on all community channels.</p><p id="P57">A crucial aim of NeuroML is to enable Open Science and ensure models in computational neuroscience are FAIR. To this end, all development and discussions related to NeuroML are done publicly. The schema, all core software tools, and relevant resources such as documentation are made freely available under suitable Free/Open Source Software (FOSS) licenses on public platforms. Everyone can, therefore, use, modify, study, and share all NeuroML artifacts without restriction. Users and developers are encouraged to contribute modifications and improvements to the schema and core tools and to participate in the general maintenance and release process.</p></sec></sec><sec id="S15" sec-type="discussion"><title>Discussion</title><p id="P58">The model description language NeuroMLv2 has matured into a widely adopted community standard for computational neuroscience. Its modular, hierarchical structure can define a wide range of neuronal and circuit model types including simplified representations and those with a high degree of biological detail. The standardized, machine readable format of the NeuroMLv2/LEMS framework provides a flexible, common language for communicating between a wide range of tools and simulators used to create, validate, visualize, analyze, simulate, share and reuse models. By enabling this interoperability, NeuroMLv2 has spawned a large ecosystem of interacting tools that coverall stages of the model development life cycle, bringing greater coherence to a previously fragmented landscape. Moreover, the modular nature of the model components and hierarchical structure conferred by NeuroMLv2, combined with the flexibility of coding in Python, has created a powerful “building block” approach for constructing standardized models from scratch. NeuroML has therefore evolved from a standardized archiving format into a mature language that supports an ecosystem of tools for the creation and execution of models that support the FAIR principles and promote open, transparent and reproducible science.</p><sec id="S16"><title>Evolution of NeuroML and emergence of the NeuroMLv2 tool ecosystem</title><p id="P59">NeuroML was conceived (<xref ref-type="bibr" rid="R41">Goddard et al., 2001</xref>) and developed (<xref ref-type="bibr" rid="R38">Gleeson et al., 2010</xref>) as a declarative XML based framework for defining biophysical models of neurons and networks in a standardized form in order to compare model properties across simulators and to promote transparency and reuse. NeuroML version 1 achieved these aims and was mainly used to archive and visualize existing models (<xref ref-type="bibr" rid="R38">Gleeson et al., 2010</xref>). Building on this, the subsequent development of the NeuroMLv2/LEMS framework provided a way to describe models as a hierarchical set of components with dimensional parameters and state variables, so that their structure and dynamics are fully machine readable (<xref ref-type="bibr" rid="R18">Cannon et al., 2014</xref>). This enabled models to be losslessly mapped to other representations, greatly promoting interoperability between tools through read-write and automated code generation (<xref ref-type="bibr" rid="R12">Blundell et al., 2018</xref>). As NeuroMLv2 matured and became a community standard recognized by the INCF with a formal governance structure, an increasingly wide range of models and modeling tools have been developed or modified to be NeuroMLv2 compliant (<xref ref-type="supplementary-material" rid="SD1">Appendix 1 Tables 1, 2 and 7</xref>). The core tools, maintained directly by the NeuroML developers (<xref ref-type="fig" rid="F4">Fig. 4</xref>), provide functionality to read, modify, or create new NeuroML models, as well as to analyze and visualize, and simulate the models. Furthermore, there are now a larger number of tools that have been developed by other members of the community (<xref ref-type="fig" rid="F3">Fig. 3</xref>), including a neuronal simulator designed specifically for NeuroMLv2 (<xref ref-type="bibr" rid="R72">Panagiotou et al., 2022</xref>). The emergence of an ecosystem of NeuroMLv2 compliant tools enables modelers to build tool chains that span the model life cycle and build and reuse standardized models.</p></sec><sec id="S17"><title>NeuroML and other standards in computational neuroscience</title><p id="P60">Several other standards and formats exist to support computational modeling of neuronal systems. Whereas NeuroML is a modular, declarative simulator independent standard for biophysical neuronal modelling, PyNN (<xref ref-type="bibr" rid="R22">Davison et al., 2009</xref>) and SONATA (<xref ref-type="bibr" rid="R21">Dai et al., 2020</xref>) provide a procedural Python based simulator independent API and a framework for efficiently handling large scale network simulations, respectively. Even though there is some overlap in the functionality provided by these standards, they each target distinct use cases and have their own goals and features. The teams developing these standards work in concert to ensure that they remain interoperable with each other, frequently sharing methods and techniques (<xref ref-type="bibr" rid="R21">Dai et al., 2020</xref>). This allows researchers to use their standard of choice and easily combine with another if the need arises. PyNN and SONATA are therefore integral parts of the wider NeuroML ecosystem.</p></sec><sec id="S18"><title>Why using NeuroML and Python promotes the construction of FAIR models</title><p id="P61">The modular and hierarchical structure of NeuroMLv2, when combined with Python, provides a powerful combination of structured declarative elements and flexible procedural approaches that enables a “Lego-like” building block approach for constructing biologically detailed models <xref ref-type="bibr" rid="R19">(Cayco-Gajic et al., 2017</xref>; <xref ref-type="bibr" rid="R9">Billings et al., 2014</xref>; <xref ref-type="bibr" rid="R55">Kriener et al., 2022</xref>; <xref ref-type="bibr" rid="R43">Gurnani and Silver, 2021</xref>). This has been advanced by the development of pyNeuroML, which provides a single installable package which offers direct access to a range of functionality for handling NeuroML models (Box 1). Moreover, the web-based documentation of NeuroMLv2, with multiple Python scripts illustrating the usage of the language and associated tools (<xref ref-type="table" rid="T1">Table 1</xref>), has recently been updated and expanded (<ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/Landing.html">https://docs.neuroml.org</ext-link>). This provides a central resource for both new and experienced users of NeuroML supporting its use in model building. As the examples of this resource illustrate, building models using NeuroMLv2 is efficient and intuitive, as the model components are pre-made and how they fit together specified. The structured format allows APIs like libNeuroML to incorporate features such as auto-completion and inline validation of model parameters and structure as scripts are being developed. In addition, automated multi-stage model validation ensures the code, equations and internal structure are validated against the NeuroML schema minimizing human errors and model simulations outputs are within acceptable bounds (<xref ref-type="fig" rid="F6">Fig. 6</xref>). The NeuroMLv2 ecosystem also provides convenient ways to visualize and inspect the inner structure of models. pyNeuroML provides Python functions and corresponding command line utilities to view neuronal morphology (<xref ref-type="fig" rid="F7">Fig. 7</xref>), neuronal electrophysiology (<xref ref-type="fig" rid="F9">Fig. 9</xref>), circuit connectivity and schematics (<xref ref-type="fig" rid="F8">Fig. 8</xref>). In addition, custom analysis pipelines and advanced neuroinformatics resources can easily be built using the APIs. For example, loading a NeuroML model of a neuron into OSB enables visualization of the morphology and the spatial distribution of ionic conductance over the membrane as well as inspection of the conductance state variables, while the connectivity and synaptic weight matrices can be automatically displayed for circuit models (<xref ref-type="fig" rid="F7">Fig. 7</xref>, <xref ref-type="bibr" rid="R37">Gleeson et al. (2019)</xref>). Such features of OSB, which are made possible by the structured format of NeuroMLv2, promote model transparency, reproducibility and sharing. By enabling the development and sharing of well tested and transparent models the wider NeuroMLv2 ecosystem promotes Open Science.</p></sec><sec id="S19"><title>Limitations of NeuroML and current work</title><p id="P62">A limitation of any standardized framework is that there will always be models and model elements that fall outside the current scope of the standard. Although NeuroML suffers from this limitation, the underlying LEMS based framework provides a flexible route to develop a wide range of new types of physio-chemical models (<xref ref-type="bibr" rid="R18">Cannon et al., 2014</xref>). This is relatively straightforward if the new model component, such as a synaptic plasticity mechanism, fits within the existing hierarchical structure of NeuroMLv2, as the new type of synaptic element can build on an existing base synapse type, which specifies the relevant input and outputs (e.g. local voltage and synaptic current). For more radical shifts in model types (e.g. neuronal morphologies that grow during learning), that do not fit neatly into the current NeuroMLv2 schema, structural changes to the language would be required. This route is more involved as the pros and cons of changes to the structure of NeuroMLv2 would need to be considered by the Scientific Committee and, if approved, implemented by the Editorial Board.</p><p id="P63">Whereas the current scope of NeuroMLv2 encompasses models of spiking neurons and networks at different levels of biological detail, plans are in place to extend its scope to include more abstract, rate-based models of neuronal populations (e.g. see <xref ref-type="bibr" rid="R100">Wilson and Cowan (1972)</xref>; <xref ref-type="bibr" rid="R63">Mejias et al. (2016)</xref> in <xref ref-type="supplementary-material" rid="SD1">Appendix 1 Table 7</xref>). Additionally, work is under way to extend current support for SBML(<xref ref-type="bibr" rid="R50">Hucka et al., 2003</xref>) based descriptions of chemical signaling pathways (<xref ref-type="bibr" rid="R18">Cannon et al., 2014</xref>), to enable better biochemical descriptions of sub-cellular activity in neurons and synapses.</p><p id="P64">There is a growing interest in the field for the efficient generation and serialization of large scale network models, containing numbers of neurons closer to their biological equivalents (<xref ref-type="bibr" rid="R60">Markram et al., 2015</xref>; <xref ref-type="bibr" rid="R8">Billeh et al., 2020</xref>; <xref ref-type="bibr" rid="R28">Einevoll et al., 2019</xref>). While a multitude of applications in the NeuroML ecosystem support large scale model generation (e.g. NetPyNE, neuroConstruct, PyNN), the default serialization of NeuroML (XML) is inefficient for reading/writing/storing such extensive descriptions. NeuroML does have an internal format for serializing in the binary format HDF5 (see <xref ref-type="sec" rid="S21">Methods</xref>), but has also recently added support for export of models to the SONATA data format (<xref ref-type="bibr" rid="R21">Dai et al., 2020</xref>), allowing efficient serialization of large scale models. Even though individual instances of large scale models are useful, the ability to generate families of these for multiple simulation runs, and more particularly a way to encapsulate, examine and reuse templates for network models, is also required. A prototype package, NeuroMLlite<sup><xref ref-type="fn" rid="FN24">24</xref></sup>, has been developed which allows these concise network templates to be described and multiple instances of networks to be generated, and facilitates interaction with simulation platforms and efficient serialization formats.</p><p id="P65">As discoveries and insights in neuroscience inform machine learning and visa versa, there is an increasing need to develop a common framework for describing both biological and artificial neural networks. Model Description Format (MDF) has been developed to address this (<xref ref-type="bibr" rid="R39">Gleeson et al., 2023</xref>). This initiative has developed a standardized format, along with a Python API, which allows the specification of artificial neural networks (e.g. Convolutional Neural Networks, Recurrent Neural Networks) and biological neurons using the same underlying entities. Support for mapping MDF to/from NeuroMLv2/LEMS has been included from the start. This work will enable deeper integration of computational neuroscience and “brain-inspired” networks in Artificial Intelligence (AI).</p></sec><sec id="S20"><title>Conclusion and vision for the future</title><p id="P66">NeuroMLv2 is already a mature community standard that provides a framework for standardizing biologically detailed neuronal network models. By providing a stable, common framework defining the essential entities required for biologically detailed neuronal modeling, NeuroML has spawned an ecosystem of tools that span all stages of the model development life cycle. In the short term, we envision the functionality of NeuroML to expand further and for new online resources that encourage the construction of FAIR models using pyNeuroML to be taken up by the community. The NeuroML development team are also beginning to explore howto combine NeuroML-based circuit models with musculo-skeletal simulations to enable models of the neural control of behavior. In the longer term, developing seamless interfaces between NeuroML and other domain specific standards will enable the development of more holistic models of the neural control of body systems across a wide range of organisms, as well as greater exchange of models and insights between computational neuroscience and AI.</p></sec></sec><sec id="S21" sec-type="methods"><title>Methods</title><p id="P67">NeuroMLv2 is formally specified by the NeuroMLv2 XML schema, which defines the allowed structure of XML files which comply to the standard, and the LEMS ComponentType definitions, which define the internal state variables of the underlying elements, providing a machine-readable specification of the time evolution of model components. The specification is backed up by a suite of software tools that support the model life cycle, and the accompanying usage and development documentation.</p><p id="P68">We illustrate the key parts of this framework using the HindmarshRose cell model (<xref ref-type="bibr" rid="R47">Hindmarsh et al. (1984)</xref>, <xref ref-type="fig" rid="F10">Fig. 10</xref>), which, as an abstract point neuron model, serves as an appropriate simple NeuroMLv2 ComponentType.</p><sec id="S22"><title>The NeuroML XML Schema</title><p id="P69">We begin with the NeuroMLv2 standard. The standard consists of two parts, each serving different functions: <list list-type="order" id="L2"><list-item><p id="P70">the NeuroMLv2 XML schema</p></list-item><list-item><p id="P71">corresponding LEMS component type definitions</p></list-item></list></p><p id="P72">The NeuroMLv2 schema is a language independent data model that constrains the structure of a NeuroMLv2 <italic>model description</italic>. The NeuroML schema is formally described as an XML Schema document<sup><xref ref-type="fn" rid="FN25">25</xref></sup> in the XML Schema Definition (XSD) format, a recommendation of the World Wide Web Consortium (W3C)<sup><xref ref-type="fn" rid="FN26">26</xref></sup>. An XML document that claims to conform to a particular schema can be <italic>validated</italic> against the schema. All NeuroMLv2 model descriptions can therefore, be validated against the NeuroMLv2 schema.</p><p id="P73">The basic building blocks of an XSD schema are “simple” or “complex” types and their “attributes”. All types are created as “extensions” or “restrictions” of other types. Complex types may contain other types and attributes whereas simple types may not. <xref ref-type="fig" rid="F11">Fig. 11</xref> shows some example types defined in the NeuroMLv2 schema. For example, the Nml2Quantity_none simple type restricts the in-built “string” type using a regular expression “pattern” that limits what string values it can contain. The type is Nml2Quantity_none is to be used for unit-less quantities (e.g. 3, 6.7, -1.1e-5) and the restriction pattern for translates to “a string that may start with a hyphen (negative sign), followed by any number of numerical characters (potentially containing a decimal point) and a string containing capital or small ‘e’ (to specify the exponent)”. The restriction pattern for the Nml2Quantity_voltage type is similar, but must be followed by a “V” or “mV”. In this way, the restriction ensures that a value of type “Nml2Quantity_voltage” represents a physical voltage quantity with units “V” (volt) or “mV” (millivolt). Furthermore, a NeuroMLv2 model description that uses a voltage value that does not match this pattern, for example “0.5 s”, will be invalid.</p><p id="P74">The example of a complex type in <xref ref-type="fig" rid="F11">Fig. 11</xref> is the HindmarshRose1984Cell type that extends the BaseCellMembPotCap complex type (the base type for any cell producing a membrane potential v with a capacitance parameter C), and defines new “required” (compulsory) attributes. These attributes are of simple types—these are all unit-less quantities apart from v_scaling, which has dimension voltage. Note that inherited attributes are not re-listed in the complex type definition—the compulsory capacitance attribute, C, is inherited here from BaseCellMembPotCap.</p><p id="P75">The NeuroMLv2 schema serves multiple critical functions. A variety of tools and libraries support the validation of files against XSD schema definitions. Therefore, the NeuroMLv2 schema enables the validation of model descriptions—model structure, parameters, parameter values and their units, cardinality, element positioning in the model hierarchy (level 1 validation in <xref ref-type="fig" rid="F6">Fig. 6</xref>)—<italic>prior to simulation</italic>. XSD schema definitions, as language independent data models, also allow the generation of APIs in different languages. More information on how APIs in different languages are generated using the NeuroMLv2 XSD schema definition is provided in later sections.</p><p id="P76">The NeuroMLv2 XSD schema is also released and maintained as a versioned artifact, similar to the software packages. The current version is 2.3, and can be found in the NeuroML2 repository on GitHub<sup><xref ref-type="fn" rid="FN27">27</xref></sup>.</p></sec><sec id="S23"><title>LEMS ComponentType definitions</title><p id="P77">The second part of the NeuroMLv2 standard consists of the corresponding LEMS ComponentType definitions. Whereas the XSD Schema describes the <italic>structure</italic> of a NeuroMLv2 model description, the LEMS ComponentType definitions formally describe the <italic>dynamics</italic> of the model elements.</p><p id="P78">LEMS (<xref ref-type="bibr" rid="R18">Cannon et al., 2014</xref>) is a domain independent general purpose machine-readable language for describing models and their simulations. A complete description of LEMS is provided in <xref ref-type="bibr" rid="R18">Cannon et al. (2014)</xref> and in our documentation<sup><xref ref-type="fn" rid="FN28">28</xref></sup>. Here, we limit ourselves to a short summary necessary for understanding the NeuroMLv2 ComponentType definitions.</p><p id="P79">LEMS allows the definition of new model types called ComponentTypes. These are formal descriptions of how a generic model element of that type behaves (the “dynamics”), <italic>independent of the specific set of parameters in any instance</italic>. To describe the dynamics, such descriptions must list any necessary parameters that are required, as well as the time-varying state variables. The dimensions of these parameters and state variables must be specified, and any expressions involving them must be dimensionally consistent. An instance of such a generic model is termed a Component, and can be instantiated from a ComponentType by providing the necessary parameters. One can think of ComponentTypes as user defined data types similar to “classes” in many programming languages, and Components as “objects” of these types with particular sets of parameters. Types in LEMS can also extend other types, enabling the construction of a hierarchical library of types. In addition, since LEMS is designed for model simulation, ComponentType definitions also include other simulation related features such as Exposures, specifying quantities that may be accessed/recorded by users.</p><p id="P80">For model elements included in the NeuroML standard, there is a one-to-one mapping between types specified in the NeuroMLXSD schema, and LEMS ComponentTypes, with the same parameters specified in each. The addition of new model elements to the NeuroML standard, therefore, requires the addition of new type definitions to both the XSD schema and the LEMS definitions. New user defined ComponentTypes, nevertheless, can be defined in LEMS and used freely in models, and these do not need to be added to the standard before use. The only limitation here is that new user defined ComponentTypes cannot be validated against the NeuroML schema, since their type definitions will not be included there.</p><p id="P81"><xref ref-type="fig" rid="F12">Fig. 12</xref> shows the ComponentType definition for the HindmarshRose1984Cell model element. Here, the HindmarshRose1984Cell ComponentType extends baseCellMembPotCap and inherits its elements. The ComponentType includes parameters that users must provide when creating a new instance (component): <italic>a, b, c, d, r, s, x</italic>1, <italic>ν</italic>_<italic>scaling</italic>.</p><p id="P82">Other parameters, <italic>x</italic>0, <italic>y</italic>0, and <italic>z</italic>0 are used to initialize the three state variables of the model, <italic>x, y,z</italic>. <italic>x</italic> is the proxy for the membrane potential of the cell used in the original formulation of the model (<xref ref-type="bibr" rid="R47">Hindmarsh et al., 1984</xref>) and is here scaled by a factor <italic>ν</italic>_<italic>scaled</italic> to expose a more physiological value for the membrane potential of the cell in StateVariable <italic>ν</italic>. A Constant MSEC is defined to hold the value of 1 ms for use in the ComponentType. Next, an Attachment enables the addition of entities that would provide external inputs to the ComponentType. Here, synapses are Attachments of the type basePointCurrent and provide synaptic current input to this ComponentType.</p><p id="P83">The Dynamics block lists the mathematical formalism required to simulate the ComponentType. By default, variables defined in the Dynamics block are private, i.e., they are not visible outside the ComponentType. To make these visible to other ComponentTypes and to allow users to record them, they must be connected to Exposures. Exposures for this ComponentType include the three state variables, but also the internal derived variables, which while not used by other components, are useful in inspecting the ComponentType and its dynamics. An extra exposure, <italic>spiking</italic>, is added to allow other NeuroML components access to the spiking state of the cell that will be determined in the Dynamics block.</p><p id="P84">StateVariable definitions are followed by DerivedVariables, variables whose values depend on other variables but are not time derivatives (which are handled separately in TimeDerivative blocks (below)). The total synaptic current, <italic>iS yn</italic>, is a summation of all the synaptic currents, <italic>i</italic> received by the synapses that may be attached on to this ComponentType. The synapse[*]/i value of the select field tells LEMS to collect all the i exposures from any synapses Attachments, and the add value of the reduce field tells LEMS to sum the multiple values. As noted, <italic>x</italic> is a scaled version of the membrane potential variable, <italic>ν</italic>. This is followed by the three derived variables, <italic>phi</italic>, <italic>chi</italic>, <italic>rho</italic> where: <disp-formula id="FD1"><label>(1)</label><mml:math id="M1"><mml:mi>p</mml:mi><mml:mi>h</mml:mi><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mi>y</mml:mi><mml:mo>−</mml:mo><mml:mi>a</mml:mi><mml:msup><mml:mi>x</mml:mi><mml:mn>3</mml:mn></mml:msup><mml:mo>+</mml:mo><mml:mi>b</mml:mi><mml:msup><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msup></mml:math></disp-formula>
<disp-formula id="FD2"><label>(2)</label><mml:math id="M2"><mml:mi>c</mml:mi><mml:mi>h</mml:mi><mml:mi>i</mml:mi><mml:mo>=</mml:mo><mml:mi>c</mml:mi><mml:mo>−</mml:mo><mml:mi>d</mml:mi><mml:msup><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msup><mml:mo>−</mml:mo><mml:mi>y</mml:mi></mml:math></disp-formula>
<disp-formula id="FD3"><label>(3)</label><mml:math id="M3"><mml:mi>r</mml:mi><mml:mi>h</mml:mi><mml:mi>o</mml:mi><mml:mo>=</mml:mo><mml:mtext>s</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>x</mml:mi><mml:mo>−</mml:mo><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>−</mml:mo><mml:mi>z</mml:mi></mml:math></disp-formula></p><p id="P85">The total membrane potential of the cell, <italic>iM emb</italic> is calculated as the sum of the capacitive current and the synaptic current: <disp-formula id="FD4"><label>(4)</label><mml:math id="M4"><mml:mrow><mml:mi>i</mml:mi><mml:mi>M</mml:mi><mml:mi>e</mml:mi><mml:mi>m</mml:mi><mml:mi>b</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>C</mml:mi><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mrow><mml:msub><mml:mi>v</mml:mi><mml:mo>−</mml:mo></mml:msub><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>g</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>p</mml:mi><mml:mi>h</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo><mml:mi>z</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:mi>MSEC</mml:mi></mml:mrow></mml:mfrac><mml:mo>+</mml:mo><mml:mi>i</mml:mi><mml:mi>S</mml:mi><mml:mi>y</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:math></disp-formula></p><p id="P86"><italic>v, y, z</italic> are TimeDerivatives, with the “value” representing the rate of change of each variable: <disp-formula id="FD5"><label>(5)</label><mml:math id="M5"><mml:mi>d</mml:mi><mml:mi>v</mml:mi><mml:mo>/</mml:mo><mml:mi>d</mml:mi><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mi>i</mml:mi><mml:mi>M</mml:mi><mml:mi>e</mml:mi><mml:mi>m</mml:mi><mml:mi>b</mml:mi><mml:mo>/</mml:mo><mml:mi>C</mml:mi></mml:math></disp-formula>
<disp-formula id="FD6"><label>(6)</label><mml:math id="M6"><mml:mi>d</mml:mi><mml:mi>y</mml:mi><mml:mo>/</mml:mo><mml:mi>d</mml:mi><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mi>c</mml:mi><mml:mi>h</mml:mi><mml:mi>i</mml:mi><mml:mo>/</mml:mo><mml:mtext>MSEC</mml:mtext></mml:math></disp-formula>
<disp-formula id="FD7"><label>(7)</label><mml:math id="M7"><mml:mi>d</mml:mi><mml:mi>z</mml:mi><mml:mo>/</mml:mo><mml:mi>d</mml:mi><mml:mi>t</mml:mi><mml:mo>=</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>r</mml:mi><mml:mo>×</mml:mo><mml:mi>r</mml:mi><mml:mi>h</mml:mi><mml:mi>o</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>/</mml:mo><mml:mtext>MSEC</mml:mtext></mml:math></disp-formula></p><p id="P87">The final few blocks set the initial state of the component (OnStart), <disp-formula id="FD8"><label>(8)</label><mml:math id="M8"><mml:mi>v</mml:mi><mml:mo>=</mml:mo><mml:mi>x</mml:mi><mml:mn>0</mml:mn><mml:mo>×</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mo>−</mml:mo></mml:msub><mml:mi>s</mml:mi><mml:mi>c</mml:mi><mml:mi>a</mml:mi><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>g</mml:mi><mml:mspace width="0.2em"/></mml:math></disp-formula>
<disp-formula id="FD9"><label>(9)</label><mml:math id="M9"><mml:mi>y</mml:mi><mml:mo>=</mml:mo><mml:mi>y</mml:mi><mml:mn>0</mml:mn></mml:math></disp-formula>
<disp-formula id="FD10"><label>(10)</label><mml:math id="M10"><mml:mi>z</mml:mi><mml:mo>=</mml:mo><mml:mi>z</mml:mi><mml:mn>0</mml:mn></mml:math></disp-formula></p><p id="P88">and define conditional expressions to set the spiking state of the cell: <disp-formula id="FD11"><label>(11)</label><mml:math id="M11"><mml:mi>s</mml:mi><mml:mi>p</mml:mi><mml:mi>i</mml:mi><mml:mi>k</mml:mi><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>g</mml:mi><mml:mspace width="0.2em"/><mml:mo>=</mml:mo><mml:mrow><mml:mo>{</mml:mo><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mn>1</mml:mn></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mspace width="0.2em"/><mml:mtext>if</mml:mtext><mml:mspace width="0.2em"/><mml:mo stretchy="false">(</mml:mo><mml:mi>v</mml:mi><mml:mo>&gt;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo><mml:mo>∧</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:mi>s</mml:mi><mml:mi>p</mml:mi><mml:mi>i</mml:mi><mml:mi>k</mml:mi><mml:mi>i</mml:mi><mml:mi>n</mml:mi><mml:mi>g</mml:mi><mml:mspace width="0.2em"/><mml:mo>&lt;</mml:mo><mml:mn>0.5</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mn>0</mml:mn></mml:mtd><mml:mtd columnalign="left"><mml:mspace width="0.2em"/><mml:mrow><mml:mtext>if</mml:mtext><mml:mspace width="0.2em"/><mml:mo stretchy="false">(</mml:mo><mml:mi>v</mml:mi><mml:mo>&lt;</mml:mo><mml:mn>0</mml:mn><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mrow></mml:math></disp-formula></p><p id="P89">Both the XSD schema and the LEMS ComponentType definitions enable model validation. However, despite some overlap, they support different types of validation. Whereas the XSD schema allows for the validation of <italic>model descriptions</italic> (e.g. the XML files), the LEMS ComponentType definitions enable validation of <italic>model instances</italic>, i.e., the “runnable” instances of models that are constructed once components have been created by instantiating ComponentTypes with the necessary parameters, and various attachments created between source and target components. A model description may be used to create many different model instances for simulation. Indeed, it is common practice to run models that include stochasticity with different seeds for random number generators to verify the robustness of simulation results. Thus, the validation of dimensions and units that LEMS carries out is done only after a runnable instance of a model has been created.</p><p id="P90">The LEMS ComponentType definitions for NeuroMLv2 are also maintained as versioned files that are updated along with the XSD schema. These can also be seen in the NeuroMLv2 GitHub repository<sup><xref ref-type="fn" rid="FN29">29</xref></sup>. An index of the ComponentTypes included in version 2.3 of the NeuroML standard, with links to online documentation, is also provided in <xref ref-type="supplementary-material" rid="SD1">Appendix 1 Tables 5 and 6</xref>.</p></sec><sec id="S24"><title>NeuroML APIs</title><p id="P91">The NeuroMLv2 software stack relies on the NeuroML APIs that provide functionality to read, write, validate, and inspect NeuroML models. The APIs are programmatically generated from the machine readable XSD schema, thus ensuring that the class for defining a specific NeuroML element in a given language (e.g. Java) has the correct set of fields with the appropriate type (e.g. float or string) corresponding to the allowed parameters in the corresponding NeuroML element. NeuroMLv2 currently provides APIs in numerous languages—Python (libNeuroML which is generated via generateDS<sup><xref ref-type="fn" rid="FN30">30</xref></sup>), Java (org.neuroml.model via JAXB XJC<sup><xref ref-type="fn" rid="FN31">31</xref></sup>), C++ (NeuroML_CPP via XSD<sup><xref ref-type="fn" rid="FN32">32</xref></sup>) and MATLAB (NeuroMLToolbox which accesses the Java API from MATLAB), and APIs for other languages can also be easily generated as required. LEMS is also supported by a similar set of APIs—PyLEMS in Python, and jLEMS in Java—and since a NeuroMLv2 model description is a set of LEMS Components, the LEMS APIs also support them (e.g. the hindmarshRose1984Cell example in <xref ref-type="fig" rid="F10">Fig. 10</xref> could be loaded by jLEMS and treated as a LEMS Component).</p><p id="P92"><xref ref-type="fig" rid="F13">Fig. 13</xref> shows the use of the NeuroML Python API to describe a model with one HindmarshRose cell. In Python, the instances of ComponentTypes, their Components, are represented as Python objects. The hr0 Python variable stores the created HindmarshRose1984Cell component/object. This is added to a Population, pop0 in the Network net. The network also includes a PulseGenerator with amplitude 5 nA as an ExplicitInput that is targeted at the cell in the population. The model description is serialized to XML (<xref ref-type="fig" rid="F10">Fig. 10</xref>) and validated. Note that, as the standard convention for classes in Python is to use capitalized names, HindmarshRose1984Cell is used in Python, which is serialized as &lt;hindmarshRose1984Cell&gt; in the XML. Users can either share the Python script itself, or the XML serialization. Any valid XML serialization can be also loaded into a Python object model and modified.</p><p id="P93">XML is the default serialization of NeuroML, and all existing APIs can read and write the format (and it should be seen as a minimal requirement for new APIs to support XML). There is however an alternative HDF5<sup><xref ref-type="fn" rid="FN33">33</xref></sup> based serialization of NeuroML files which is supported by both libNeuroML and the Java API, org.neuroml.model<sup><xref ref-type="fn" rid="FN34">34</xref></sup>. This format is based on an efficient representation of cell positions and connectivity data as HDF5 data sets, which can be serialized in compact binary format, and loaded into memory foroptimized access (e.g. as numpy arrays in libNeuroML).This reduces the size of the saved files for large scale networks, and speeds up loading/writing models, eliminating the need to parse/generate large text files containing XML. Models serialized in this format can be loaded and transformed to simulator code in the same way as XML based models by the Java and Python APIs.</p></sec><sec id="S25"><title>Simulating NeuroML models</title><p id="P94">The model description shown in <xref ref-type="fig" rid="F10">Fig. 10</xref> contains no information about how it is to be simulated, or on the dynamics of each model component. Providing this simulation information and linking in the ComponentType definition requires creating a LEMS file to fully specify the simulation. <xref ref-type="fig" rid="F14">Fig. 14</xref> shows the use of utilities included in the Python pyNeuroML package to describe a LEMS simulation of the HindmarshRose model defined in <xref ref-type="fig" rid="F10">Fig. 10</xref>. The LEMSSimulation object includes simulation specific information, such as the duration of the simulation, the integration time step, and the seed value. It also allows the specification of files for the storage of data recorded from the simulation. In this example, we record the membrane potential, <italic>v</italic>, of our cell in its population, HRPop0[0]. Similar to the NeuroMLv2 model description, the simulation object can also be serialized to XML for storage and sharing (<xref ref-type="fig" rid="F14">Fig. 14</xref>, bottom).</p><p id="P95">As noted previously, NeuroML/LEMS model and simulation descriptions are machine readable and simulator independent and can be simulated by simulation engines using a multitude of strategies (<xref ref-type="fig" rid="F5">Fig. 5</xref>).</p><p id="P96">The first category of tools consists of the reference NeuroML and LEMS simulation engines. These work directly with NeuroML and LEMS as their base descriptions of modeling entities and do not have their own specific formats. They are maintained by the NeuroML Editorial Board—jLEMS, jNeuroML, and PyLEMS (<xref ref-type="fig" rid="F4">Fig. 4</xref>). jLEMS serves as the reference implementation for the LEMS language, and as such it can simulate any model described in LEMS (not necessarily from neuro-science). When coupled with the LEMS definitions of NeuroML standard entity structure/dynamics, it can simulate most NeuroML models, though it does not currently support multi-compartmental neurons. jNeuroML bundles the NeuroML standard LEMS definitions, jLEMS and other functionality into a single package for ease of installation/usage. There is also a pure Python implementation of a LEMS interpreter, PyLEMS, which can be used in a similar way to jLEMS. The pyNeuroML package encapsulates all of these tools to give easy access (at both command line and in Python) to all of their functionality (Box 1).</p><p id="P97">The second category consists of other simulators which support NeuroML natively. The EDEN simulator is an independently developed tool that was designed from its inception to read NeuroML and LEMS models for efficient, parallel simulation (<xref ref-type="bibr" rid="R72">Panagiotou et al., 2022</xref>).</p><p id="P98">The third category involves simulators which have their own internal formats, and include methods to translate NeuroMLv2/LEMS models to their own formats. Examples include NetPyNE (<xref ref-type="bibr" rid="R27">Dura-Bernal et al., 2019</xref>), MOOSE (<xref ref-type="bibr" rid="R80">Ray and Bhalla, 2008</xref>), and N2A (<xref ref-type="bibr" rid="R83">Rothganger et al., 2014</xref>).</p><p id="P99">The fourth category comprises tools for which the NeuroML tools generate simulator specific scripts. The simulation engines then execute these scripts, similar to how they would execute handwritten user scripts. These include NEURON (<xref ref-type="bibr" rid="R48">Hines and Carnevale, 1997</xref>) for which the NeuroML tools generate scripts in Python and the simulator’s hoc and NMODL formats and the Brian simulator (<xref ref-type="bibr" rid="R91">Stimberg et al., 2019</xref>) which uses Python scripts.</p><p id="P100">The final category consists of export options to standardized formats in neuroscience and the wider computational biology field, which enable interaction with simulators and applications supporting those formats. These include the PyNN package (<xref ref-type="bibr" rid="R22">Davison et al., 2009</xref>), which can be run in either NEURON, NEST (<xref ref-type="bibr" rid="R35">Gewaltig and Diesmann, 2007</xref>) or Brian, the SONATA data format (<xref ref-type="bibr" rid="R21">Dai et al., 2020</xref>) and the SBML standard (<xref ref-type="bibr" rid="R50">Hucka et al., 2003</xref>) (see Reusing NeuroML models for more details).</p><p id="P101">Having multiple strategies in place for supporting NeuroML gives more freedom to simulator developers to choose how much they wish to be involved with implementing and supporting NeuroML functionality in their applications, while maximizing the options available for end users.</p><p id="P102">The primary tool for simulating NeuroML/LEMS models via different engines is jNeuroML, which is included in pyNeuroML. jNeuroML supports all simulator engine categories (<xref ref-type="fig" rid="F5">Fig. 5</xref>). It includes jLEMS for simulation of LEMS and single compartmental NeuroML models. It can also pass simulations to the EDEN simulator (<xref ref-type="bibr" rid="R72">Panagiotou et al., 2022</xref>) for direct simulation. Using the org.neuroml.export library<sup><xref ref-type="fn" rid="FN35">35</xref></sup>, jNeuroML can also generate import scripts for simulators (e.g. NetPyNE (<xref ref-type="bibr" rid="R27">Dura-Bernal et al., 2019</xref>)) or convert NeuroML/LEMS models to simulator specific formats (e.g. NEURON (<xref ref-type="bibr" rid="R48">Hines and Carnevale, 1997</xref>)). Supporting a new simulation engine that requires translation of NeuroML/LEMS into another format can be done by adding a new “writer” to the org.neuroml.export library. Finally, jNeuroML also includes the org.neuroml.import<sup><xref ref-type="fn" rid="FN36">36</xref></sup> library that converts from other formats (e.g. SBML (<xref ref-type="bibr" rid="R50">Hucka et al., 2003</xref>)) to LEMS for combination with NeuroML models.</p><p id="P103">It is important to note though that not all NeuroML models can be exported to/are supported by each of these target simulators (Table 3). This depends on the capabilities of the simulator in question (whether it supports networks, or morphologically detailed cells) and pyNeuroML/jNeuroML will provide feedback if a feature of the model is not supported in a chosen environment.</p><p id="P104">All NeuroML and LEMS software packages are made available under FOSS licenses. The source code for all NeuroML packages and the standard can be obtained from the NeuroML GitHub organization<sup><xref ref-type="fn" rid="FN37">37</xref></sup>. The NeuroML Python API<sup><xref ref-type="fn" rid="FN38">38</xref></sup> was developed in collaboration with the NeuralEnsemble initiative<sup><xref ref-type="fn" rid="FN39">39</xref></sup>, which also maintains other commonly used Python packages such as PyNN <italic><bold>(<xref ref-type="bibr" rid="R22">Davison et al., 2009</xref>)</bold></italic>, Neo (<xref ref-type="bibr" rid="R33">Garcia et al., 2014</xref>) and Elephant (<xref ref-type="bibr" rid="R24">Denker et al., 2018</xref>). LEMS packages are available from the LEMS GitHub organization<sup><xref ref-type="fn" rid="FN40">40</xref></sup>.</p><p id="P105">To ensure replication and reproduction of studies, it is important to note the exact versions of software used in studies. For NeuroML and LEMS packages, archives of each release along with citations are published on Zenodo<sup><xref ref-type="fn" rid="FN41">41</xref></sup> to enable researchers to cite them in their work.</p></sec><sec id="S26"><title>Documentation</title><p id="P106">A standard and its accompanying software ecosystem must be supported by comprehensive documentation if it is to be of use to the research community. The primary NeuroML documentation for users that accompanies this paper has been consolidated into a JupyterBook (Executable Books Community, 2020) at <ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org">https://docs.neuroml.org</ext-link>. This includes explanations of NeuroML and computational modeling concepts, interactive tutorials with varying levels of complexity, information about tools and what functions they provide to support different stages of the model life cycle. The JupyterBook framework supports “executable” documentation through the inclusion of interactive Jupyter notebooks which may be run in the users’ web browser on free services such as OSBv2, Binder.org<sup><xref ref-type="fn" rid="FN42">42</xref></sup> (<xref ref-type="bibr" rid="R78">Project Jupyter et al., 2018</xref>) and Google Colab<sup><xref ref-type="fn" rid="FN43">43</xref></sup>. Finally, the machine readable nature of the schema and LEMS also enables the automated generation of human readable documentation for the standard and low level APIs (<xref ref-type="fig" rid="F15">Fig. 15</xref>) along with their examples<sup><xref ref-type="fn" rid="FN44">44</xref></sup>. In addition, the individual NeuroML software packages each have their own individual documentation (e.g. pyNeuroML<sup><xref ref-type="fn" rid="FN45">45</xref></sup>, libNeuroML<sup><xref ref-type="fn" rid="FN46">46</xref></sup>).</p><p id="P107">As with the rest of the NeuroML ecosystem, the documentation is hosted on GitHub<sup><xref ref-type="fn" rid="FN47">47</xref></sup>, licensed under a FOSS license, and community contributions to it are welcomed. A PDF version of the documentation can also be downloaded for offline use<sup><xref ref-type="fn" rid="FN48">48</xref></sup>.</p></sec><sec id="S27"><title>Maintenance of the Schema and core software</title><p id="P108">The NeuroML Scientific Committee <sup><xref ref-type="fn" rid="FN49">49</xref></sup> and the elected NeuroML Editorial Board<sup><xref ref-type="fn" rid="FN50">50</xref></sup> oversee the standard, the core tools, and the initiative. The Scientific Committee sets the scientific focus of the NeuroML initiative. It ensures that the standard represents the state of the art—that it can encapsulate the latest knowledge in neuronal anatomy and physiology in their corresponding model components. The Scientific Committee also defines the governance structure of the initiative, and works with the wider scientific community to gather feedback on NeuroML and promote its use. The Editorial Board manages the day to day development and maintenance of LEMS, the NeuroML schema, the core software tools, and critical resources such as the documentation. The Editorial Board works with simulator developers in the extended ecosystem to help make tools NeuroML compliant by testing reference implementations and answering technical queries about NeuroML and the core software tools.</p></sec></sec><sec sec-type="supplementary-material" id="SM"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="SD1"><label>Appendix</label><media xlink:href="EMS192732-supplement-Appendix.pdf" mimetype="application" mime-subtype="pdf" id="d5aAcEbB" position="anchor"/></supplementary-material></sec></body><back><ack id="S28"><title>Acknowledgments</title><p>We thank all the members of the NeuroML Community who have contributed to the development of the standard over the years, have added support for the language to their applications, or who have converted published models to NeuroML. We would particularly like to thank the following for contributions to the NeuroML Scientific Committee: Upi Bhalla, Avrama Blackwell, Hugo Cornells, Robert McDougal, Lyle Graham, Cengiz Gunay and Michael Hines. The following have also contributed to developments related to the named tools/simulators/resources: EDEN - Mario Negrello and Christos Strydis, SONATA - Anton Arkhipov and Kael Dai, MOOSE - Subhasis Ray, NeuroML- DB - Justas Birgiolas, NeuroMorpho.Org - Giorgio Ascoli, N2A - Fred Rothganger, pyLEMS - Gautham Ganapathy, MDF - Manifest Chakalov, libNeuroML and NeuroTune - Mike Vella, Open Source Brain - Matt Earnshaw, Adrian Quintana and Eugenio Piasini, SciUnit/NeuronUnit - Richard C Gerkin, Brian - Marcel Stimberg and Dominik Krzemiński, Arbor - Nora Abi Akar, Thorsten Hater and Brent Huisman, BluePyOpt - Jaquier Aurélien Tristan and Werner van Geit, C++/MATLAB APIs - Jonathan Cooper. We thank Rokas Stanislavos, András Ecker, Jessica Dafflon, Ronaldo Nunes, Anuja Negi and Shayan Shafquat for their work converting models to NeuroML format as part of the Google Summer of Code program. We also thank Diccon Coyle for feedback on the manuscript.</p><sec id="S29"><title>Funding</title><p id="P200">
<table-wrap id="T2" position="anchor" orientation="portrait"><table frame="hsides" rules="groups"><thead><tr><th align="left" valign="top">Funder</th><th align="left" valign="top">Grant reference number</th><th align="left" valign="top">Author</th></tr></thead><tbody><tr style="background-color:#CCCCCC"><td align="left" valign="top">Wellcome</td><td align="left" valign="top">101445, 212941</td><td align="left" valign="top">R. Angus Silver, Padraig Gleeson</td></tr><tr><td align="left" valign="top">Wellcome</td><td align="left" valign="top">203048, 224499</td><td align="left" valign="top">R. Angus Silver</td></tr><tr style="background-color:#CCCCCC"><td align="left" valign="top">Kavli Foundation</td><td align="left" valign="top">LS-2022-GR-40-2648</td><td align="left" valign="top">Padraig Gleeson</td></tr><tr><td align="left" valign="top">Engineering and Physical Research Council</td><td align="left" valign="top">EP/X011151/1</td><td align="left" valign="top">Padraig Gleeson</td></tr><tr style="background-color:#CCCCCC"><td align="left" valign="top">NIH</td><td align="left" valign="top">MH081905</td><td align="left" valign="top">Sharon Crook</td></tr><tr><td align="left" valign="top">NIH</td><td align="left" valign="top">EB014640</td><td align="left" valign="top">Sharon Crook</td></tr><tr style="background-color:#CCCCCC"><td align="left" valign="top">NIH</td><td align="left" valign="top">MH106674</td><td align="left" valign="top">Sharon Crook</td></tr><tr style="border-bottom: hidden"><td align="left" valign="top">EU Horizon Europe</td><td align="left" valign="top">SEPTON (Gr. Agr. No. 101094901)</td><td align="left" valign="top">Sotirios Panagiotou</td></tr></tbody></table></table-wrap>
                        </p></sec></ack><fn-group><fn id="FN1"><label>1</label><p id="P109"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org">https://docs.neuroml.org</ext-link></p></fn><fn id="FN2"><label>2</label><p id="P110">An index of all the model elements included in version 2.3 of NeuroML, with links to further online documentation, is provided in <xref ref-type="supplementary-material" rid="SD1">Appendix 1 Tables 5 and 6</xref>.</p></fn><fn id="FN3"><label>3</label><p id="P111"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/Userdocs/ImportingMorphologyFiles.html#neuroml2">https://docs.neuroml.org/Userdocs/ImportingMorphologyFiles.html#neuroml2</ext-link></p></fn><fn id="FN4"><label>4</label><p id="P112"><ext-link ext-link-type="uri" xlink:href="https://v2.opensourcebrain.org">https://v2.opensourcebrain.org</ext-link></p></fn><fn id="FN5"><label>5</label><p id="P113"><ext-link ext-link-type="uri" xlink:href="https://v1.opensourcebrain.org">https://v1.opensourcebrain.org</ext-link></p></fn><fn id="FN6"><label>6</label><p id="P114"><ext-link ext-link-type="uri" xlink:href="https://jupyter.org/">https://jupyter.org/</ext-link></p></fn><fn id="FN7"><label>7</label><p id="P115"><ext-link ext-link-type="uri" xlink:href="http://www.nsgportal.org/">http://www.nsgportal.org/</ext-link></p></fn><fn id="FN8"><label>8</label><p id="P116"><ext-link ext-link-type="uri" xlink:href="https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html">https://pyneuroml.readthedocs.io/en/development/pyneuroml.tune.html</ext-link></p></fn><fn id="FN9"><label>9</label><p id="P117"><ext-link ext-link-type="uri" xlink:href="https://github.com/NeuralEnsemble/neurotune">https://github.com/NeuralEnsemble/neurotune</ext-link></p></fn><fn id="FN10"><label>10</label><p id="P118"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/Userdocs/OptimisingNeuroMLModels.html">https://docs.neuroml.org/Userdocs/OptimisingNeuroMLModels.html</ext-link></p></fn><fn id="FN11"><label>11</label><p id="P119"><ext-link ext-link-type="uri" xlink:href="https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb">https://github.com/BlueBrain/BluePyOpt/blob/master/examples/neuroml/neuroml.ipynb</ext-link></p></fn><fn id="FN12"><label>12</label><p id="P120"><ext-link ext-link-type="uri" xlink:href="https://github.com/aarongarrett/inspyred">https://github.com/aarongarrett/inspyred</ext-link></p></fn><fn id="FN13"><label>13</label><p id="P121"><ext-link ext-link-type="uri" xlink:href="https://neuroml-db.org/">https://neuroml-db.org</ext-link></p></fn><fn id="FN14"><label>14</label><p id="P122"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/Userdocs/Provenance.html">https://docs.neuroml.org/Userdocs/Provenance.html</ext-link></p></fn><fn id="FN15"><label>15</label><p id="P123"><ext-link ext-link-type="uri" xlink:href="https://github.com/NeuroML/Cvapp-NeuroMorpho.org">https://github.com/NeuroML/Cvapp-NeuroMorpho.org</ext-link>.</p></fn><fn id="FN16"><label>16</label><p id="P124"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/Userdocs/Software/Tools/SWC.html">https://docs.neuroml.org/Userdocs/Software/Tools/SWC.html</ext-link>.</p></fn><fn id="FN17"><label>17</label><p id="P125"><ext-link ext-link-type="uri" xlink:href="https://biosimulators.org">https://biosimulators.org</ext-link></p></fn><fn id="FN18"><label>18</label><p id="P126"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html">https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html</ext-link></p></fn><fn id="FN19"><label>19</label><p id="P127"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/NeuroMLOrg/Board.html">https://docs.neuroml.org/NeuroMLOrg/Board.html</ext-link></p></fn><fn id="FN20"><label>20</label><p id="P128"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/NeuroMLOrg/OutreachTraining.html">https://docs.neuroml.org/NeuroMLOrg/OutreachTraining.html</ext-link></p></fn><fn id="FN21"><label>21</label><p id="P129"><ext-link ext-link-type="uri" xlink:href="https://lists.sourceforge.net/lists/listinfo/neuroml-technology">https://lists.sourceforge.net/lists/listinfo/neuroml-technology</ext-link></p></fn><fn id="FN22"><label>22</label><p id="P130">https://matrix.to/#/#NeuroML_community:gitter.im</p></fn><fn id="FN23"><label>23</label><p id="P131"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/NeuroMLOrg/CoC.html">https://docs.neuroml.org/NeuroMLOrg/CoC.html</ext-link></p></fn><fn id="FN24"><label>24</label><p id="P132"><ext-link ext-link-type="uri" xlink:href="https://github.com/NeuroML/NeuroMLlite">https://github.com/NeuroML/NeuroMLlite</ext-link></p></fn><fn id="FN25"><label>25</label><p id="P133"><ext-link ext-link-type="uri" xlink:href="https://neuroml.org/schema/neuroml2">https://neuroml.org/schema/neuroml2</ext-link></p></fn><fn id="FN26"><label>26</label><p id="P134"><ext-link ext-link-type="uri" xlink:href="https://www.w3.org/TR/xmlschema-1/">https://www.w3.org/TR/xmlschema-1/</ext-link></p></fn><fn id="FN27"><label>27</label><p id="P135"><ext-link ext-link-type="uri" xlink:href="https://github.com/NeuroML/NeuroML2/tree/master/Schemas/NeuroML2">https://github.com/NeuroML/NeuroML2/tree/master/Schemas/NeuroML2</ext-link></p></fn><fn id="FN28"><label>28</label><p id="P136"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/Userdocs/LEMSSchema.html">https://docs.neuroml.org/Userdocs/LEMSSchema.html</ext-link></p></fn><fn id="FN29"><label>29</label><p id="P137"><ext-link ext-link-type="uri" xlink:href="https://github.com/NeuroML/NeuroML2/tree/master/NeuroML2CoreTypes">https://github.com/NeuroML/NeuroML2/tree/master/NeuroML2CoreTypes</ext-link></p></fn><fn id="FN30"><label>30</label><p id="P138"><ext-link ext-link-type="uri" xlink:href="http://www.davekuhlman.org/generateDS.html">http://www.davekuhlman.org/generateDS.html</ext-link></p></fn><fn id="FN31"><label>31</label><p id="P139"><ext-link ext-link-type="uri" xlink:href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</ext-link></p></fn><fn id="FN32"><label>32</label><p id="P140"><ext-link ext-link-type="uri" xlink:href="https://www.codesynthesis.com/products/xsd/">https://www.codesynthesis.com/products/xsd/</ext-link></p></fn><fn id="FN33"><label>33</label><p id="P141"><ext-link ext-link-type="uri" xlink:href="https://www.hdfgroup.org/solutions/hdf5">https://www.hdfgroup.org/solutions/hdf5</ext-link></p></fn><fn id="FN34"><label>34</label><p id="P142"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/Userdocs/HDF5.html">https://docs.neuroml.org/Userdocs/HDF5.html</ext-link></p></fn><fn id="FN35"><label>35</label><p id="P143"><ext-link ext-link-type="uri" xlink:href="https://github.com/NeuroML/org.neuroml.export">https://github.com/NeuroML/org.neuroml.export</ext-link></p></fn><fn id="FN36"><label>36</label><p id="P144"><ext-link ext-link-type="uri" xlink:href="https://github.com/NeuroML/jNeuroML">https://github.com/NeuroML/jNeuroML</ext-link></p></fn><fn id="FN37"><label>37</label><p id="P145"><ext-link ext-link-type="uri" xlink:href="https://github.com/NeuroML">https://github.com/NeuroML</ext-link></p></fn><fn id="FN38"><label>38</label><p id="P146"><ext-link ext-link-type="uri" xlink:href="https://github.com/NeuralEnsemble/libNeuroML">https://github.com/NeuralEnsemble/libNeuroML</ext-link></p></fn><fn id="FN39"><label>39</label><p id="P147"><ext-link ext-link-type="uri" xlink:href="https://github.com/NeuralEnsemble/">https://github.com/NeuralEnsemble/</ext-link></p></fn><fn id="FN40"><label>40</label><p id="P148"><ext-link ext-link-type="uri" xlink:href="https://github.com/LEMS">https://github.com/LEMS</ext-link></p></fn><fn id="FN41"><label>41</label><p id="P149"><ext-link ext-link-type="uri" xlink:href="https://zenodo.org">https://zenodo.org</ext-link></p></fn><fn id="FN42"><label>42</label><p id="P150"><ext-link ext-link-type="uri" xlink:href="https://mybinder.org/">https://mybinder.org/</ext-link></p></fn><fn id="FN43"><label>43</label><p id="P151"><ext-link ext-link-type="uri" xlink:href="https://colab.research.google.com/">https://colab.research.google.com/</ext-link></p></fn><fn id="FN44"><label>44</label><p id="P152"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell">https://docs.neuroml.org/Userdocs/Schemas/Cells.html#hindmarshrose1984cell</ext-link></p></fn><fn id="FN45"><label>45</label><p id="P153"><ext-link ext-link-type="uri" xlink:href="https://pyneuroml.readthedocs.io/en/stable/">https://pyneuroml.readthedocs.io/en/stable/</ext-link></p></fn><fn id="FN46"><label>46</label><p id="P154"><ext-link ext-link-type="uri" xlink:href="https://libneuroml.readthedocs.io/en/stable/">https://libneuroml.readthedocs.io/en/stable/</ext-link></p></fn><fn id="FN47"><label>47</label><p id="P155"><ext-link ext-link-type="uri" xlink:href="https://github.com/NeuroML/Documentation">https://github.com/NeuroML/Documentation</ext-link></p></fn><fn id="FN48"><label>48</label><p id="P156"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/_static/files/neuroml-documentation.pdf">https://docs.neuroml.org/_static/files/neuroml-documentation.pdf</ext-link></p></fn><fn id="FN49"><label>49</label><p id="P157"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html">https://docs.neuroml.org/NeuroMLOrg/ScientificCommittee.html</ext-link></p></fn><fn id="FN50"><label>50</label><p id="P158"><ext-link ext-link-type="uri" xlink:href="https://docs.neuroml.org/NeuroMLOrg/Board.html">https://docs.neuroml.org/NeuroMLOrg/Board.html</ext-link></p></fn></fn-group><ref-list><ref id="R1"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Abi Akar</surname><given-names>N</given-names></name><name><surname>Cumming</surname><given-names>B</given-names></name><name><surname>Karakasis</surname><given-names>V</given-names></name><name><surname>Küsters</surname><given-names>A</given-names></name><name><surname>Klijn</surname><given-names>W</given-names></name><name><surname>Peyser</surname><given-names>A</given-names></name><name><surname>Yates</surname><given-names>S</given-names></name></person-group><source>Arbor — A Morphologically-Detailed Neural Network Simulation Library for Contemporary High-Performance Computing Architectures</source><conf-name>2019 27th Euromicro International Conference on Parallel, Distributed and Network-Based Processing (PDP)</conf-name><year>2019</year><fpage>274</fpage><lpage>282</lpage><pub-id pub-id-type="doi">10.1109/EMPDP.2019.8671560</pub-id></element-citation></ref><ref id="R2"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Abrams</surname><given-names>MB</given-names></name><name><surname>Bjaalie</surname><given-names>JG</given-names></name><name><surname>Das</surname><given-names>S</given-names></name><name><surname>Egan</surname><given-names>GF</given-names></name><name><surname>Ghosh</surname><given-names>SS</given-names></name><name><surname>Goscinski</surname><given-names>WJ</given-names></name><name><surname>Grethe</surname><given-names>JS</given-names></name><name><surname>Kotaleski</surname><given-names>JH</given-names></name><name><surname>Ho</surname><given-names>ETW</given-names></name><name><surname>Kennedy</surname><given-names>DN</given-names></name><name><surname>Lanyon</surname><given-names>LJ</given-names></name><etal/></person-group><article-title>A Standards Organization for Open and FAIR Neuroscience: the International Neuroinformatics Coordinating Facility</article-title><source>Neuroinformatics</source><year>2022</year><volume>20</volume><issue>1</issue><fpage>25</fpage><lpage>36</lpage><pub-id pub-id-type="pmcid">PMC9036053</pub-id><pub-id pub-id-type="pmid">33506383</pub-id><pub-id pub-id-type="doi">10.1007/s12021-020-09509-0</pub-id></element-citation></ref><ref id="R3"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ascoli</surname><given-names>GA</given-names></name><name><surname>Donohue</surname><given-names>DE</given-names></name><name><surname>Halavi</surname><given-names>M</given-names></name></person-group><article-title>NeuroMorpho.org: a central resource for neuronal morphologies</article-title><source>Journal of Neuroscience</source><year>2007</year><volume>27</volume><issue>35</issue><fpage>9247</fpage><lpage>9251</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://www.jneurosci.org/content/27/35/9247">https://www.jneurosci.org/content/27/35/9247</ext-link></comment><pub-id pub-id-type="pmcid">PMC6673130</pub-id><pub-id pub-id-type="pmid">17728438</pub-id><pub-id pub-id-type="doi">10.1523/JNEUROSCI.2055-07.2007</pub-id></element-citation></ref><ref id="R4"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Awile</surname><given-names>O</given-names></name><name><surname>Kumbhar</surname><given-names>P</given-names></name><name><surname>Cornu</surname><given-names>N</given-names></name><name><surname>Dura-Bernal</surname><given-names>S</given-names></name><name><surname>King</surname><given-names>JG</given-names></name><name><surname>Lupton</surname><given-names>O</given-names></name><name><surname>Magkanaris</surname><given-names>I</given-names></name><name><surname>McDougal</surname><given-names>RA</given-names></name><name><surname>Newton</surname><given-names>AJH</given-names></name><name><surname>Pereira</surname><given-names>F</given-names></name><name><surname>Săvulescu</surname><given-names>A</given-names></name><etal/></person-group><article-title>Modernizing the NEURON Simulator for Sustainability, Portability, and Performance</article-title><source>Frontiers in Neuroinformatics</source><year>2022</year><volume>16</volume><pub-id pub-id-type="pmcid">PMC9272742</pub-id><pub-id pub-id-type="pmid">35832575</pub-id><pub-id pub-id-type="doi">10.3389/fninf.2022.884046</pub-id></element-citation></ref><ref id="R5"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bahl</surname><given-names>A</given-names></name><name><surname>Stemmler</surname><given-names>MB</given-names></name><name><surname>Herz</surname><given-names>AVM</given-names></name><name><surname>Roth</surname><given-names>A</given-names></name></person-group><article-title>Automated optimization of a reduced layer 5 pyramidal cell model based on experimental data</article-title><source>Journal of Neuroscience Methods</source><year>2012</year><volume>210</volume><issue>1</issue><fpage>22</fpage><lpage>34</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S016502701200129X">https://www.sciencedirect.com/science/article/pii/S016502701200129X</ext-link>special Issue on Computational Neuroscience</comment><pub-id pub-id-type="pmid">22524993</pub-id></element-citation></ref><ref id="R6"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bergmann</surname><given-names>FT</given-names></name><name><surname>Adams</surname><given-names>R</given-names></name><name><surname>Moodie</surname><given-names>S</given-names></name><name><surname>Cooper</surname><given-names>J</given-names></name><name><surname>Glont</surname><given-names>M</given-names></name><name><surname>Golebiewski</surname><given-names>M</given-names></name><name><surname>Hucka</surname><given-names>M</given-names></name><name><surname>Laibe</surname><given-names>C</given-names></name><name><surname>Miller</surname><given-names>AK</given-names></name><name><surname>Nickerson</surname><given-names>DP</given-names></name><name><surname>Olivier</surname><given-names>BG</given-names></name><etal/></person-group><article-title>COMBINE archive and OMEX format: one file to share all information to reproduce a modeling project</article-title><source>BMC Bioinformatics</source><year>2014</year><volume>15</volume><issue>1</issue><fpage>369</fpage><pub-id pub-id-type="pmcid">PMC4272562</pub-id><pub-id pub-id-type="pmid">25494900</pub-id><pub-id pub-id-type="doi">10.1186/s12859-014-0369-z</pub-id></element-citation></ref><ref id="R7"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bezaire</surname><given-names>MJ</given-names></name><name><surname>Raikov</surname><given-names>I</given-names></name><name><surname>Burk</surname><given-names>K</given-names></name><name><surname>Vyas</surname><given-names>D</given-names></name><name><surname>Soltesz</surname><given-names>I</given-names></name></person-group><article-title>Interneuronal mechanisms of hippocampal theta oscillation in a full-scale model of the rodent CAl circuit</article-title><source>eLife</source><year>2016</year><month>dec</month><volume>5</volume><elocation-id>e18566</elocation-id><pub-id pub-id-type="pmcid">PMC5313080</pub-id><pub-id pub-id-type="pmid">28009257</pub-id><pub-id pub-id-type="doi">10.7554/eLife.18566</pub-id></element-citation></ref><ref id="R8"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Billeh</surname><given-names>YN</given-names></name><name><surname>Cai</surname><given-names>B</given-names></name><name><surname>Gratiy</surname><given-names>SL</given-names></name><name><surname>Dai</surname><given-names>K</given-names></name><name><surname>Iyer</surname><given-names>R</given-names></name><name><surname>Gouwens</surname><given-names>NW</given-names></name><name><surname>Abbasi-Asl</surname><given-names>R</given-names></name><name><surname>Jia</surname><given-names>X</given-names></name><name><surname>Siegle</surname><given-names>JH</given-names></name><name><surname>Olsen</surname><given-names>SR</given-names></name><name><surname>Koch</surname><given-names>C</given-names></name><etal/></person-group><article-title>Systematic Integration of Structural and Functional Data into Multi-scale Models of Mouse Primary Visual Cortex</article-title><source>Neuron</source><year>2020</year><volume>106</volume><issue>3</issue><fpage>388</fpage><lpage>403</lpage><elocation-id>e18</elocation-id><comment><ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S0896627320300672">https://www.sciencedirect.com/science/article/pii/S0896627320300672</ext-link></comment><pub-id pub-id-type="pmid">32142648</pub-id></element-citation></ref><ref id="R9"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Billings</surname><given-names>G</given-names></name><name><surname>Piasini</surname><given-names>E</given-names></name><name><surname>Lőrincz</surname><given-names>A</given-names></name><name><surname>Nusser</surname><given-names>Z</given-names></name><name><surname>Silver</surname><given-names>RA</given-names></name></person-group><article-title>Network Structure within the Cerebellar Input Layer Enables Lossless Sparse Encoding</article-title><source>Neuron</source><year>2014</year><volume>83</volume><issue>4</issue><fpage>960</fpage><lpage>974</lpage><pub-id pub-id-type="pmcid">PMC4148198</pub-id><pub-id pub-id-type="pmid">25123311</pub-id><pub-id pub-id-type="doi">10.1016/j.neuron.2014.07.020</pub-id></element-citation></ref><ref id="R10"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Birgiolas</surname><given-names>J</given-names></name><name><surname>Dietrich</surname><given-names>SW</given-names></name><name><surname>Crook</surname><given-names>S</given-names></name><name><surname>Rajadesingan</surname><given-names>A</given-names></name><name><surname>Zhang</surname><given-names>C</given-names></name><name><surname>Penchala</surname><given-names>SV</given-names></name><name><surname>Addepalli</surname><given-names>V</given-names></name></person-group><source>Ontology-Assisted Keyword Search for NeuroML Models</source><conf-name>Proceedings of the 27th International Conference on Scientific and Statistical Database Management SSDBM ‘15</conf-name><conf-loc>New York, NY, USA</conf-loc><conf-sponsor>Association for Computing Machinery</conf-sponsor><year>2015</year><pub-id pub-id-type="doi">10.1145/2791347.2791360</pub-id></element-citation></ref><ref id="R11"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Birgiolas</surname><given-names>J</given-names></name><name><surname>Haynes</surname><given-names>V</given-names></name><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Gerkin</surname><given-names>RC</given-names></name><name><surname>Dietrich</surname><given-names>SW</given-names></name><name><surname>Crook</surname><given-names>S</given-names></name></person-group><article-title>NeuroML-DB: Sharing and characterizing data-driven neuroscience models described in NeuroML</article-title><source>PLOS Computational Biology</source><year>2023</year><month>03</month><volume>19</volume><issue>3</issue><fpage>1</fpage><lpage>29</lpage><pub-id pub-id-type="pmcid">PMC10016719</pub-id><pub-id pub-id-type="pmid">36867658</pub-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1010941</pub-id></element-citation></ref><ref id="R12"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Blundell</surname><given-names>I</given-names></name><name><surname>Brette</surname><given-names>R</given-names></name><name><surname>Cleland</surname><given-names>TA</given-names></name><name><surname>Close</surname><given-names>TG</given-names></name><name><surname>Coca</surname><given-names>D</given-names></name><name><surname>Davison</surname><given-names>AP</given-names></name><name><surname>Diaz-Pier</surname><given-names>S</given-names></name><name><surname>Fernandez Musoles</surname><given-names>C</given-names></name><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Goodman</surname><given-names>DFM</given-names></name><name><surname>Hines</surname><given-names>M</given-names></name><etal/></person-group><article-title>Code Generation in Computational Neuroscience: A Review of Tools and Techniques</article-title><source>Front Neuroinform</source><year>2018</year><month>Nov</month><volume>12</volume><fpage>68</fpage><pub-id pub-id-type="pmcid">PMC6230720</pub-id><pub-id pub-id-type="pmid">30455637</pub-id><pub-id pub-id-type="doi">10.3389/fninf.2018.00068</pub-id></element-citation></ref><ref id="R13"><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Bower</surname><given-names>JM</given-names></name><name><surname>Beeman</surname><given-names>D</given-names></name></person-group><source>The Book of GENESIS: Exploring Realistic Neural Models with the GEneral NEural Simulation System</source><publisher-name>Springer</publisher-name><publisher-loc>New York</publisher-loc><year>1997</year></element-citation></ref><ref id="R14"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Boyle</surname><given-names>JH</given-names></name><name><surname>Cohen</surname><given-names>N</given-names></name></person-group><article-title>Caenorhabditis elegans body wall muscles are simple actuators</article-title><source>Biosystems</source><year>2008</year><volume>94</volume><issue>1-2</issue><fpage>170</fpage><lpage>181</lpage><comment><ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/pii/S0303264708001408">http://www.sciencedirect.com/science/article/pii/S0303264708001408</ext-link> seventh International Workshop on Information Processing in Cells and TissuesIPCAT 2007</comment><pub-id pub-id-type="pmid">18619514</pub-id></element-citation></ref><ref id="R15"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Brunel</surname><given-names>N</given-names></name></person-group><article-title>Dynamics of sparsely connected networks of excitatory and inhibitory spiking neurons</article-title><source>Journal of computational neuroscience</source><year>2000</year><volume>8</volume><issue>3</issue><fpage>183</fpage><lpage>208</lpage><pub-id pub-id-type="pmid">10809012</pub-id></element-citation></ref><ref id="R16"><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Campagnola</surname><given-names>L</given-names></name><name><surname>Larson</surname><given-names>E</given-names></name><name><surname>Klein</surname><given-names>A</given-names></name><name><surname>Hoese</surname><given-names>D</given-names></name><name><surname>Siddharth</surname></name><name><surname>Rossant</surname><given-names>C</given-names></name><name><surname>Griffiths</surname><given-names>A</given-names></name><name><surname>Rougier</surname><given-names>NP</given-names></name><collab>asnt</collab><name><surname>Gaifas</surname><given-names>L</given-names></name><name><surname>Mühlbauer</surname><given-names>K</given-names></name><etal/></person-group><source>vispy/vispy: Version 0.13.0</source><publisher-name>Zenodo</publisher-name><year>2023</year><pub-id pub-id-type="doi">10.5281/zenodo.7945364</pub-id></element-citation></ref><ref id="R17"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cannon</surname><given-names>RC</given-names></name><name><surname>Gewaltig</surname><given-names>MO</given-names></name><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Bhalla</surname><given-names>US</given-names></name><name><surname>Cornelis</surname><given-names>H</given-names></name><name><surname>Hines</surname><given-names>ML</given-names></name><name><surname>Howell</surname><given-names>FW</given-names></name><name><surname>Muller</surname><given-names>E</given-names></name><name><surname>Stiles</surname><given-names>JR</given-names></name><name><surname>Wils</surname><given-names>S</given-names></name><name><surname>De Schutter</surname><given-names>E</given-names></name></person-group><article-title>Interoperability of Neuroscience Modeling Software: Current Status and Future Directions</article-title><source>Neuroinformatics</source><year>2007</year><volume>5</volume><issue>2</issue><fpage>127</fpage><lpage>138</lpage><pub-id pub-id-type="pmcid">PMC2658651</pub-id><pub-id pub-id-type="pmid">17873374</pub-id><pub-id pub-id-type="doi">10.1007/s12021-007-0004-5</pub-id></element-citation></ref><ref id="R18"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cannon</surname><given-names>RC</given-names></name><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Crook</surname><given-names>S</given-names></name><name><surname>Ganapathy</surname><given-names>G</given-names></name><name><surname>Marin</surname><given-names>B</given-names></name><name><surname>Piasini</surname><given-names>E</given-names></name><name><surname>Silver</surname><given-names>RA</given-names></name></person-group><article-title>LEMS: a language for expressing complex biological models in concise and hierarchical form and its use in underpinning NeuroML 2</article-title><source>Frontiers in Neuroinformatics</source><year>2014</year><volume>8</volume><pub-id pub-id-type="pmcid">PMC4174883</pub-id><pub-id pub-id-type="pmid">25309419</pub-id><pub-id pub-id-type="doi">10.3389/fninf.2014.00079</pub-id></element-citation></ref><ref id="R19"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cayco-Gajic</surname><given-names>NA</given-names></name><name><surname>Clopath</surname><given-names>C</given-names></name><name><surname>Silver</surname><given-names>RA</given-names></name></person-group><article-title>Sparse synaptic connectivity is required for decorrelation and pattern separation in feedforward networks</article-title><source>Nat Commun</source><year>2017</year><month>Oct</month><volume>8</volume><issue>1</issue><elocation-id>1116</elocation-id><pub-id pub-id-type="pmcid">PMC5653655</pub-id><pub-id pub-id-type="pmid">29061964</pub-id><pub-id pub-id-type="doi">10.1038/s41467-017-01109-y</pub-id></element-citation></ref><ref id="R20"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Choi</surname><given-names>K</given-names></name><name><surname>Medley</surname><given-names>JK</given-names></name><name><surname>König</surname><given-names>M</given-names></name><name><surname>Stocking</surname><given-names>K</given-names></name><name><surname>Smith</surname><given-names>L</given-names></name><name><surname>Gu</surname><given-names>S</given-names></name><name><surname>Sauro</surname><given-names>HM</given-names></name></person-group><article-title>Tellurium: An extensible python-based modeling environment for systems and synthetic biology</article-title><source>Biosystems</source><year>2018</year><volume>171</volume><fpage>74</fpage><lpage>79</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S0303264718301254">https://www.sciencedirect.com/science/article/pii/S0303264718301254</ext-link></comment><pub-id pub-id-type="pmcid">PMC6108935</pub-id><pub-id pub-id-type="pmid">30053414</pub-id><pub-id pub-id-type="doi">10.1016/j.biosystems.2018.07.006</pub-id></element-citation></ref><ref id="R21"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dai</surname><given-names>K</given-names></name><name><surname>Hernando</surname><given-names>J</given-names></name><name><surname>Billeh</surname><given-names>YN</given-names></name><name><surname>Gratiy</surname><given-names>SL</given-names></name><name><surname>Planas</surname><given-names>J</given-names></name><name><surname>Davison</surname><given-names>AP</given-names></name><name><surname>Dura-Bernal</surname><given-names>S</given-names></name><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Devresse</surname><given-names>A</given-names></name><name><surname>Dichter</surname><given-names>BK</given-names></name><name><surname>Gevaert</surname><given-names>M</given-names></name><etal/></person-group><article-title>The SONATA data format for efficient description of large-scale network models</article-title><source>PLOS Computational Biology</source><year>2020</year><month>02</month><volume>16</volume><issue>2</issue><fpage>1</fpage><lpage>24</lpage><pub-id pub-id-type="pmcid">PMC7058350</pub-id><pub-id pub-id-type="pmid">32092054</pub-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1007696</pub-id></element-citation></ref><ref id="R22"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Davison</surname><given-names>AP</given-names></name><name><surname>Brüderle</surname><given-names>D</given-names></name><name><surname>Eppler</surname><given-names>J</given-names></name><name><surname>Kremkow</surname><given-names>J</given-names></name><name><surname>Muller</surname><given-names>E</given-names></name><name><surname>Pecevski</surname><given-names>D</given-names></name><name><surname>Perrinet</surname><given-names>L</given-names></name><name><surname>Yger</surname><given-names>P</given-names></name></person-group><article-title>PyNN: A Common Interface for Neuronal Network Simulators</article-title><source>Front Neuroinform</source><year>2009</year><volume>2</volume><fpage>11</fpage><pub-id pub-id-type="pmcid">PMC2634533</pub-id><pub-id pub-id-type="pmid">19194529</pub-id><pub-id pub-id-type="doi">10.3389/neuro.11.011.2008</pub-id></element-citation></ref><ref id="R23"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>De Schutter</surname><given-names>E</given-names></name><name><surname>Bower</surname><given-names>JM</given-names></name></person-group><article-title>An active membrane model of the cerebellar Purkinje cell</article-title><source>I. Simulation of current clamps in slice. Journal of Neurophysiology</source><year>1994</year><volume>71</volume><issue>1</issue><fpage>375</fpage><lpage>400</lpage><pub-id pub-id-type="pmid">7512629</pub-id></element-citation></ref><ref id="R24"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Denker</surname><given-names>M</given-names></name><name><surname>Yegenoglu</surname><given-names>A</given-names></name><name><surname>Grün</surname><given-names>S</given-names></name></person-group><source>Collaborative HPC-enabled workflows on the HBP Collaboratory using the Elephantframework</source><conf-name>Neuroinformatics2018</conf-name><year>2018</year><fpage>P19</fpage><comment><ext-link ext-link-type="uri" xlink:href="https://abstracts.g-node.org/conference/NI2018/abstracts#/uuid/023bec4e-0c35-4563-81ce-2c6fac282abd">https://abstracts.g-node.org/conference/NI2018/abstracts#/uuid/023bec4e-0c35-4563-81ce-2c6fac282abd</ext-link></comment><pub-id pub-id-type="doi">10.12751/incf.ni2018.0019</pub-id></element-citation></ref><ref id="R25"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Druckmann</surname><given-names>S</given-names></name><name><surname>Banitt</surname><given-names>Y</given-names></name><name><surname>Gidon</surname><given-names>A</given-names></name><name><surname>Schürmann</surname><given-names>F</given-names></name><name><surname>Markram</surname><given-names>H</given-names></name><name><surname>Segev</surname><given-names>I</given-names></name></person-group><article-title>A novel multiple objective optimization framework for constraining conductance-based neuron models by experimental data</article-title><source>Frontiers in Neuroscience</source><year>2007</year><volume>1</volume><pub-id pub-id-type="pmcid">PMC2570085</pub-id><pub-id pub-id-type="pmid">18982116</pub-id><pub-id pub-id-type="doi">10.3389/neuro.01.1.1.001.2007</pub-id></element-citation></ref><ref id="R26"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dura-Bernal</surname><given-names>S</given-names></name><name><surname>Neymotin</surname><given-names>SA</given-names></name><name><surname>Kerr</surname><given-names>CC</given-names></name><name><surname>Sivagnanam</surname><given-names>S</given-names></name><name><surname>Majumdar</surname><given-names>A</given-names></name><name><surname>Francis</surname><given-names>JT</given-names></name><name><surname>Lytton</surname><given-names>WW</given-names></name></person-group><article-title>Evolutionary algorithm optimization of biological learning parameters in a biomimetic neuroprosthesis</article-title><source>IBM J Res Dev</source><year>2017</year><month>Mar</month><volume>61</volume><issue>2-3</issue><elocation-id>6.1–6.14</elocation-id><pub-id pub-id-type="pmcid">PMC5708558</pub-id><pub-id pub-id-type="pmid">29200477</pub-id><pub-id pub-id-type="doi">10.1147/JRD.2017.2656758</pub-id></element-citation></ref><ref id="R27"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dura-Bernal</surname><given-names>S</given-names></name><name><surname>Suter</surname><given-names>BA</given-names></name><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Cantarelli</surname><given-names>M</given-names></name><name><surname>Quintana</surname><given-names>A</given-names></name><name><surname>Rodriguez</surname><given-names>F</given-names></name><name><surname>Kedziora</surname><given-names>DJ</given-names></name><name><surname>Chadderdon</surname><given-names>GL</given-names></name><name><surname>Kerr</surname><given-names>CC</given-names></name><name><surname>Neymotin</surname><given-names>SA</given-names></name><etal/></person-group><article-title>NetPyNE, a tool for data-driven multiscale modeling of brain circuits</article-title><source>Elife</source><year>2019</year><volume>8</volume><elocation-id>e44494</elocation-id><pub-id pub-id-type="pmcid">PMC6534378</pub-id><pub-id pub-id-type="pmid">31025934</pub-id><pub-id pub-id-type="doi">10.7554/eLife.44494</pub-id></element-citation></ref><ref id="R28"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Einevoll</surname><given-names>GT</given-names></name><name><surname>Destexhe</surname><given-names>A</given-names></name><name><surname>Diesmann</surname><given-names>M</given-names></name><name><surname>Grün</surname><given-names>S</given-names></name><name><surname>Jirsa</surname><given-names>V</given-names></name><name><surname>de Kamps</surname><given-names>M</given-names></name><name><surname>Migliore</surname><given-names>M</given-names></name><name><surname>Ness</surname><given-names>TV</given-names></name><name><surname>Plesser</surname><given-names>HE</given-names></name><name><surname>Schürmann</surname><given-names>F</given-names></name></person-group><article-title>The scientific case for brain simulations</article-title><source>Neuron</source><year>2019</year><volume>102</volume><issue>4</issue><fpage>735</fpage><lpage>744</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S0896627319302909">https://www.sciencedirect.com/science/article/pii/S0896627319302909</ext-link></comment><pub-id pub-id-type="pmid">31121126</pub-id></element-citation></ref><ref id="R29"><element-citation publication-type="book"><source>Executable Books Community, Jupyter Book</source><publisher-name>Zenodo</publisher-name><year>2020</year><pub-id pub-id-type="doi">10.5281/zenodo.4539666</pub-id></element-citation></ref><ref id="R30"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ferguson</surname><given-names>K</given-names></name><name><surname>Huh</surname><given-names>C</given-names></name><name><surname>Amilhon</surname><given-names>B</given-names></name><name><surname>Williams</surname><given-names>S</given-names></name><name><surname>Skinner</surname><given-names>F</given-names></name></person-group><article-title>Simple, biologically-constrained CA1 pyramidal cell models using an intact, whole hippocampus context</article-title><source>F1000Research</source><year>2014</year><volume>3</volume><issue>104</issue><pub-id pub-id-type="pmcid">PMC4215760</pub-id><pub-id pub-id-type="pmid">25383182</pub-id><pub-id pub-id-type="doi">10.12688/f1000research.3894.1</pub-id></element-citation></ref><ref id="R31"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ferguson</surname><given-names>KA</given-names></name><name><surname>Huh</surname><given-names>CY</given-names></name><name><surname>Amilhon</surname><given-names>B</given-names></name><name><surname>Williams</surname><given-names>S</given-names></name><name><surname>Skinner</surname><given-names>FK</given-names></name></person-group><article-title>Experimentally constrained CA1 fast-firing parvalbumin-positive interneuron network models exhibit sharp transitions into coherent high frequency rhythms</article-title><source>Frontiers in Computational Neuroscience</source><year>2013</year><volume>7</volume><issue>144</issue><pub-id pub-id-type="pmcid">PMC3804767</pub-id><pub-id pub-id-type="pmid">24155715</pub-id><pub-id pub-id-type="doi">10.3389/fncom.2013.00144</pub-id></element-citation></ref><ref id="R32"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>FitzHugh</surname><given-names>R</given-names></name></person-group><article-title>Impulses and Physiological States in Theoretical Models of Nerve Membrane</article-title><source>Biophysical Journal</source><year>1961</year><volume>1</volume><issue>6</issue><fpage>445</fpage><lpage>466</lpage><pub-id pub-id-type="pmcid">PMC1366333</pub-id><pub-id pub-id-type="pmid">19431309</pub-id><pub-id pub-id-type="doi">10.1016/s0006-3495(61)86902-6</pub-id></element-citation></ref><ref id="R33"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Garcia</surname><given-names>S</given-names></name><name><surname>Guarino</surname><given-names>D</given-names></name><name><surname>Jaillet</surname><given-names>F</given-names></name><name><surname>Jennings</surname><given-names>TR</given-names></name><name><surname>Pröpper</surname><given-names>R</given-names></name><name><surname>Rautenberg</surname><given-names>PL</given-names></name><name><surname>Rodgers</surname><given-names>C</given-names></name><name><surname>Sobolev</surname><given-names>A</given-names></name><name><surname>Wachtler</surname><given-names>T</given-names></name><name><surname>Yger</surname><given-names>P</given-names></name><name><surname>Davison</surname><given-names>AP</given-names></name></person-group><article-title>Neo: an object model for handling electrophysiology data in multiple formats</article-title><source>Frontiers in Neuroinformatics</source><year>2014</year><month>February</month><volume>8</volume><fpage>10</fpage><pub-id pub-id-type="pmcid">PMC3930095</pub-id><pub-id pub-id-type="pmid">24600386</pub-id><pub-id pub-id-type="doi">10.3389/fninf.2014.00010</pub-id></element-citation></ref><ref id="R34"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gerkin</surname><given-names>RC</given-names></name><name><surname>Birgiolas</surname><given-names>J</given-names></name><name><surname>Jarvis</surname><given-names>RJ</given-names></name><name><surname>Omar</surname><given-names>C</given-names></name><name><surname>Crook</surname><given-names>SM</given-names></name></person-group><article-title>NeuronUnit: A package for data-driven validation of neuron models using SciUnit</article-title><source>bioRxiv</source><year>2019</year><month>Jun</month><pub-id pub-id-type="doi">10.1101/665331</pub-id></element-citation></ref><ref id="R35"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gewaltig</surname><given-names>MO</given-names></name><name><surname>Diesmann</surname><given-names>M</given-names></name></person-group><article-title>NEST (NEural Simulation Tool)</article-title><source>Scholarpedia J</source><year>2007</year><volume>2</volume><issue>4</issue><fpage>1430</fpage></element-citation></ref><ref id="R36"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Steuber</surname><given-names>V</given-names></name><name><surname>Silver</surname><given-names>RA</given-names></name></person-group><article-title>neuroConstruct: a tool for modeling networks of neurons in 3D space</article-title><source>Neuron</source><year>2007</year><volume>54</volume><issue>2</issue><fpage>219</fpage><lpage>235</lpage><pub-id pub-id-type="pmcid">PMC1885959</pub-id><pub-id pub-id-type="pmid">17442244</pub-id><pub-id pub-id-type="doi">10.1016/j.neuron.2007.03.025</pub-id></element-citation></ref><ref id="R37"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Cantarelli</surname><given-names>M</given-names></name><name><surname>Marin</surname><given-names>B</given-names></name><name><surname>Quintana</surname><given-names>A</given-names></name><name><surname>Earnshaw</surname><given-names>M</given-names></name><name><surname>Sadeh</surname><given-names>S</given-names></name><name><surname>Piasini</surname><given-names>E</given-names></name><name><surname>Birgiolas</surname><given-names>J</given-names></name><name><surname>Cannon</surname><given-names>RC</given-names></name><name><surname>Cayco-Gajic</surname><given-names>NA</given-names></name><name><surname>Crook</surname><given-names>S</given-names></name><etal/></person-group><article-title>Open Source Brain: A Collaborative Resource for Visualizing, Analyzing, Simulating, and Developing Standardized Models of Neurons and Circuits</article-title><source>Neuron</source><year>2019</year><volume>103</volume><issue>3</issue><fpage>395</fpage><lpage>411</lpage><pub-id pub-id-type="pmcid">PMC6693896</pub-id><pub-id pub-id-type="pmid">31201122</pub-id><pub-id pub-id-type="doi">10.1016/j.neuron.2019.05.019</pub-id></element-citation></ref><ref id="R38"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Crook</surname><given-names>S</given-names></name><name><surname>Cannon</surname><given-names>RC</given-names></name><name><surname>Hines</surname><given-names>ML</given-names></name><name><surname>Billings</surname><given-names>GO</given-names></name><name><surname>Farinella</surname><given-names>M</given-names></name><name><surname>Morse</surname><given-names>TM</given-names></name><name><surname>Davison</surname><given-names>AP</given-names></name><name><surname>Ray</surname><given-names>S</given-names></name><name><surname>Bhalla</surname><given-names>US</given-names></name><name><surname>Barnes</surname><given-names>SR</given-names></name><etal/></person-group><article-title>NeuroML: A Language for Describing Data Driven Models of Neurons and Networks with a High Degree of Biological Detail</article-title><source>PLoS Computational Biology</source><year>2010</year><volume>6</volume><issue>6</issue><elocation-id>e1000815</elocation-id><pub-id pub-id-type="pmcid">PMC2887454</pub-id><pub-id pub-id-type="pmid">20585541</pub-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1000815</pub-id></element-citation></ref><ref id="R39"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Crook</surname><given-names>S</given-names></name><name><surname>Turner</surname><given-names>D</given-names></name><name><surname>Mantel</surname><given-names>K</given-names></name><name><surname>Raunak</surname><given-names>M</given-names></name><name><surname>Willke</surname><given-names>T</given-names></name><name><surname>Cohen</surname><given-names>JD</given-names></name></person-group><article-title>Integrating model development across computational neuroscience cognitive science and machine learning</article-title><source>Neuron</source><year>2023</year><volume>111</volume><issue>10</issue><fpage>1526</fpage><lpage>1530</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S0896627323002611">https://www.sciencedirect.com/science/article/pii/S0896627323002611</ext-link></comment><pub-id pub-id-type="pmcid">PMC7616330</pub-id><pub-id pub-id-type="pmid">37100054</pub-id><pub-id pub-id-type="doi">10.1016/j.neuron.2023.03.037</pub-id></element-citation></ref><ref id="R40"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Lung</surname><given-names>D</given-names></name><name><surname>Grosu</surname><given-names>R</given-names></name><name><surname>Hasani</surname><given-names>R</given-names></name><name><surname>Larson</surname><given-names>SD</given-names></name></person-group><article-title>c302: a multiscale framework for modelling the nervous system of <italic>caenorhabditis elegans</italic></article-title><source>Philosophical Transactions of the Royal Society B: Biological Sciences</source><year>2018</year><volume>373</volume><issue>1758</issue><elocation-id>20170379</elocation-id><pub-id pub-id-type="pmcid">PMC6158223</pub-id><pub-id pub-id-type="pmid">30201842</pub-id><pub-id pub-id-type="doi">10.1098/rstb.2017.0379</pub-id></element-citation></ref><ref id="R41"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Goddard</surname><given-names>NH</given-names></name><name><surname>Hucka</surname><given-names>M</given-names></name><name><surname>Howell</surname><given-names>F</given-names></name><name><surname>Cornells</surname><given-names>H</given-names></name><name><surname>Shankar</surname><given-names>K</given-names></name><name><surname>Beeman</surname><given-names>D</given-names></name></person-group><article-title>Towards NeuroML: Model Description Methods for Collaborative Modelling in Neuroscience</article-title><source>Philosophical Transactions of the Royal Society of London Series B: Biological Sciences</source><year>2001</year><month>Aug</month><volume>356</volume><issue>1412</issue><fpage>1209</fpage><lpage>1228</lpage><pub-id pub-id-type="pmcid">PMC1088511</pub-id><pub-id pub-id-type="pmid">11545699</pub-id><pub-id pub-id-type="doi">10.1098/rstb.2001.0910</pub-id></element-citation></ref><ref id="R42"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gorgolewski</surname><given-names>KJ</given-names></name><name><surname>Auer</surname><given-names>T</given-names></name><name><surname>Calhoun</surname><given-names>VD</given-names></name><name><surname>Craddock</surname><given-names>RC</given-names></name><name><surname>Das</surname><given-names>S</given-names></name><name><surname>Duff</surname><given-names>EP</given-names></name><name><surname>Flandin</surname><given-names>G</given-names></name><name><surname>Ghosh</surname><given-names>SS</given-names></name><name><surname>Glatard</surname><given-names>T</given-names></name><name><surname>Halchenko</surname><given-names>YO</given-names></name><name><surname>Handwerker</surname><given-names>DA</given-names></name><etal/></person-group><article-title>The brain imaging data structure, a format for organizing and describing outputs of neuroimaging experiments</article-title><source>Sci Data</source><year>2016</year><month>Jun</month><volume>3</volume><elocation-id>160044</elocation-id><pub-id pub-id-type="pmcid">PMC4978148</pub-id><pub-id pub-id-type="pmid">27326542</pub-id><pub-id pub-id-type="doi">10.1038/sdata.2016.44</pub-id></element-citation></ref><ref id="R43"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gurnani</surname><given-names>H</given-names></name><name><surname>Silver</surname><given-names>RA</given-names></name></person-group><article-title>Multidimensional population activity in an electrically coupled inhibitory circuit in the cerebellar cortex</article-title><source>Neuron</source><year>2021</year><pub-id pub-id-type="pmcid">PMC8153252</pub-id><pub-id pub-id-type="pmid">33848473</pub-id><pub-id pub-id-type="doi">10.1016/j.neuron.2021.03.027</pub-id></element-citation></ref><ref id="R44"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Harris</surname><given-names>CR</given-names></name><name><surname>Millman</surname><given-names>KJ</given-names></name><name><surname>van der Walt</surname><given-names>SJ</given-names></name><name><surname>Gommers</surname><given-names>R</given-names></name><name><surname>Virtanen</surname><given-names>P</given-names></name><name><surname>Cournapeau</surname><given-names>D</given-names></name><name><surname>Wieser</surname><given-names>E</given-names></name><name><surname>Taylor</surname><given-names>J</given-names></name><name><surname>Berg</surname><given-names>S</given-names></name><name><surname>Smith</surname><given-names>NJ</given-names></name><name><surname>Kern</surname><given-names>R</given-names></name><etal/></person-group><article-title>Array programming with NumPy</article-title><source>Nature</source><year>2020</year><month>Sep</month><volume>585</volume><issue>7825</issue><fpage>357</fpage><lpage>362</lpage><pub-id pub-id-type="pmcid">PMC7759461</pub-id><pub-id pub-id-type="pmid">32939066</pub-id><pub-id pub-id-type="doi">10.1038/s41586-020-2649-2</pub-id></element-citation></ref><ref id="R45"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hay</surname><given-names>E</given-names></name><name><surname>Hill</surname><given-names>S</given-names></name><name><surname>Schürmann</surname><given-names>F</given-names></name><name><surname>Markram</surname><given-names>H</given-names></name><name><surname>Segev</surname><given-names>I</given-names></name></person-group><article-title>Models of Neocortical Layer 5b Pyramidal Cells Capturing a Wide Range of Dendritic and Perisomatic Active Properties</article-title><source>PLoS Comput Biol</source><year>2011</year><month>Jul</month><volume>7</volume><issue>7</issue><elocation-id>e1002107</elocation-id><pub-id pub-id-type="pmcid">PMC3145650</pub-id><pub-id pub-id-type="pmid">21829333</pub-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1002107</pub-id></element-citation></ref><ref id="R46"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hindmarsh</surname><given-names>JL</given-names></name><name><surname>Rose</surname><given-names>RM</given-names></name></person-group><article-title>A Model of Neuronal Bursting Using Three Coupled First Order Differential Equations</article-title><source>Proceedings of the Royal Society of London Series B</source><year>1984</year><month>Mar</month><volume>221</volume><issue>1222</issue><fpage>87</fpage><lpage>102</lpage><pub-id pub-id-type="pmid">6144106</pub-id></element-citation></ref><ref id="R47"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hindmarsh</surname><given-names>JL</given-names></name><name><surname>Rose</surname><given-names>RM</given-names></name><name><surname>Huxley</surname><given-names>AF</given-names></name></person-group><article-title>A model of neuronal bursting using three coupled first order differential equations</article-title><source>Proceedings of the Royal Society of London Series B Biological Sciences</source><year>1984</year><volume>221</volume><issue>1222</issue><fpage>87</fpage><lpage>102</lpage><pub-id pub-id-type="doi">10.1098/rspb.1984.0024</pub-id></element-citation></ref><ref id="R48"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hines</surname><given-names>ML</given-names></name><name><surname>Carnevale</surname><given-names>NT</given-names></name></person-group><article-title>The NEURON simulation environment</article-title><source>Neural Computation</source><year>1997</year><volume>9</volume><issue>6</issue><fpage>1179</fpage><lpage>1209</lpage><pub-id pub-id-type="pmid">9248061</pub-id></element-citation></ref><ref id="R49"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hodgkin</surname><given-names>AL</given-names></name><name><surname>Huxley</surname><given-names>AF</given-names></name></person-group><article-title>A quantitative description of membrane current and its application to conduction and excitation in nerve</article-title><source>J Physiol</source><year>1952</year><volume>117</volume><issue>4</issue><fpage>500</fpage><lpage>544</lpage><pub-id pub-id-type="pmcid">PMC1392413</pub-id><pub-id pub-id-type="pmid">12991237</pub-id><pub-id pub-id-type="doi">10.1113/jphysiol.1952.sp004764</pub-id></element-citation></ref><ref id="R50"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hucka</surname><given-names>M</given-names></name><name><surname>Finney</surname><given-names>A</given-names></name><name><surname>Sauro</surname><given-names>HM</given-names></name><name><surname>Bolouri</surname><given-names>H</given-names></name><name><surname>Doyle</surname><given-names>JC</given-names></name><name><surname>Kitano</surname><given-names>H</given-names></name><name><surname>Arkin</surname><given-names>AP</given-names></name><name><surname>Bornstein</surname><given-names>BJ</given-names></name><name><surname>Bray</surname><given-names>D</given-names></name><name><surname>Cornish-Bowden</surname><given-names>A</given-names></name><name><surname>Cuellar</surname><given-names>AA</given-names></name><etal/></person-group><article-title>The Systems Biology Markup Language (SBML): a medium for representation and exchange of biochemical network models</article-title><source>Bioinformatics</source><year>2003</year><month>mar</month><volume>19</volume><issue>4</issue><fpage>524</fpage><lpage>531</lpage><pub-id pub-id-type="pmid">12611808</pub-id></element-citation></ref><ref id="R51"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hucka</surname><given-names>M</given-names></name><name><surname>Nickerson</surname><given-names>DP</given-names></name><name><surname>Bader</surname><given-names>GD</given-names></name><name><surname>Bergmann</surname><given-names>FT</given-names></name><name><surname>Cooper</surname><given-names>J</given-names></name><name><surname>Demir</surname><given-names>E</given-names></name><name><surname>Garny</surname><given-names>A</given-names></name><name><surname>Golebiewski</surname><given-names>M</given-names></name><name><surname>Myers</surname><given-names>CJ</given-names></name><name><surname>Schreiber</surname><given-names>F</given-names></name><name><surname>Waltemath</surname><given-names>D</given-names></name><etal/></person-group><article-title>Promoting coordinated development of community-based information standards for modeling in biology: the COMBINE initiative</article-title><source>Frontiers in Bioengineering and Biotechnology</source><year>2015</year><volume>3</volume><pub-id pub-id-type="pmcid">PMC4338824</pub-id><pub-id pub-id-type="pmid">25759811</pub-id><pub-id pub-id-type="doi">10.3389/fbioe.2015.00019</pub-id></element-citation></ref><ref id="R52"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hunter</surname><given-names>JD</given-names></name></person-group><article-title>Matplotlib: A 2D graphics environment</article-title><source>Computing in Science &amp; Engineering</source><year>2007</year><volume>9</volume><issue>3</issue><fpage>90</fpage><lpage>95</lpage><pub-id pub-id-type="doi">10.1109/MCSE.2007.55</pub-id></element-citation></ref><ref id="R53"><element-citation publication-type="web"><collab>INCF</collab><source>Role of community standards</source><year>2023</year><date-in-citation>accessed: 2023-1109</date-in-citation><comment><ext-link ext-link-type="uri" xlink:href="https://www.incf.org/role-community-standards">https://www.incf.org/role-community-standards</ext-link></comment></element-citation></ref><ref id="R54"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Izhikevich</surname><given-names>EM</given-names></name></person-group><article-title>Which model to use for cortical spiking neurons?</article-title><source>IEEE transactions on neural networks</source><year>2004</year><volume>15</volume><issue>5</issue><fpage>1063</fpage><lpage>1070</lpage><pub-id pub-id-type="pmid">15484883</pub-id></element-citation></ref><ref id="R55"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kriener</surname><given-names>B</given-names></name><name><surname>Hu</surname><given-names>H</given-names></name><name><surname>Vervaeke</surname><given-names>K</given-names></name></person-group><article-title>Parvalbumin interneuron dendrites enhance gamma oscillations</article-title><source>Cell Reports</source><year>2022</year><volume>39</volume><issue>11</issue><elocation-id>110948</elocation-id><comment><ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S2211124722007306">https://www.sciencedirect.com/science/article/pii/S2211124722007306</ext-link></comment><pub-id pub-id-type="pmid">35705055</pub-id></element-citation></ref><ref id="R56"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lapicque</surname><given-names>L</given-names></name></person-group><article-title>Recherches quantitatives sur l’excitation électrique des nerfs traitée comme une polarisation</article-title><source>J Physiol Pathol Gen</source><year>1907</year><volume>9</volume><issue>1</issue><fpage>620</fpage><lpage>635</lpage></element-citation></ref><ref id="R57"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Larson</surname><given-names>SD</given-names></name><name><surname>Martone</surname><given-names>ME</given-names></name></person-group><article-title>NeuroLex.org: an online framework for neuroscience knowledge</article-title><source>Frontiers in neuroinformatics</source><year>2013</year><volume>7</volume><fpage>18</fpage><pub-id pub-id-type="pmcid">PMC3757470</pub-id><pub-id pub-id-type="pmid">24009581</pub-id><pub-id pub-id-type="doi">10.3389/fninf.2013.00018</pub-id></element-citation></ref><ref id="R58"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lloyd</surname><given-names>CM</given-names></name><name><surname>Halstead</surname><given-names>MDB</given-names></name><name><surname>Nielsen</surname><given-names>PF</given-names></name></person-group><article-title>CellML: its future, present and past</article-title><source>Prog Biophys Mol Biol</source><year>2004</year><month>Jun</month><volume>85</volume><issue>2-3</issue><fpage>433</fpage><lpage>450</lpage><pub-id pub-id-type="pmid">15142756</pub-id></element-citation></ref><ref id="R59"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Maex</surname><given-names>R</given-names></name><name><surname>De Schutter</surname><given-names>E</given-names></name></person-group><article-title>Synchronization of Golgi and Granule Cell Firing in a Detailed Network Model of the Cerebellar Granule Cell Layer</article-title><source>Journal of Neurophysiology</source><year>1998</year><volume>80</volume><issue>5</issue><fpage>2521</fpage><lpage>2537</lpage><pub-id pub-id-type="pmid">9819260</pub-id></element-citation></ref><ref id="R60"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Markram</surname><given-names>H</given-names></name><name><surname>Muller</surname><given-names>E</given-names></name><name><surname>Ramaswamy</surname><given-names>S</given-names></name><name><surname>Reimann</surname><given-names>MW</given-names></name><name><surname>Abdellah</surname><given-names>M</given-names></name><name><surname>Sanchez</surname><given-names>CA</given-names></name><name><surname>Ailamaki</surname><given-names>A</given-names></name><name><surname>Alonso-Nanclares</surname><given-names>L</given-names></name><name><surname>Antille</surname><given-names>N</given-names></name><name><surname>Arsever</surname><given-names>S</given-names></name><name><surname>Kahou</surname><given-names>GAA</given-names></name><etal/></person-group><article-title>Reconstruction and Simulation of Neocortical Microcircuitry</article-title><source>Cell</source><year>2015</year><volume>163</volume><issue>2</issue><fpage>456</fpage><lpage>492</lpage><comment><ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/pii/S0092867415011915">http://www.sciencedirect.com/science/article/pii/S0092867415011915</ext-link></comment><pub-id pub-id-type="pmid">26451489</pub-id></element-citation></ref><ref id="R61"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Martone</surname><given-names>M</given-names></name><name><surname>Das</surname><given-names>S</given-names></name><name><surname>Goscinski</surname><given-names>W</given-names></name><name><surname>Hellgren-Kotaleski</surname><given-names>J</given-names></name><name><surname>Ho</surname><given-names>ETW</given-names></name><name><surname>Kennedy</surname><given-names>D</given-names></name><name><surname>Leergaard</surname><given-names>T</given-names></name><name><surname>Wachtler</surname><given-names>T</given-names></name><name><surname>Yamaguchi</surname><given-names>Y</given-names></name><name><surname>Abrams</surname><given-names>M</given-names></name></person-group><article-title>Call for community review of NeuroML — A Model Description Language for Computational Neuroscience</article-title><source>F1000 Research Limited</source><year>2019</year><pub-id pub-id-type="doi">10.7490/F1000RESEARCH.1116398.1</pub-id></element-citation></ref><ref id="R62"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>McDougal</surname><given-names>RA</given-names></name><name><surname>Morse</surname><given-names>TM</given-names></name><name><surname>Carnevale</surname><given-names>T</given-names></name><name><surname>Marenco</surname><given-names>L</given-names></name><name><surname>Wang</surname><given-names>R</given-names></name><name><surname>Migliore</surname><given-names>M</given-names></name><name><surname>Miller</surname><given-names>PL</given-names></name><name><surname>Shepherd</surname><given-names>GM</given-names></name><name><surname>Hines</surname><given-names>ML</given-names></name></person-group><article-title>Twenty years of ModelDB and beyond: building essential modeling tools for the future of neuroscience</article-title><source>J Comput Neurosci</source><year>2017</year><month>Feb</month><volume>42</volume><issue>1</issue><fpage>1</fpage><lpage>10</lpage><pub-id pub-id-type="pmcid">PMC5279891</pub-id><pub-id pub-id-type="pmid">27629590</pub-id><pub-id pub-id-type="doi">10.1007/s10827-016-0623-7</pub-id></element-citation></ref><ref id="R63"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mejias</surname><given-names>JF</given-names></name><name><surname>Murray</surname><given-names>JD</given-names></name><name><surname>Kennedy</surname><given-names>H</given-names></name><name><surname>Wang</surname><given-names>XJ</given-names></name></person-group><article-title>Feedforward and feedback frequency-dependent interactions in a large-scale laminar network of the primate cortex</article-title><source>Science Advances</source><year>2016</year><volume>2</volume><issue>11</issue><elocation-id>e1601335</elocation-id><pub-id pub-id-type="pmcid">PMC5262462</pub-id><pub-id pub-id-type="pmid">28138530</pub-id><pub-id pub-id-type="doi">10.1126/sciadv.1601335</pub-id></element-citation></ref><ref id="R64"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Migliore</surname><given-names>M</given-names></name><name><surname>Cavarretta</surname><given-names>F</given-names></name><name><surname>Hines</surname><given-names>ML</given-names></name><name><surname>Shepherd</surname><given-names>GG</given-names></name></person-group><article-title>Distributed organization of a brain microcircuit analysed by three-dimensional modeling: the olfactory bulb</article-title><source>Frontiers in Computational Neuroscience</source><year>2014</year><volume>8</volume><issue>50</issue><pub-id pub-id-type="pmcid">PMC4010739</pub-id><pub-id pub-id-type="pmid">24808855</pub-id><pub-id pub-id-type="doi">10.3389/fncom.2014.00050</pub-id></element-citation></ref><ref id="R65"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Migliore</surname><given-names>M</given-names></name><name><surname>Ferrante</surname><given-names>M</given-names></name><name><surname>Ascoli</surname><given-names>GA</given-names></name></person-group><article-title>Signal Propagation in Oblique Dendrites of CA1 Pyramidal Cells</article-title><source>Journal of Neurophysiology</source><year>2005</year><volume>94</volume><issue>6</issue><fpage>4145</fpage><lpage>4155</lpage><pub-id pub-id-type="pmcid">PMC3560391</pub-id><pub-id pub-id-type="pmid">16293591</pub-id><pub-id pub-id-type="doi">10.1152/jn.00521.2005</pub-id></element-citation></ref><ref id="R66"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Migliore</surname><given-names>M</given-names></name><name><surname>Morse</surname><given-names>TM</given-names></name><name><surname>Davison</surname><given-names>AP</given-names></name><name><surname>Marenco</surname><given-names>L</given-names></name><name><surname>Shepherd</surname><given-names>GM</given-names></name><name><surname>Hines</surname><given-names>ML</given-names></name></person-group><article-title>ModelDB: making models publicly accessible to support computational neuroscience</article-title><year>2003</year><pub-id pub-id-type="pmcid">PMC3728921</pub-id><pub-id pub-id-type="pmid">15055399</pub-id><pub-id pub-id-type="doi">10.1385/NI:1:1:135</pub-id></element-citation></ref><ref id="R67"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Garcia del Molino</surname><given-names>LC</given-names></name><name><surname>Yang</surname><given-names>GR</given-names></name><name><surname>Mejias</surname><given-names>JF</given-names></name><name><surname>Wang</surname><given-names>XJ</given-names></name></person-group><article-title>Paradoxical response reversal of top-down modulation in cortical circuits with three interneuron types</article-title><source>eLife</source><year>2017</year><month>dec</month><volume>6</volume><elocation-id>e29742</elocation-id><pub-id pub-id-type="pmcid">PMC5777826</pub-id><pub-id pub-id-type="pmid">29256863</pub-id><pub-id pub-id-type="doi">10.7554/eLife.29742</pub-id></element-citation></ref><ref id="R68"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Morris</surname><given-names>C</given-names></name><name><surname>Lecar</surname><given-names>H</given-names></name></person-group><article-title>Voltage oscillations in the barnacle giant muscle fiber</article-title><source>Biophysical Journal</source><year>1981</year><month>Jul</month><volume>35</volume><issue>1</issue><fpage>193</fpage><lpage>213</lpage><pub-id pub-id-type="pmcid">PMC1327511</pub-id><pub-id pub-id-type="pmid">7260316</pub-id><pub-id pub-id-type="doi">10.1016/S0006-3495(81)84782-0</pub-id></element-citation></ref><ref id="R69"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Muller</surname><given-names>E</given-names></name><name><surname>Bednar</surname><given-names>JA</given-names></name><name><surname>Diesmann</surname><given-names>M</given-names></name><name><surname>Gewaltig</surname><given-names>MO</given-names></name><name><surname>Hines</surname><given-names>M</given-names></name><name><surname>Davison</surname><given-names>AP</given-names></name></person-group><article-title>Python in neuroscience</article-title><source>Frontiers in Neuroinformatics</source><year>2015</year><volume>9</volume><pub-id pub-id-type="pmcid">PMC4396193</pub-id><pub-id pub-id-type="pmid">25926788</pub-id><pub-id pub-id-type="doi">10.3389/fninf.2015.00011</pub-id></element-citation></ref><ref id="R70"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Neal</surname><given-names>ML</given-names></name><name><surname>König</surname><given-names>M</given-names></name><name><surname>Nickerson</surname><given-names>D</given-names></name><name><surname>Misirli</surname><given-names>G</given-names></name><name><surname>Kalbasi</surname><given-names>R</given-names></name><name><surname>Dräger</surname><given-names>A</given-names></name><name><surname>Atalag</surname><given-names>K</given-names></name><name><surname>Chelliah</surname><given-names>V</given-names></name><name><surname>Cooling</surname><given-names>MT</given-names></name><name><surname>Cook</surname><given-names>DL</given-names></name><name><surname>Crook</surname><given-names>S</given-names></name><etal/></person-group><article-title>Harmonizing semantic annotations for computational models in biology</article-title><source>Briefings in Bioinformatics</source><year>2018</year><month>Nov</month><volume>20</volume><issue>2</issue><fpage>540</fpage><lpage>550</lpage><pub-id pub-id-type="pmcid">PMC6433895</pub-id><pub-id pub-id-type="pmid">30462164</pub-id><pub-id pub-id-type="doi">10.1093/bib/bby087</pub-id></element-citation></ref><ref id="R71"><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Omar</surname><given-names>C</given-names></name><name><surname>Aldrich</surname><given-names>J</given-names></name><name><surname>Gerkin</surname><given-names>RC</given-names></name></person-group><source>Collaborative Infrastructure for Test-Driven Scientific Model Validation</source><conf-name>Companion Proceedings of the 36th International Conference on Software Engineering ICSE Companion 2014</conf-name><conf-loc>New York, NY, USA</conf-loc><conf-sponsor>Association for Computing Machinery</conf-sponsor><year>2014</year><fpage>524</fpage><lpage>527</lpage><pub-id pub-id-type="doi">10.1145/2591062.2591129</pub-id></element-citation></ref><ref id="R72"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Panagiotou</surname><given-names>S</given-names></name><name><surname>Sidiropoulos</surname><given-names>H</given-names></name><name><surname>Soudris</surname><given-names>D</given-names></name><name><surname>Negrello</surname><given-names>M</given-names></name><name><surname>Strydis</surname><given-names>C</given-names></name></person-group><article-title>EDEN: A High-Performance, General-Purpose, NeuroML-Based Neural Simulator</article-title><source>Frontiers in neuroinformatics</source><year>2022</year><volume>16</volume><elocation-id>724336</elocation-id><pub-id pub-id-type="pmcid">PMC9167055</pub-id><pub-id pub-id-type="pmid">35669596</pub-id><pub-id pub-id-type="doi">10.3389/fninf.2022.724336</pub-id></element-citation></ref><ref id="R73"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pinsky</surname><given-names>PF</given-names></name><name><surname>Rinzel</surname><given-names>J</given-names></name></person-group><article-title>Intrinsic and network rhythmogenesis in a reduced traub model for CA3 neurons</article-title><source>Journal of Computational Neuroscience</source><year>1994</year><volume>1</volume><issue>1</issue><fpage>39</fpage><lpage>60</lpage><pub-id pub-id-type="pmid">8792224</pub-id></element-citation></ref><ref id="R74"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Poirazi</surname><given-names>P</given-names></name><name><surname>Papoutsi</surname><given-names>A</given-names></name></person-group><article-title>Illuminating dendritic function with computational models</article-title><source>Nature Reviews Neuroscience</source><year>2020</year><month>May</month><pub-id pub-id-type="pmid">32393820</pub-id></element-citation></ref><ref id="R75"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pospischil</surname><given-names>M</given-names></name><name><surname>Toledo-Rodriguez</surname><given-names>M</given-names></name><name><surname>Monier</surname><given-names>C</given-names></name><name><surname>Piwkowska</surname><given-names>Z</given-names></name><name><surname>Bal</surname><given-names>T</given-names></name><name><surname>Frégnac</surname><given-names>Y</given-names></name><name><surname>Markram</surname><given-names>H</given-names></name><name><surname>Destexhe</surname><given-names>A</given-names></name></person-group><article-title>Minimal Hodgkin-Huxley type models for different classes of cortical and thalamic neurons</article-title><source>Biological Cybernetics</source><year>2008</year><volume>99</volume><issue>4</issue><fpage>427</fpage><lpage>441</lpage><pub-id pub-id-type="pmid">19011929</pub-id></element-citation></ref><ref id="R76"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Potjans</surname><given-names>TC</given-names></name><name><surname>Diesmann</surname><given-names>M</given-names></name></person-group><article-title>The Cell-Type Specific Cortical Microcircuit: Relating Structure and Activity in a FullScale Spiking Network Model</article-title><source>Cereb Cortex</source><year>2014</year><volume>24</volume><issue>3</issue><fpage>785</fpage><lpage>806</lpage><pub-id pub-id-type="pmcid">PMC3920768</pub-id><pub-id pub-id-type="pmid">23203991</pub-id><pub-id pub-id-type="doi">10.1093/cercor/bhs358</pub-id></element-citation></ref><ref id="R77"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Prinz</surname><given-names>AA</given-names></name><name><surname>Bucher</surname><given-names>D</given-names></name><name><surname>Marder</surname><given-names>E</given-names></name></person-group><article-title>Similar network activity from disparate circuit parameters</article-title><source>Nature Neuroscience</source><year>2004</year><volume>7</volume><issue>12</issue><fpage>1345</fpage><lpage>1352</lpage><pub-id pub-id-type="pmid">15558066</pub-id></element-citation></ref><ref id="R78"><element-citation publication-type="confproc"><person-group person-group-type="author"><collab>Project Jupyter</collab><name><surname>Bussonnier</surname><given-names>M</given-names></name><name><surname>Forde</surname><given-names>J</given-names></name><name><surname>Freeman</surname><given-names>J</given-names></name><name><surname>Granger</surname><given-names>B</given-names></name><name><surname>Head</surname><given-names>T</given-names></name><name><surname>Holdgraf</surname><given-names>C</given-names></name><name><surname>Kelley</surname><given-names>K</given-names></name><name><surname>Nalvarte</surname><given-names>G</given-names></name><name><surname>Osheroff</surname><given-names>A</given-names></name><name><surname>Pacer</surname><given-names>M</given-names></name><etal/></person-group><source>Binder 2.0-Reproducible, interactive, sharable environments for science at scale</source><person-group person-group-type="editor"><name><surname>Fatih</surname><given-names>Akici</given-names></name><name><surname>David</surname><given-names>Lippa</given-names></name><name><surname>Dillon</surname><given-names>Niederhut</given-names></name><name><surname>Pacer</surname><given-names>M</given-names></name></person-group><conf-name>Proceedings of the 17th Python in Science Conference</conf-name><year>2018</year><fpage>113</fpage><lpage>120</lpage><pub-id pub-id-type="doi">10.25080/Majora-4af1f417-011</pub-id></element-citation></ref><ref id="R79"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ranjan</surname><given-names>R</given-names></name><name><surname>Khazen</surname><given-names>G</given-names></name><name><surname>Gambazzi</surname><given-names>L</given-names></name><name><surname>Ramaswamy</surname><given-names>S</given-names></name><name><surname>Hill</surname><given-names>S</given-names></name><name><surname>Schürmann</surname><given-names>F</given-names></name><name><surname>Markram</surname><given-names>H</given-names></name></person-group><article-title>Channelpedia: an integrative and interactive database for ion channels</article-title><source>Frontiers in Neuroinformatics</source><year>2011</year><volume>5</volume><pub-id pub-id-type="pmcid">PMC3248699</pub-id><pub-id pub-id-type="pmid">22232598</pub-id><pub-id pub-id-type="doi">10.3389/fninf.2011.00036</pub-id></element-citation></ref><ref id="R80"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ray</surname><given-names>S</given-names></name><name><surname>Bhalla</surname><given-names>US</given-names></name></person-group><article-title>PyMOOSE: interoperable scripting in Python for MOOSE</article-title><source>Frontiers in Neuroinformatics</source><year>2008</year><month>2</month><volume>6</volume><issue>2</issue><pub-id pub-id-type="pmcid">PMC2614320</pub-id><pub-id pub-id-type="pmid">19129924</pub-id><pub-id pub-id-type="doi">10.3389/neuro.11.006.2008</pub-id></element-citation></ref><ref id="R81"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ray</surname><given-names>S</given-names></name><name><surname>Aldworth</surname><given-names>ZN</given-names></name><name><surname>Stopfer</surname><given-names>MA</given-names></name></person-group><article-title>Feedback inhibition and its control in an insect olfactory circuit</article-title><source>eLife</source><year>2020</year><volume>9</volume><elocation-id>e53281</elocation-id><pub-id pub-id-type="pmcid">PMC7145415</pub-id><pub-id pub-id-type="pmid">32163034</pub-id><pub-id pub-id-type="doi">10.7554/eLife.53281</pub-id></element-citation></ref><ref id="R82"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rossant</surname><given-names>C</given-names></name><name><surname>Goodman</surname><given-names>DF</given-names></name><name><surname>Fontaine</surname><given-names>B</given-names></name><name><surname>Platkiewicz</surname><given-names>J</given-names></name><name><surname>Magnusson</surname><given-names>A</given-names></name><name><surname>Brette</surname><given-names>R</given-names></name></person-group><article-title>Fitting Neuron Models to Spike Trains</article-title><source>Frontiers in Neuroscience</source><year>2011</year><volume>5</volume><fpage>9</fpage><pub-id pub-id-type="pmcid">PMC3051271</pub-id><pub-id pub-id-type="pmid">21415925</pub-id><pub-id pub-id-type="doi">10.3389/fnins.2011.00009</pub-id></element-citation></ref><ref id="R83"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rothganger</surname><given-names>F</given-names></name><name><surname>Warrender</surname><given-names>C</given-names></name><name><surname>Trumbo</surname><given-names>D</given-names></name><name><surname>Aimone</surname><given-names>J</given-names></name></person-group><article-title>N2A: a computational tool for modeling from neurons to algorithms</article-title><source>Frontiers in Neural Circuits</source><year>2014</year><volume>8</volume><pub-id pub-id-type="pmcid">PMC3901007</pub-id><pub-id pub-id-type="pmid">24478635</pub-id><pub-id pub-id-type="doi">10.3389/fncir.2014.00001</pub-id></element-citation></ref><ref id="R84"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sadeh</surname><given-names>S</given-names></name><name><surname>Silver</surname><given-names>RA</given-names></name><name><surname>Mrsic-Flogel</surname><given-names>TD</given-names></name><name><surname>Muir</surname><given-names>DR</given-names></name></person-group><article-title>Assessing the Role of Inhibition in Stabilizing Neocortical Networks Requires Large-Scale Perturbation of the Inhibitory Population</article-title><source>The Journal of Neuroscience</source><year>2017</year><volume>37</volume><issue>49</issue><fpage>12050</fpage><lpage>12067</lpage><pub-id pub-id-type="pmcid">PMC5719979</pub-id><pub-id pub-id-type="pmid">29074575</pub-id><pub-id pub-id-type="doi">10.1523/JNEUROSCI.0963-17.2017</pub-id></element-citation></ref><ref id="R85"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Shaikh</surname><given-names>B</given-names></name><name><surname>Smith</surname><given-names>LP</given-names></name><name><surname>Vasilescu</surname><given-names>D</given-names></name><name><surname>Marupilla</surname><given-names>G</given-names></name><name><surname>Wilson</surname><given-names>M</given-names></name><name><surname>Agmon</surname><given-names>E</given-names></name><name><surname>Agnew</surname><given-names>H</given-names></name><name><surname>Andrews</surname><given-names>SS</given-names></name><name><surname>Anwar</surname><given-names>A</given-names></name><name><surname>Beber</surname><given-names>ME</given-names></name><name><surname>Bergmann</surname><given-names>FT</given-names></name><etal/></person-group><article-title>BioSimulators: a central registry of simulation engines and services for recommending specific tools</article-title><source>Nucleic Acids Research</source><year>2022</year><pub-id pub-id-type="pmcid">PMC9252793</pub-id><pub-id pub-id-type="pmid">35524558</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkac331</pub-id></element-citation></ref><ref id="R86"><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Sinha</surname><given-names>A</given-names></name><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Gerkin</surname><given-names>RC</given-names></name><name><surname>Lung</surname><given-names>D</given-names></name><name><surname>Marin</surname><given-names>B</given-names></name><name><surname>Stanislovas</surname><given-names>R</given-names></name><name><surname>Shafquat</surname><given-names>S</given-names></name><name><surname>Chintaluri</surname><given-names>C</given-names></name><name><surname>Watts</surname><given-names>M</given-names></name><collab>34383c</collab><name><surname>Ecker</surname><given-names>A</given-names></name><etal/></person-group><source>NeuroML/pyNeuroML: v1.1.2</source><publisher-name>Zenodo</publisher-name><year>2023</year><pub-id pub-id-type="doi">10.5281/zenodo.8366699</pub-id></element-citation></ref><ref id="R87"><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Sinha</surname><given-names>A</given-names></name><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Vella</surname><given-names>M</given-names></name><name><surname>Mattioni</surname><given-names>M</given-names></name><name><surname>Barnes</surname><given-names>C</given-names></name><name><surname>Davison</surname><given-names>A</given-names></name><name><surname>Givon</surname><given-names>LE</given-names></name><name><surname>B</surname><given-names>K</given-names></name><name><surname>Jefferis</surname><given-names>G</given-names></name><name><surname>Stimberg</surname><given-names>M</given-names></name><name><surname>Iizuka</surname><given-names>S</given-names></name><etal/></person-group><source>NeuralEnsemble/libNeuroML: v0.5.5</source><publisher-name>Zenodo</publisher-name><year>2023</year><pub-id pub-id-type="doi">10.5281/zenodo.8364786</pub-id></element-citation></ref><ref id="R88"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sivagnanam</surname><given-names>S</given-names></name><name><surname>Majumdar</surname><given-names>A</given-names></name><name><surname>Yoshimoto</surname><given-names>K</given-names></name><name><surname>Astakhov</surname><given-names>V</given-names></name><name><surname>Bandrowski</surname><given-names>AE</given-names></name><name><surname>Martone</surname><given-names>ME</given-names></name><name><surname>Carnevale</surname><given-names>NT</given-names></name><etal/></person-group><article-title>Introducing the neuroscience gateway</article-title><source>IWSG</source><year>2013</year><volume>993</volume><comment>0</comment></element-citation></ref><ref id="R89"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Smith</surname><given-names>SL</given-names></name><name><surname>Smith</surname><given-names>IT</given-names></name><name><surname>Branco</surname><given-names>T</given-names></name><name><surname>Hausser</surname><given-names>M</given-names></name></person-group><article-title>Dendritic spikes enhance stimulus selectivity in cortical neurons in vivo</article-title><source>Nature</source><year>2013</year><month>Nov</month><volume>503</volume><issue>7474</issue><fpage>115</fpage><lpage>120</lpage><comment>letter</comment><pub-id pub-id-type="pmcid">PMC6319606</pub-id><pub-id pub-id-type="pmid">24162850</pub-id><pub-id pub-id-type="doi">10.1038/nature12600</pub-id></element-citation></ref><ref id="R90"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Solinas</surname><given-names>S</given-names></name><name><surname>Forti</surname><given-names>L</given-names></name><name><surname>Cesana</surname><given-names>E</given-names></name><name><surname>Mapelli</surname><given-names>J</given-names></name><name><surname>De Schutter</surname><given-names>E</given-names></name><name><surname>D’Angelo</surname><given-names>E</given-names></name></person-group><article-title>Computational reconstruction of pacemaking and intrinsic electroresponsiveness in cerebellar Golgi cells</article-title><source>Frontiers in Cellular Neuroscience</source><year>2007</year><volume>1</volume><fpage>2</fpage><pub-id pub-id-type="pmcid">PMC2525930</pub-id><pub-id pub-id-type="pmid">18946520</pub-id><pub-id pub-id-type="doi">10.3389/neuro.03.002.2007</pub-id></element-citation></ref><ref id="R91"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Stimberg</surname><given-names>M</given-names></name><name><surname>Brette</surname><given-names>R</given-names></name><name><surname>Goodman</surname><given-names>DF</given-names></name></person-group><article-title>Brian 2, an intuitive and efficient neural simulator</article-title><source>eLife</source><year>2019</year><month>Aug</month><volume>8</volume><elocation-id>e47314</elocation-id><pub-id pub-id-type="pmcid">PMC6786860</pub-id><pub-id pub-id-type="pmid">31429824</pub-id><pub-id pub-id-type="doi">10.7554/eLife.47314</pub-id></element-citation></ref><ref id="R92"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Teeters</surname><given-names>JL</given-names></name><name><surname>Godfrey</surname><given-names>K</given-names></name><name><surname>Young</surname><given-names>R</given-names></name><name><surname>Dang</surname><given-names>C</given-names></name><name><surname>Friedsam</surname><given-names>C</given-names></name><name><surname>Wark</surname><given-names>B</given-names></name><name><surname>Asari</surname><given-names>H</given-names></name><name><surname>Peron</surname><given-names>S</given-names></name><name><surname>Li</surname><given-names>N</given-names></name><name><surname>Peyrache</surname><given-names>A</given-names></name><name><surname>Denisov</surname><given-names>G</given-names></name><etal/></person-group><article-title>Neurodata Without Borders: Creating a Common Data Format for Neurophysiology</article-title><source>Neuron</source><year>2015</year><month>Nov</month><volume>88</volume><issue>4</issue><fpage>629</fpage><lpage>634</lpage><pub-id pub-id-type="pmid">26590340</pub-id></element-citation></ref><ref id="R93"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Traub</surname><given-names>RD</given-names></name><name><surname>Contreras</surname><given-names>D</given-names></name><name><surname>Cunningham</surname><given-names>MO</given-names></name><name><surname>Murray</surname><given-names>H</given-names></name><name><surname>LeBeau</surname><given-names>FEN</given-names></name><name><surname>Roopun</surname><given-names>A</given-names></name><name><surname>Bibbig</surname><given-names>A</given-names></name><name><surname>Wilent</surname><given-names>WB</given-names></name><name><surname>Higley</surname><given-names>MJ</given-names></name><name><surname>Whittington</surname><given-names>MA</given-names></name></person-group><article-title>Single-Column Thalamocortical Network Model Exhibiting Gamma Oscillations, Sleep Spindles, and Epileptogenic Bursts</article-title><source>Journal of Neurophysiology</source><year>2005</year><volume>93</volume><issue>4</issue><fpage>2194</fpage><lpage>2232</lpage><pub-id pub-id-type="pmid">15525801</pub-id></element-citation></ref><ref id="R94"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Van Geit</surname><given-names>W</given-names></name><name><surname>Gevaert</surname><given-names>M</given-names></name><name><surname>Chindemi</surname><given-names>G</given-names></name><name><surname>Rössert</surname><given-names>C</given-names></name><name><surname>Courcol</surname><given-names>JD</given-names></name><name><surname>Muller</surname><given-names>EB</given-names></name><name><surname>Schürmann</surname><given-names>F</given-names></name><name><surname>Segev</surname><given-names>I</given-names></name><name><surname>Markram</surname><given-names>H</given-names></name></person-group><article-title>BluePy-Opt: Leveraging open source software and cloud infrastructure to optimise model parameters in neuroscience</article-title><source>Frontiers in Neuroinformatics</source><year>2016</year><volume>10</volume><issue>17</issue><pub-id pub-id-type="pmcid">PMC4896051</pub-id><pub-id pub-id-type="pmid">27375471</pub-id><pub-id pub-id-type="doi">10.3389/fninf.2016.00017</pub-id></element-citation></ref><ref id="R95"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Vella</surname><given-names>M</given-names></name><name><surname>Cannon</surname><given-names>RC</given-names></name><name><surname>Crook</surname><given-names>S</given-names></name><name><surname>Davison</surname><given-names>AP</given-names></name><name><surname>Ganapathy</surname><given-names>G</given-names></name><name><surname>Robinson</surname><given-names>HPC</given-names></name><name><surname>Silver</surname><given-names>RA</given-names></name><name><surname>Gleeson</surname><given-names>P</given-names></name></person-group><article-title>libNeuroML and PyLEMS: using Python to combine procedural and declarative modeling approaches in computational neuroscience</article-title><source>Frontiers in neuroinformatics</source><year>2014</year><volume>8</volume><fpage>38</fpage><pub-id pub-id-type="pmcid">PMC4005938</pub-id><pub-id pub-id-type="pmid">24795618</pub-id><pub-id pub-id-type="doi">10.3389/fninf.2014.00038</pub-id></element-citation></ref><ref id="R96"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Vervaeke</surname><given-names>K</given-names></name><name><surname>Lőrincz</surname><given-names>A</given-names></name><name><surname>Gleeson</surname><given-names>P</given-names></name><name><surname>Farinella</surname><given-names>M</given-names></name><name><surname>Nusser</surname><given-names>Z</given-names></name><name><surname>Silver</surname><given-names>RA</given-names></name></person-group><article-title>Rapid desynchronization of an electrically coupled interneuron network with sparse excitatory synaptic input</article-title><source>Neuron</source><year>2010</year><volume>67</volume><issue>3</issue><fpage>435</fpage><lpage>51</lpage><pub-id pub-id-type="pmcid">PMC2954316</pub-id><pub-id pub-id-type="pmid">20696381</pub-id><pub-id pub-id-type="doi">10.1016/j.neuron.2010.06.028</pub-id></element-citation></ref><ref id="R97"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Waltemath</surname><given-names>D</given-names></name><name><surname>Adams</surname><given-names>R</given-names></name><name><surname>Bergmann</surname><given-names>FT</given-names></name><name><surname>Hucka</surname><given-names>M</given-names></name><name><surname>Kolpakov</surname><given-names>F</given-names></name><name><surname>Miller</surname><given-names>AK</given-names></name><name><surname>Moraru</surname><given-names>II</given-names></name><name><surname>Nickerson</surname><given-names>D</given-names></name><name><surname>Sahle</surname><given-names>S</given-names></name><name><surname>Snoep</surname><given-names>JL</given-names></name><name><surname>Le Novère</surname><given-names>N</given-names></name></person-group><article-title>Reproducible computational biology experiments with SED-ML-The Simulation Experiment Description Markup Language</article-title><source>BMC Systems Biology</source><year>2011</year><volume>5</volume><issue>1</issue><fpage>198</fpage><pub-id pub-id-type="pmcid">PMC3292844</pub-id><pub-id pub-id-type="pmid">22172142</pub-id><pub-id pub-id-type="doi">10.1186/1752-0509-5-198</pub-id></element-citation></ref><ref id="R98"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wang</surname><given-names>XJ</given-names></name><name><surname>Buzsáki</surname><given-names>G</given-names></name></person-group><article-title>Gamma Oscillation by Synaptic Inhibition in a Hippocampal Interneuronal Network Model</article-title><source>Journal of Neuroscience</source><year>1996</year><volume>16</volume><issue>20</issue><fpage>6402</fpage><lpage>6413</lpage><comment><ext-link ext-link-type="uri" xlink:href="http://www.jneurosci.org/content/16/20/6402">http://www.jneurosci.org/content/16/20/6402</ext-link></comment><pub-id pub-id-type="pmcid">PMC6578902</pub-id><pub-id pub-id-type="pmid">8815919</pub-id><pub-id pub-id-type="doi">10.1523/JNEUROSCI.16-20-06402.1996</pub-id></element-citation></ref><ref id="R99"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wilkinson</surname><given-names>MD</given-names></name><name><surname>Dumontier</surname><given-names>M</given-names></name><name><surname>Aalbersberg</surname><given-names>IJ</given-names></name><name><surname>Appleton</surname><given-names>G</given-names></name><name><surname>Axton</surname><given-names>M</given-names></name><name><surname>Baak</surname><given-names>A</given-names></name><name><surname>Blomberg</surname><given-names>N</given-names></name><name><surname>Boiten</surname><given-names>JW</given-names></name><name><surname>da Silva Santos</surname><given-names>LB</given-names></name><name><surname>Bourne</surname><given-names>PE</given-names></name><name><surname>Bouwman</surname><given-names>J</given-names></name><etal/></person-group><article-title>The FAIR Guiding Principles for scientific data management and stewardship</article-title><source>Scientific Data</source><year>2016</year><volume>3</volume><issue>1</issue><elocation-id>160018</elocation-id><pub-id pub-id-type="pmcid">PMC4792175</pub-id><pub-id pub-id-type="pmid">26978244</pub-id><pub-id pub-id-type="doi">10.1038/sdata.2016.18</pub-id></element-citation></ref><ref id="R100"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wilson</surname><given-names>HR</given-names></name><name><surname>Cowan</surname><given-names>JD</given-names></name></person-group><article-title>Excitatory and inhibitory interactions in localized populations of model neurons</article-title><source>Biophys J</source><year>1972</year><month>Jan</month><volume>12</volume><issue>1</issue><fpage>1</fpage><lpage>24</lpage><pub-id pub-id-type="pmcid">PMC1484078</pub-id><pub-id pub-id-type="pmid">4332108</pub-id><pub-id pub-id-type="doi">10.1016/S0006-3495(72)86068-5</pub-id></element-citation></ref><ref id="R101"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yao</surname><given-names>HK</given-names></name><name><surname>Guet-McCreight</surname><given-names>A</given-names></name><name><surname>Mazza</surname><given-names>F</given-names></name><name><surname>Moradi Chameh</surname><given-names>H</given-names></name><name><surname>Prevot</surname><given-names>TD</given-names></name><name><surname>Griffiths</surname><given-names>JD</given-names></name><name><surname>Tripathy</surname><given-names>SJ</given-names></name><name><surname>Valíante</surname><given-names>TA</given-names></name><name><surname>Sibille</surname><given-names>E</given-names></name><name><surname>Hay</surname><given-names>E</given-names></name></person-group><article-title>Reduced inhibition in depression impairs stimulus processing in human cortical microcircuits</article-title><source>Cell Reports</source><year>2022</year><month>Jan</month><volume>38</volume><issue>2</issue><pub-id pub-id-type="pmid">35021088</pub-id></element-citation></ref></ref-list></back><floats-group><boxed-text id="BX1" position="float" orientation="portrait"><caption><title>NeuroML Python tools for users</title></caption><p>PyNeuroML provides Python functions and command line utilities.</p><p>Create (using Python API)</p><preformat>
<bold><styled-content style="color:#008000">from</styled-content><styled-content style="color:#0000FF">neuroml</styled-content><styled-content style="color:#008000">import</styled-content></bold> *
</preformat><preformat>
<italic><styled-content style="color:#3D7A7A"># Create a container document</styled-content></italic>
<styled-content style="color:#273B81">doc</styled-content> = <styled-content style="color:#273B81">NeuroMLDocument</styled-content><styled-content style="color:#273B81">(</styled-content><styled-content style="color:#008000">id</styled-content>=<styled-content style="color:#ba2121">“network0”</styled-content>)
</preformat><preformat>
<italic><styled-content style="color:#3D7A7A"># Add single exponential synapse model</styled-content></italic>
<styled-content style="color:#273B81">syn0 = doc.add</styled-content>(<styled-content style="color:#ba2121">“ExpOneSynapse”</styled-content>, <styled-content style="color:#008000">id</styled-content>=<styled-content style="color:#ba2121">“syn0”</styled-content>, <styled-content style="color:#273B81">gbase=</styled-content><styled-content style="color:#ba2121">“65nS”</styled-content>, <styled-content style="color:#273B81">erev=</styled-content><styled-content style="color:#ba2121">“0mV”</styled-content>, <styled-content style="color:#273B81">tau_decay=</styled-content><styled-content style="color:#ba2121">“3ms”</styled-content>)
</preformat><preformat>
<italic><styled-content style="color:#008000"># Reuse existing ion channel model</styled-content></italic>
<styled-content style="color:#273B81">doc.add</styled-content>(<styled-content style="color:#ba2121">“IncludeType”</styled-content>, <styled-content style="color:#273B81">href</styled-content>=<styled-content style="color:#ba2121">“Na_chan.channel.nml”</styled-content>)
</preformat><preformat>
<italic><styled-content style="color:#008000"># Create a cell with 3D morphology using the Cell ComponentType</styled-content></italic>
<styled-content style="color:#273B81">cell = doc.add</styled-content>(<styled-content style="color:#ba2121">“Cell”</styled-content>, <styled-content style="color:#008000">id</styled-content>=<styled-content style="color:#ba2121">“olm”</styled-content>, <styled-content style="color:#273B81">neuro_lex_id=“NLXCELL:091206”)</styled-content> <italic><styled-content style="color:#3D7A7A"># Hippocampal CA1 OLM cell</styled-content></italic>
<styled-content style="color:#273B81">cell.set_init_memb_potential</styled-content>(<styled-content style="color:#ba2121">“-67mV”</styled-content>)
<styled-content style="color:#273B81">cell.set_resistivity</styled-content>(<styled-content style="color:#ba2121">“0.15 kohm_cm”</styled-content>)
<styled-content style="color:#273B81">cell.add_channel_density</styled-content><styled-content style="color:#273B81">(doc, cd_id=</styled-content><styled-content style="color:#ba2121">“na_all”</styled-content>, <styled-content style="color:#273B81">cond_density=</styled-content><styled-content style="color:#ba2121">“10 mS_per_cm2”</styled-content>,
                        <styled-content style="color:#273B81">ion_channel=</styled-content><styled-content style="color:#ba2121">“Na_chan”</styled-content>, <styled-content style="color:#273B81">ion_chan_def_file=</styled-content><styled-content style="color:#ba2121">“Na.channel.nml”</styled-content>,
                        <styled-content style="color:#273B81">erev=</styled-content><styled-content style="color:#ba2121">“50mV”</styled-content>, <styled-content style="color:#273B81">ion</styled-content>=<styled-content style="color:#ba2121">“na”</styled-content>)
<styled-content style="color:#273B81">cell.add_unbranched_segment_group</styled-content>(<styled-content style="color:#ba2121">“soma_group”</styled-content>)
<styled-content style="color:#273B81">soma_0 = cell.add_segment(prox=[0, 0, 0, 10], dist=[0, 10, 0, 10], name=</styled-content><styled-content style="color:#ba2121">“Seg0_soma_0”</styled-content>,
                        <styled-content style="color:#273B81">group_id</styled-content>=<styled-content style="color:#ba2121">“soma_group”</styled-content>, <styled-content style="color:#273B81">seg_type=</styled-content><styled-content style="color:#ba2121">“soma”</styled-content>)
</preformat><table-wrap id="T3" position="anchor" orientation="portrait"><table frame="void" rules="none"><thead><tr><th align="left" valign="top"><monospace><styled-content style="color:#273B81"><underline>API examples</underline></styled-content></monospace></th><th align="left" valign="top"><monospace><styled-content style="color:#273B81"><underline>Command line usage examples</underline></styled-content></monospace></th></tr></thead><tbody><tr><td align="left" valign="top"><monospace><bold><styled-content style="color:#273B81">Validate</styled-content></bold></monospace></td><td align="left" valign="top"/></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">validate_neuroml2</styled-content>(<styled-content style="color:#ba2121">“file.nml”</styled-content>)</monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml</styled-content><styled-content style="color:#ba2121">“file.nml”</styled-content><styled-content style="color:#273B81">-validate</styled-content></monospace></td></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">doc.validate(recursive=</styled-content><styled-content style="color:#008000">True</styled-content>)</monospace></td><td align="left" valign="top"/></tr></tbody></table></table-wrap><table-wrap id="T4" position="anchor" orientation="portrait"><table frame="void" rules="none"><tbody><tr><td align="left" valign="top"><monospace><bold><styled-content style="color:#273B81">Inspect and visualize</styled-content></bold></monospace></td><td align="left" valign="top"/></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">element. info()</styled-content></monospace></td><td align="left" valign="top"/></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">summary(doc)</styled-content></monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml-summary</styled-content><styled-content style="color:#ba2121">“file.nml”</styled-content></monospace></td></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">nml2_to_png(doc)</styled-content></monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml -png</styled-content><styled-content style="color:#ba2121">“file.nml”</styled-content></monospace></td></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">nml2_to_svg(doc)</styled-content></monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml -svg</styled-content><styled-content style="color:#ba2121">“file.nml”</styled-content></monospace></td></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">generate_nmlgraph(doc)</styled-content></monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml</styled-content><styled-content style="color:#ba2121">“file.nml” -graph</styled-content></monospace></td></tr><tr><td align="left" valign="top"/><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml</styled-content><styled-content style="color:#ba2121">“file.nml”</styled-content><styled-content style="color:#273B81">-matrix 1</styled-content></monospace></td></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">plot_2D(cell)</styled-content></monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml-plotmorph</styled-content><styled-content style="color:#ba2121">“cell.nml”</styled-content></monospace></td></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">plot_interactive_3d(cell)</styled-content></monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml-plotmorph -interactive3d</styled-content><styled-content style="color:#ba2121">“cell.nml”</styled-content></monospace></td></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">plot_interactive_3d(network)</styled-content></monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml-plotmorph -interactive3d</styled-content><styled-content style="color:#ba2121">“net.nml”</styled-content></monospace></td></tr><tr><td align="left" valign="top"/><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml-channelanalysis</styled-content><styled-content style="color:#ba2121">“channel.nml”</styled-content></monospace></td></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">plot_channel_densities(cell)</styled-content></monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml-plotchan</styled-content><styled-content style="color:#ba2121">“cell.nml”</styled-content></monospace></td></tr></tbody></table></table-wrap><table-wrap id="T5" position="anchor" orientation="portrait"><table frame="void" rules="none"><tbody><tr><td align="left" valign="top"><monospace><bold><styled-content style="color:#273B81">Simulate</styled-content></bold></monospace></td><td align="left" valign="top"/></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">run_lems_with_jneuroml</styled-content>(<styled-content style="color:#ba2121">“sim.xml”</styled-content>)</monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml</styled-content><styled-content style="color:#ba2121">“sim.xml”</styled-content></monospace></td></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">run_lems_with_jneuroml_neuron</styled-content>(<styled-content style="color:#ba2121">“sim.xml”</styled-content>)</monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml</styled-content><styled-content style="color:#ba2121">“sim.xml”</styled-content><styled-content style="color:#273B81">-neuron -run</styled-content></monospace></td></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">run_lems_with_jneuroml_netpyne</styled-content>(<styled-content style="color:#ba2121">“sim.xml”</styled-content>)</monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml</styled-content><styled-content style="color:#ba2121">“sim.xml”</styled-content><styled-content style="color:#273B81">-netpyne -run</styled-content></monospace></td></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">run_on_nsg</styled-content>(<styled-content style="color:#ba2121">“jneuroml_neuron”</styled-content><styled-content style="color:#273B81">,</styled-content><styled-content style="color:#273B81">“sim.xml”</styled-content>)</monospace></td><td align="left" valign="top"/></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">…</styled-content></monospace></td><td align="left" valign="top"/></tr></tbody></table></table-wrap><table-wrap id="T6" position="anchor" orientation="portrait"><table frame="void" rules="none"><tbody><tr><td align="left" valign="top"><monospace><bold><styled-content style="color:#273B81">Share and archive</styled-content></bold></monospace></td><td align="left" valign="top"/></tr><tr><td align="left" valign="top"><monospace><styled-content style="color:#273B81">create_combine_archive</styled-content>(<styled-content style="color:#ba2121">“sim.xml”</styled-content>)</monospace></td><td align="left" valign="top"><monospace><styled-content style="color:#273B81">&gt; pynml-archive</styled-content><styled-content style="color:#ba2121">“neuron.cell.nml”</styled-content></monospace></td></tr></tbody></table></table-wrap></boxed-text><fig id="F1" position="float"><label>Figure 1</label><caption><title>The NeuroML software ecosystem supports all stages of the model development life cycle.</title></caption><graphic xlink:href="EMS192732-f001"/></fig><fig id="F2" position="float"><label>Figure 2</label><caption><title>NeuroML is a modular, hierarchical format that supports multi-scale modeling. Elements in NeuroML are formally defined, independent, self-contained building blocks with hierarchical relationships between them.</title><p><bold>(a)</bold> Models of <bold>ionic conductances</bold> can be defined as a composition of gates, each with specific voltage (and potentially [Ca<sup>2+</sup>]) dependence that controls the conductance. <bold>(b)</bold> Morphologically detailed <bold>neuronal models</bold> specify the 3D structure of the cells, along with passive electrical properties, and reference ion channels that confer membrane conductances. <bold>(c) Network models</bold> contain populations of these cells connected via synaptic projections. <bold>(d)</bold> A truncated illustration of main categories of the NeuroMLv2 standard elements and their hierarchies. The standard includes commonly used model elements/building blocks that have been pre-defined for users: <bold>Cells</bold>: neuronal models ranging from simple spiking point neurons to biophysically detailed cells with multi-compartmental morphologies and active membrane conductances; <bold>Synapses and ionic conductance models</bold>: commonly used chemical and electrical synapse models (gap junctions), and multiple representations for ionic conductances; <bold>Inputs</bold>: to drive cell and network activity, e.g. current or voltage clamp, spiking background inputs; <bold>Networks</bold>: of populations (containing any of the aforementioned cell types), and projections. The full list of standard NeuroML elements can be found in <xref ref-type="supplementary-material" rid="SD1">Appendix 1 Tables 5 and 6</xref>.</p></caption><graphic xlink:href="EMS192732-f002"/></fig><fig id="F3" position="float"><label>Figure 3</label><caption><title>The ecosystem of NeuroML complaint tools and their relation to the model life cycle.</title><p>The inner circle shows the core NeuroML tools and libraries that are maintained by the NeuroML developers. These provide functionality to read, modify, or create new NeuroML models, as well as to validate, analyze, visualize and simulate the models. The outermost layer shows NeuroML compliant tools that have been developed independently to allow various interactions with NeuroML models. These complement the core tools by facilitating model creation, validation, visualization, simulation, fitting/optimization, sharing and reuse. Further information on each of the tools shown here can be found in <xref ref-type="supplementary-material" rid="SD1">Appendix 1 Tables 1 and 2</xref>.</p></caption><graphic xlink:href="EMS192732-f003"/></fig><fig id="F4" position="float"><label>Figure 4</label><caption><title>The core NeuroML software stack, and an example NeuroML model created using the Python NeuroML tools.</title><p><bold>(a)</bold> The core NeuroML software stack consists of Java (blue) and Python (orange) based applications/libraries, and the LEMS model ComponentType definitions (green), wrapped up in a single package, pyNeuroML. Each of these modules can be used independently or the whole stack can be obtained by installing pyNeuroML with the default Python package manager, Pip: pip install pyneuroml. <bold>(b)</bold> An example of how to create a simple NeuroML model is shown, using the NeuroMLv2 Python API (libNeuroML) to describe a model consisting of a population of 10 integrate and fire point neurons (IafTauCell) in a network. The IafTauCell, Network, Population, and NeuroMLDocument model ComponentTypes are provided by the NeuroMLv2 standard. The underlying dynamics of the model are hidden from the user, being specified in the LEMS ComponentType definitions of the elements (see <xref ref-type="sec" rid="S21">Methods</xref>). The simulator-independent NeuroML model description can be simulated on any of the supported simulation engines. <bold>(c)</bold> XML serialization of the NeuroMLv2 model description shows the correspondence between the Python object model and the XML serialization.</p></caption><graphic xlink:href="EMS192732-f004"/></fig><fig id="F5" position="float"><label>Figure 5</label><caption><title>Workflow showing how to create and simulate NeuroML models using Python.</title><p>The Python API can be used to create models which may include elements built from scratch from the NeuroML standard, re-use elements from previously created models, or create new components based on novel model definitions expressed in LEMS (red). The generated model elements are saved in the default XML-based serialization (blue). The NeuroML core tools and libraries (orange) include modules to import model descriptions expressed in the XML serialization, and support multiple options for how simulators can execute these models (green). These include: (1) execution of the NeuroML models by reference simulators; (2) execution by other independently developed simulators that natively support NeuroML, such as EDEN; (3) generation of Python “import scripts” which allow NeuroML models to be imported (and converted to internal formats) by simulators which support this; (4) fully expanding the LEMS description of the models, which can be mapped to generated simulator specific scripts for target simulators; (5) mapping to other standardized formats in neuroscience and systems biology.</p></caption><graphic xlink:href="EMS192732-f005"/></fig><fig id="F6" position="float"><label>Figure 6</label><caption><title>NeuroML model development incorporates multi-level validation of models.</title><p>Checks are performed on the model descriptions (blue) before simulation using validation at both the NeuroML and LEMS levels (green). After the models are simulated (yellow), further checks can be run to ensure the output is in line with expected behavior (brown). The OSB Model Validation (OMV) framework can be used to ensure consistent behavior across simulators, and comparisons can be made of model activity to their biological equivalents using SciUnit.</p></caption><graphic xlink:href="EMS192732-f006"/></fig><fig id="F7" position="float"><label>Figure 7</label><caption><title>Visualization of detailed neuronal morphology of neurons and networks together with their functional properties (results from model simulation) enabled by NeuroML.</title><p><bold>(a)</bold> interactive 3-D (VisPy (<xref ref-type="bibr" rid="R16">Campagnola et al., 2023</xref>) based) visualization of an olfactory bulb network with detailed mitral and granule cells (<xref ref-type="bibr" rid="R64">Migliore et al., 2014</xref>), generated using pyNeuroML. <bold>(b)</bold> Visualization of an inhibition stabilized network based on <italic>Sadeh et al.</italic> (<italic>2017</italic>) using Open Source Brain (OSB) version 1 (<xref ref-type="bibr" rid="R37">Gleeson et al., 2019</xref>). <bold>(c)</bold> Visualization of 3D network of simplified multi-compartmental cortical neurons (from <xref ref-type="bibr" rid="R93">Traub et al. (2005)</xref>, imported as NeuroML) and simulated spiking activity using NetPyNE’s GUI (<xref ref-type="bibr" rid="R27">Dura-Bernal et al., 2019</xref>), which is embedded in OSB version 2.</p></caption><graphic xlink:href="EMS192732-f007"/></fig><fig id="F8" position="float"><label>Figure 8</label><caption><title>Analysis and visualization of network connectivity from NeuroML model descriptions <italic>prior to simulation</italic>.</title><p>Network connectivity schematic <bold>(a)</bold> and connectivity matrix <bold>(b)</bold> for a half scale implementation of the human layer 2/3 cortical network model (<xref ref-type="bibr" rid="R101">Yao et al., 2022</xref>) generated using pyNeuroML.</p></caption><graphic xlink:href="EMS192732-f008"/></fig><fig id="F9" position="float"><label>Figure 9</label><caption><title>Examples of visualizing biophysical properties of a NeuroML model neuron.</title><p><bold>(a)</bold> Electrophysiological properties generated by the NeuroML-DB web based platform (<xref ref-type="bibr" rid="R11">Birgiolas et al., 2023</xref>). (Plots show four superimposed voltage traces in the top panel and corresponding current injection traces below). <bold>(b)</bold> Example plots of steady states of activation (na_channel na_m inf) and inactivation (na_channel na_h inf) variables and their time courses (na_channel na_m tau and na_channel na_h tau) for the Na channel from the classic Hodgkin Huxley model (<xref ref-type="bibr" rid="R49">Hodgkin and Huxley, 1952</xref>). <bold>(c)</bold> The distribution of the peak conductances for the Ih channel over a layer 5 Pyramidal cell (<xref ref-type="bibr" rid="R45">Hay et al., 2011</xref>). Both (b) and (c) were generated using the analysis features in pyNeuroML, and similar functionality is also available in OSBv1 (<xref ref-type="bibr" rid="R37">Gleeson et al., 2019</xref>).</p></caption><graphic xlink:href="EMS192732-f009"/></fig><fig id="F10" position="float"><label>Figure 10</label><caption><title>Example model description of a HindmarshRose1984Cell NeuroML component.</title><p><bold>(a)</bold> XML serialization of the model description containing the main hindmarshRose1984Cell element, with a set of parameters which result in regular bursting. A current clamp stimulus is applied using a pulseGenerator, and a population of one cell is added with this in a network. This XML can be validated against the NeuroML Schema. <bold>(b)</bold> Membrane potentials generated from a simulation of the model in (a). The LEMS simulation file to execute this is shown in <xref ref-type="fig" rid="F14">Fig. 14</xref>.</p></caption><graphic xlink:href="EMS192732-f010"/></fig><fig id="F11" position="float"><label>Figure 11</label><caption><p>Type definitions taken from the <bold>NeuroMLv2 schema</bold>, which describes the structure of NeuroMLv2 elements. <bold>Top:</bold> “simple” types may not include other elements or attributes. Here, the Nml2Quantity_none and Nml2Quantity_voltage types define restrictions on the default string type to limit what strings can be used as valid values for attributes of these types. <bold>Bottom:</bold> example of a “complex” type, the HindmarshRose cell model (<xref ref-type="bibr" rid="R47">Hindmarsh et al., 1984</xref>), that can also include other elements of other types, and extend other types.</p></caption><graphic xlink:href="EMS192732-f011"/></fig><fig id="F12" position="float"><label>Figure 12</label><caption><p><bold>LEMS ComponentType definition</bold> of the HindmarshRose cell model (<xref ref-type="bibr" rid="R47">Hindmarsh et al., 1984</xref>).</p></caption><graphic xlink:href="EMS192732-f012"/></fig><fig id="F13" position="float"><label>Figure 13</label><caption><title>Example model description of a HindmarshRose1984Cell NeuroML component in Python, using parameters for regular bursting. This script generates the XML in <xref ref-type="fig" rid="F10">Fig. 10</xref>.</title></caption><graphic xlink:href="EMS192732-f013"/></fig><fig id="F14" position="float"><label>Figure 14</label><caption><title>An example simulation of the HindmarshRose model description shown in <xref ref-type="fig" rid="F13">Fig. 13</xref>, with the LEMS serialization shown atthe bottom.</title></caption><graphic xlink:href="EMS192732-f014"/></fig><fig id="F15" position="float"><label>Figure 15</label><caption><p>Documentation for the HindmarshRose1984Cell NeuroMLv2 ComponentType generated from the XSD schema and LEMS definitions on the NeuroML documentation website, showing its dynamics. More information about the ComponentType can be obtained from the tabs provided.</p></caption><graphic xlink:href="EMS192732-f015"/></fig><table-wrap id="T1" position="float" orientation="portrait"><label>Table 1</label><caption><p>Step by step guides for using NeuroML, illustrating the various stages of the model development life cycle. These include Introductory guides aimed at teaching the fundamental NeuroML concepts, Advanced guides illustrating specific modeling workflows, and Walkthrough guides discussing the steps required for converting models to NeuroML. An updated list is available at http://neuroml.org/gettingstarted.</p></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" valign="top">Link</th><th align="left" valign="top">Description</th><th align="left" valign="top">Model life cycle stages</th></tr></thead><tbody><tr style="border-bottom: solid thin"><td align="center" valign="top" colspan="3"><bold>Introductory guides</bold></td></tr><tr><td align="left" valign="top"><styled-content style="color:#0A9DD9">Guide 1</styled-content></td><td align="left" valign="top">Create and simulate a simple regular spiking Izhikevich neuron in NeuroML</td><td align="left" valign="top">Create, Validate, Simulate</td></tr><tr style="background-color:#CBCCCD"><td align="left" valign="top"><styled-content style="color:#0A9DD9">Guide 2</styled-content></td><td align="left" valign="top">Create a network of two synaptically connected populations of Izhikevich neurons</td><td align="left" valign="top">Create, Validate, Visualize, Simulate</td></tr><tr><td align="left" valign="top"><styled-content style="color:#0A9DD9">Guide 3</styled-content></td><td align="left" valign="top">Build and simulate a single compartment Hodgkin-Huxley neuron</td><td align="left" valign="top">Create, Validate, Visualize, Simulate</td></tr><tr style="background-color:#CBCCCD"><td align="left" valign="top"><styled-content style="color:#0A9DD9">Guide 4</styled-content></td><td align="left" valign="top">Create and simulate a multi compartment hippocampal OLM neuron</td><td align="left" valign="top">Create, Validate, Visualize, Simulate</td></tr><tr style="border-bottom: solid thin; border-top: solid thin"><td align="center" valign="top" colspan="3"><bold>Advanced guides</bold></td></tr><tr><td align="left" valign="top"><styled-content style="color:#0A9DD9">Guide 5</styled-content></td><td align="left" valign="top">Create novel NeuroML models from components on NeuroML-DB</td><td align="left" valign="top">Reuse, Create, Validate, Simulate</td></tr><tr style="background-color:#CBCCCD"><td align="left" valign="top"><styled-content style="color:#0A9DD9">Guide 6</styled-content></td><td align="left" valign="top">Optimize/fιt NeuroML models to experimental data</td><td align="left" valign="top">Create, Validate, Simulate, Fit</td></tr><tr><td align="left" valign="top"><styled-content style="color:#0A9DD9">Guide 7</styled-content></td><td align="left" valign="top">Extend NeuroML by creating a novel model type in LEMS</td><td align="left" valign="top">Create, Simulate</td></tr><tr style="border-bottom: solid thin; border-top: solid thin"><td align="center" valign="top" colspan="3"><bold>Walkthroughs</bold></td></tr><tr><td align="left" valign="top"><styled-content style="color:#0A9DD9">Guide 8</styled-content></td><td align="left" valign="top">Guide to converting cell models to NeuroML and sharing them on Open Source Brain</td><td align="left" valign="top">Create, Validate, Simulate, Share</td></tr><tr style="background-color:#CBCCCD"><td align="left" valign="top"><styled-content style="color:#0A9DD9">Guide 9</styled-content></td><td align="left" valign="top">Conversion of Ray et al (<xref ref-type="bibr" rid="R81">Ray et al., 2020</xref>)</td><td align="left" valign="top">Create, Validate, Visualize, Simulate, Share</td></tr></tbody></table></table-wrap></floats-group></article>