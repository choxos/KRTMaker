<!DOCTYPE article
 PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">
<article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="preprint"><?all-math-mml yes?><?use-mml?><?origin ukpmcpa?><front><journal-meta><journal-id journal-id-type="nlm-ta">bioRxiv</journal-id><journal-title-group><journal-title>bioRxiv : the preprint server for biology</journal-title></journal-title-group><issn pub-type="ppub"/></journal-meta><article-meta><article-id pub-id-type="manuscript">EMS139884</article-id><article-id pub-id-type="doi">10.1101/2021.10.26.465846</article-id><article-id pub-id-type="archive">PPR412932</article-id><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group><subj-group subj-group-type="europepmc-category"><subject>Covid-19</subject></subj-group></article-categories><title-group><article-title>Deep autoencoder for interpretable tissue-adaptive deconvolution and cell-type-specific gene analysis</article-title></title-group><contrib-group><contrib contrib-type="author" equal-contrib="yes"><name><surname>Chen</surname><given-names>Yanshuo</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author" equal-contrib="yes"><name><surname>Wang</surname><given-names>Yixuan</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A3">3</xref></contrib><contrib contrib-type="author"><name><surname>Chen</surname><given-names>Yuelong</given-names></name><xref ref-type="aff" rid="A4">4</xref><xref ref-type="aff" rid="A5">5</xref></contrib><contrib contrib-type="author"><name><surname>Cheng</surname><given-names>Yuqi</given-names></name><xref ref-type="aff" rid="A6">6</xref></contrib><contrib contrib-type="author"><name><surname>Wei</surname><given-names>Yumeng</given-names></name><xref ref-type="aff" rid="A1">1</xref></contrib><contrib contrib-type="author"><name><surname>Li</surname><given-names>Yunxiang</given-names></name><xref ref-type="aff" rid="A1">1</xref></contrib><contrib contrib-type="author"><name><surname>Wang</surname><given-names>Jiuming</given-names></name><xref ref-type="aff" rid="A1">1</xref></contrib><contrib contrib-type="author"><name><surname>Wei</surname><given-names>Yingying</given-names></name><xref ref-type="aff" rid="A7">7</xref></contrib><contrib contrib-type="author"><name><surname>Chan</surname><given-names>Ting-Fung</given-names></name><xref ref-type="corresp" rid="CR1">†</xref><xref ref-type="aff" rid="A4">4</xref><xref ref-type="aff" rid="A5">5</xref></contrib><contrib contrib-type="author"><name><surname>Li</surname><given-names>Yu</given-names></name><xref ref-type="corresp" rid="CR1">†</xref><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A8">8</xref></contrib></contrib-group><aff id="A1"><label>1</label>Department of Computer Science and Engineering, CUHK, Hong Kong SAR, China</aff><aff id="A2"><label>2</label>School of Life Sciences, Tsinghua University, 100084 Beijing, China</aff><aff id="A3"><label>3</label>Department of Mathematics, HIT, 264209 Weihai, China</aff><aff id="A4"><label>4</label>School of Life Sciences, CUHK, Hong Kong SAR, China</aff><aff id="A5"><label>5</label>State Key Laboratory of Agrobiotechnology, The Chinese University of Hong Kong, Hong Kong SAR, China</aff><aff id="A6"><label>6</label>Weill Cornell Graduate School of Medical Sciences, Weill Cornell Medicine, New York, NY, 10065, USA</aff><aff id="A7"><label>7</label>Department of Statistics, The Chinese University of Hong Kong, Hong Kong SAR, China</aff><aff id="A8"><label>8</label>The CUHK Shenzhen Research Institute, Hi-Tech Park, Nanshan, Shenzhen, 518057, China</aff><author-notes><corresp id="CR1"><label>†</label>Corresponding Author. <email>liyu@cse.cuhk.edu.hk</email> and <email>tf.chan@cuhk.edu.hk</email></corresp></author-notes><pub-date pub-type="nihms-submitted"><day>22</day><month>11</month><year>2021</year></pub-date><pub-date pub-type="preprint"><day>01</day><month>11</month><year>2021</year></pub-date><permissions><ali:free_to_read/><license><ali:license_ref>https://creativecommons.org/licenses/by-nd/4.0/</ali:license_ref><license-p>This work is licensed under a <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by-nd/4.0/">CC BY-ND 4.0 International license</ext-link>.</license-p></license></permissions><abstract><p id="P1">Single-cell RNA-sequencing has become a powerful tool to study biologically significant characteristics at explicitly high resolution. However, its application on emerging data is currently limited by its intrinsic techniques. Here, we introduce Tissue-AdaPtive autoEncoder (TAPE), a deep learning method connecting bulk RNA-seq and single-cell RNA-seq to achieve precise deconvolution in a short time. By constructing an interpretable decoder and training under a unique scheme, TAPE can predict cell-type fractions and cell-type-specific gene expression tissue-adaptively. Compared with popular methods on several datasets, TAPE has a better overall performance and comparable accuracy at cell type level. Additionally, it is more robust among different cell types, faster, and sensitive to provide biologically meaningful predictions. Moreover, through the analysis of clinical data, TAPE shows its ability to predict cell-type-specific gene expression profiles with biological significance. We believe that TAPE will enable and accelerate the precise analysis of high-throughput clinical data in a wide range.</p></abstract></article-meta></front><body><sec id="S1" sec-type="intro"><label>1</label><title>Introduction</title><p id="P2">Bulk RNA sequencing (RNA-seq), a widely used high-throughput sequencing technique, provides a powerful tool to investigate transcriptome variation of biological events [<xref ref-type="bibr" rid="R1">1</xref>]. RNA-seq measures averaged expression levels, which gives a macro atlas of large samples from transcription levels without cell-specific information. However, it is also important to study the cellular composition and proportion of the sample in some cases, especially in a system with cellular development and proliferation (<italic>e.g.</italic>, cancer) [<xref ref-type="bibr" rid="R2">2</xref>, <xref ref-type="bibr" rid="R3">3</xref>].</p><p id="P3">Recently, single-cell RNA sequencing (scRNA-seq) has given unprecedented opportunities to identify and analyze the cell heterogeneity of complex tissues [<xref ref-type="bibr" rid="R4">4</xref>]. While scRNA-seq provides impressive resolution in cell granularity, it is still costly and vulnerable to noise, prohibiting sequencing the large-scale samples [<xref ref-type="bibr" rid="R5">5</xref>, <xref ref-type="bibr" rid="R6">6</xref>]. To overcome these obstacles, we may combine the abundant bulk RNA-seq data with the scRNA-seq data, performing cell-type deconvolution from the bulk RNA-seq samples with reference to a small scRNA-seq dataset.</p><p id="P4">Many single-cell profile-assisted algorithms have sprung up to dissect bulk RNA-seq data in recent years. The existing methods can be roughly divided into two categories: statistical learning-based and deep learning-based methods. Based on traditional regression models like non-negative least squares (NNLS) and support vector regression (SVR), a series of methods like CIBERSORT (CS) [<xref ref-type="bibr" rid="R7">7</xref>], MuSiC [<xref ref-type="bibr" rid="R8">8</xref>], CIBERSORTx (CSx) [<xref ref-type="bibr" rid="R9">9</xref>], Bisque [<xref ref-type="bibr" rid="R10">10</xref>], DWLS [<xref ref-type="bibr" rid="R11">11</xref>], RNA-Sieve [<xref ref-type="bibr" rid="R12">12</xref>], and BLADE [<xref ref-type="bibr" rid="R13">13</xref>] have been developed. All these tools need a pre-selected cell-type-specific gene expression profile (GEP) or allocating different weights to different genes based on statistic value (<italic>e.g.</italic>, mean and variance). In contrast, Scaden [<xref ref-type="bibr" rid="R14">14</xref>], a deep learning method, utilizes simulated bulk data for training without relying on a pre-defined GEP, and it can automatically extract features from GEP. Despite this progress, these methods ignore the running time cost, especially regarding the growing demands of dealing with big datasets. Moreover, except CSx, other methods, like Scaden, cannot predict the crucial cell-type-specific gene expression. This limitation leads to the poor interpretability of Scaden and other methods. Even for CSx, it requires multiple samples (&gt; 15) to purify expression [<xref ref-type="bibr" rid="R9">9</xref>].</p><p id="P5">To overcome these limitations, we propose an accurate, efficient, and interpretable deep-learning algorithm, Tissue-AdaPtive autoEncoder (TAPE), using deep neural networks (DNNs). The basic idea is that the encoder can learn higher-order latent representations and decoder can realize the interpretability of the output in the framework of autoencoder. Moreover, we introduce a new training scheme named adaptive training to optimize the GEP tissue-adaptively. Empirically, our method could achieve a better overall performance than previous state-of-the-art methods. When evaluated on cell-type level, TAPE has the best performance of MAE, and comparable CCC with relatively small variance on real datasets (<xref ref-type="supplementary-material" rid="SD1">Supplementary Table 8</xref>). To demonstrate the clinical application of TAPE, we use three datasets to show that TAPE is sensitive to biological changes. To be specific, TAPE is the only method that predicts the increasing tendency of monocytes-to-lymphocytes ratio (MLR) value which is suitable within the clinical report (0.29-0.88) [<xref ref-type="bibr" rid="R15">15</xref>] in the COVID-19 peripheral blood mononuclear cells (PBMC) dataset. Furthermore, TAPE can predict cell-type-specific GEP tissue-adaptively with the minimum input data size requirement, inferring cell-type-specific GEP for only one sample. Thus, TAPE can provide a valuable reference for biologists to more conveniently investigate differentially expressed genes (DEGs). More importantly, TAPE can predict DEGs even when these genes are not signature genes, which would probably fail with previous methods. We further combine TAPE with single-sample gene set enrichment analysis (ssGSEA) [<xref ref-type="bibr" rid="R16">16</xref>] on the virus-infected PBMC dataset to prove its capability of analyzing cross-viral functional differences among cells.</p><p id="P6">In this work, we build TAPE to precisely predict cellular fractions and cell-type-specific gene expression. The novelty lies in adopting the architecture of autoencoder as well as introducing a new training scheme at the adaptive stage. Compared with the state-of-art methods, TAPE shows a competitive performance and has almost the fastest processing speed on benchmarking datasets. In addition, TAPE predicts the cell-type-specific gene expression tissue-adaptively, allowing the dissection of bulk gene expression into different cell types and discovering potential differential gene expressions among cell types.</p></sec><sec id="S2" sec-type="results"><label>2</label><title>Results</title><sec id="S3"><label>2.1</label><title>Method overview</title><p id="P7">As shown in <xref ref-type="fig" rid="F1">Figure 1</xref>, the basic architecture of our method is a DNN-based autoencoder (AE), taking bulk GEPs as input and outputting cell-type proportions and cell-type-specific GEPs. There are three stages of using TAPE. The first stage is to create training data through simulation. Simulated bulk data is the sum of selected single-cell GEPs with the pre-defined cell fractions and the total cell numbers, where the single-cell profile and the real bulk profile should come from the same tissue. The next is the training stage. We want to train the model to output the proper cell fractions after the encoder and use the cell fractions to reconstruct the bulk profile. More than only using the reconstruction loss in the classic AE model, we try to minimize the mean absolute error (MAE) between the ground truth and the predicted cell fractions to make it supervised. When the model is required to predict the cell fractions and the cell-type-specific GEPs on the real bulk data, it enters the adaptive stage. In this process, inspired by the classic AE’s training process, we only use real bulk data to train the model in an unsupervised manner. More specifically, the model is iteratively greedily optimized on the decoder and the encoder. That is, it would not optimize the parameters of the encoder until it achieves the temporally best parameters on the decoder (see <xref ref-type="boxed-text" rid="BX1">Algorithm 1</xref>). The intuition is that training the encoder and decoder separately can directly lead to the adaption to the new coming bulk data. As for the decoder, we require it to reconstruct the real bulk data and maintain the concordance with itself, while the encoder is required to predict the proper cell fractions, which should be similar to the primary prediction after the training stage. Since we require the decoder to output the reconstructed bulk gene expression based on the cell fractions, the parameters of the decoder are the cell-type-specific GEPs, so we could directly output those parameters as the GEPs after the adaptive stage. See more details in the <xref ref-type="sec" rid="S12">Methods</xref> part.</p></sec><sec id="S4"><label>2.2</label><title>Performance evaluation on pseudo-bulk data</title><p id="P8">Since a real bulk dataset with its corresponding cell type fractions assessed by traditional experimental methods (<italic>e.g.</italic>, flow cytometry) is rare, and it is hard to analyze how the batch effect would affect deconvolution performance, it is necessary to conduct a pseudo-bulk test for an initial estimation. The pseudo-bulk data are generated <italic>in silico</italic> from single-cell GEPs with ground truth (pre-defined cell type proportions). That is, pseudo-bulk data are the summation of many single-cell profiles. To make this pseudo-bulk test as difficult as the real bulk test instead of trivial linear regression task, we added Gaussian noise [<xref ref-type="bibr" rid="R17">17</xref>] (0.01 times random value generated from a Gaussian distribution with gene expression mean and variance for each gene) and randomly masked 20% genes for each pseudo-bulk sample. The single-cell profiles are from <italic>Tabular Muris</italic> [<xref ref-type="bibr" rid="R18">18</xref>], a cell atlas for mouse with two different sequencing techniques, 10X-seq (UMI-based method) and Smart-seq (counts-based method). This cell atlas is a good resource for us to simulate the batch effect. Thus, in the following experiments, we used one protocol’s single-cell data as the reference to predict another protocol’s pseudo-bulk data. Here we only selected three tissues/organs from <italic>Tabular Muris</italic> because they have the largest number of shared cell types across different protocols in all the tissues/organs. Specifically, “Limb Muscle” has 6 cell types, “Marrow” has 7 cell types, and “Lung” has 9 cell types. To fully exploit the advantages of pseudo-bulk data, we defined three deconvolution scenarios: “normal”, “rare”, and “similar”. For the “normal” scenario, all the cell type proportions are randomly generated, while in the “rare” scenario, some cell types’ fractions are set below 3%. To be specific, skeletal muscle satellite cells and endothelial cells are set to be rare cell types in “Limb Muscle”; monocyte and hematopoietic precursor cells are set to be rare cell types in “Marrow”; T cells, natural killer cells and ciliated columnar cells of tracheobronchial trees are set to be rare cell types in “Lung”. In the “similar” task, we only used “Marrow” because there are two similar subtypes of B cell in it: “late-pro B cell” and “immature B cell”. Here, we expect that if we delete one kind of B cell from the single-cell reference, the predicted fraction of the other type of B cell would still be similar to the summation of the two kinds of B cell. That is, we expect the method could correctly transfer the weight of one kind of B cell to another. Performance was evaluated by MAE and Lin’s concordance correlation coefficient (CCC) [<xref ref-type="bibr" rid="R19">19</xref>] between the prediction and the ground truth for each cell type. More details of the simulation process, dataset, and metrics for evaluation are in the <xref ref-type="sec" rid="S12">Methods</xref> section.</p><p id="P9">In the “normal” scenario, we find that DWLS achieves the best performance on both metrics (<xref ref-type="fig" rid="F2">Figure 2c</xref>), and TAPE is comparable to DWLS. We also notice that deep learning methods like Scaden and TAPE are more robust than statistical methods, which lead to the smallest performance variance among all the cell types. In the “rare” scenario, we only display the metrics for pre-defined rare cell types. The results show that all the methods can not result in a satisfying concordance between prediction and ground truth in this scenario (<xref ref-type="fig" rid="F2">Figure 2c</xref>). Interestingly, although the CCC values are pretty low with those methods, their MAEs are comparable to those in the “normal” scenario, which indicates that those methods can predict a value near ground truth but are not correlated with each other. Though TAPE is not the best algorithm in this scenario, its performance is comparable to DWLS, which focuses on rare cell types. As for the “similar” scenario, we investigate the performance on two kinds of B cells in the “normal” scenario and what would happen if we delete one cell type from the reference. The results show that TAPE is the most robust algorithm and can distinguish cell subtypes when both kinds of the B cell are in the reference (<xref ref-type="fig" rid="F2">Figure 2c</xref>, “similar distinguishment”). Moreover, TAPE can transfer one B cell’s proportion to another if this kind of B cell is missing from the reference (<xref ref-type="fig" rid="F2">Figure 2c</xref>, “similar transferring”). Meanwhile, we find that deep learning methods are robust for the cross-protocol prediction, while the performance of some statistical methods will drop if the reference and pseudo-bulk data type (UMI to counts or counts to UMI) are exchanged (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 1</xref>,<xref ref-type="supplementary-material" rid="SD1">2</xref>). When we compare the performance among algorithms for each tissue/organ, we find that TAPE outperforms the other methods for “Limb Muscle” and “Marrow”. Nevertheless, we notice that the performances of deep learning methods such as TAPE and Scaden drop for “Lung” as compared to MuSiC and Bisque. One potential reason is that given a fixed sample size, as traditional statistical methods requires fewer parameters, they perform better when the number of cell types increases compared to deep learning methods.</p></sec><sec id="S5"><label>2.3</label><title>Accurate and stable deconvolution on real bulk data</title><p id="P10">Since previous studies have shown that cell type proportions in single-cell data are not concordant with bulk samples [<xref ref-type="bibr" rid="R9">9</xref>], we further evaluated TAPE and the other representative deconvolution methods on real tissue expression datasets with the corresponding ground truth obtained from traditional experimental methods (<italic>e.g.</italic> flow cytometry). First, we assessed deconvolution performance on two human PBMC bulk RNA-seq datasets, SDY67 [<xref ref-type="bibr" rid="R20">20</xref>] and the S13 cohort from <italic>Monaco et al.</italic> [<xref ref-type="bibr" rid="R21">21</xref>]. Another PBMC microarray dataset was obtained from <italic>Newman et al.</italic> [<xref ref-type="bibr" rid="R7">7</xref>]. All the ground truth of PBMC datasets was measured by flow cytometry. Second, we deconvolved the ROSMAP human brain RNA-seq dataset [<xref ref-type="bibr" rid="R22">22</xref>] with both human brain single-cell RNA-seq and mouse brain single-cell RNA-seq as references. Through immunohistochemistry analysis, the cell-type fractions of 41 samples of the ROSMAP dataset were recently given [<xref ref-type="bibr" rid="R23">23</xref>]. Detailed deconvolution software comparison and settings are in the <xref ref-type="sec" rid="S12">Methods</xref>.</p><p id="P11">Among all the real datasets considered, TAPE achieves the best MAE and the smallest variance (<xref ref-type="fig" rid="F2">Figure 2d</xref>). For the CCC metric, although other methods like CIBERSORTx and Scaden surpass TAPE, TAPE still shows comparable performance with a relative small variance, indicating that the prediction performance of TAPE is similar for all the cell types and hence robust. To be specific, for ROSMAP_human dataset, the median CCC of TAPE is the best (0.140). While Scaden achieves the best median CCC of 0.326 and 0.202 on SDY67 dataset and ROSMAP_mouse dataset, and CIBERSORTx achieves the best median CCC on Monaco’s PBMC dataset and microarray PBMC dataset. Though TAPE’s median CCC on these four datasets is not the highest, the values are comparable with the difference smaller than 0.07. Considering the interquartile range, we can see that the performance of DWLS is close to the best on SDY67 dataset and ROSMAP_mouse dataset. Detailed comparison results are available in the <xref ref-type="supplementary-material" rid="SD1">Supplementary Table 8</xref>. In the benchmarking procedure, we also considered different scenarios as the “similar” scenario, the “missing cell types” scenario and the “unknown cell type” scenario. For the “similar” scenario, we investigated TAPE’s performance on distinguishing similar cell types (CD4 T cell and CD8 T cell) in all the three PBMC datasets (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 3</xref>). The results show that TAPE is the best algorithm and can distinguish them well. Moreover, we test all the methods’ ability of deconvolving immune cell subtypes. With 13 defined cell subtypes (<xref ref-type="supplementary-material" rid="SD1">Supplementary Table 1</xref>), all the methods can not achieve satisfying results (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 4</xref>, median CCC &lt; 0.1), which clearly shows the common limitation of current methods. For the “missing cell types” scenario, the ROSMAP dataset using mouse brain as reference is a good demonstration. The single-cell dataset of mouse brain has more cell types than the measured bulk ROSMAP dataset (<xref ref-type="fig" rid="F2">Figure 2a</xref>). So, we directly filtered out extra cell types predicted by these methods and re-scaled the predicted fraction to make the summation is 1. For the “unknown” cell type, it is dependent on the single-cell data. If researchers can not label some cells with proper cell types, they can label them as “unknown” cell type, and then this “unknown” fraction will be considered accordingly when deconvolving bulk data. See more details in the <xref ref-type="sec" rid="S12">Methods</xref> part.</p><p id="P12">Furthermore, since TAPE and Scaden are both DNN-based methods, we made a head-to-head comparison between them using different random seeds to evaluate TAPE’s stability. In practice, the original Scaden program provided by its authors has a very slow simulation speed, so we implemented a PyTorch version of Scaden and used it to test how the random seeds affect deep methods. In <xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 6</xref>, the two colors stand for the different methods, and the two coordinates of each dot represent overall MAE and CCC for all cell types respectively. As shown in the figure, the dots of TAPE occupy the upper-right of the figures with low variance, showing TAPE’s higher accuracy and stability than Scaden.</p></sec><sec id="S6"><label>2.4</label><title>Efficient deconvolution on large cohort RNA-seq data</title><p id="P13">Besides accuracy and stability, the methods’ scalability is also important in practice. Therefore, we evaluated the time consumption of the representative methods mentioned above on the same pseudo-bulk samples from tabular-formed sequencing data to the prediction of cell type fractions (including the step of constructing signature matrix or training data if needed). We ran TAPE, Scaden, RNA-Sieve, DWLS, MuSiC and Bisque on the same workstation with Intel(R) Xeon(R) Gold 6226 CPU @ 2.70GHz, CentOS Linux release 7.9.2009 (Core), Nvidia 3090 GPU. CSx was tested on the web-based application. Detailed implementations are in the <xref ref-type="sec" rid="S12">Methods</xref>.</p><p id="P14">Among all the methods tested (<xref ref-type="fig" rid="F2">Figure 2b</xref>), Bisque is the fastest algorithm, and it can deconvolve 800 samples in 15 seconds. For TAPE, it takes about 120 seconds in total to construct the training data and train the deep learning model for 5,000 iterations. But its inference speed is very fast and its time complexity is <italic>O</italic>(<italic>n</italic>) with a very small coefficient due to the inherent advantage of using deep learning. Thus, TAPE’s time consumption would not increase markedly with a larger cohort size. Besides the time complexity, TAPE only needs about 1900MB GPU memory during the training stage. When deconvolving new bulk samples, the memory consumption will increase along with the number of samples, but this increment is really small in practice. Compared with Scaden, another deep learning method, TAPE is faster because of its highly optimized training data simulation procedure and a smaller model size. Of note, the deconvolution step of DWLS is not slow, but the step of constructing signature matrix using MAST[<xref ref-type="bibr" rid="R50">50</xref>] is really time- and memory-consuming. As for CIBERSORTx, its slow prediction speed is not justified because its speed is limited by the web server. We would expect a much better performance if users can acquire the source program from the developers. Generally, within the test settings, algorithms that do not require complicated preprocessing steps (Bisque and MuSiC) achieve a better performance on speed.</p></sec><sec id="S7"><label>2.5</label><title>Biologically significant deconvolution on clinical RNA-seq data</title><p id="P15">We further evaluated whether TAPE could predict cell-type proportions consistent with prior clinical knowledge. Here, we selected three datasets with clinical information or related prior knowledge: 1. the ROSMAP dataset [<xref ref-type="bibr" rid="R24">24</xref>] that is obtained from patients with Alzheimer’s Disease (AD); 2. the COVID-19 PBMC dataset [<xref ref-type="bibr" rid="R25">25</xref>] containing clinical information about different severity of COVID-19 (mild, moderate, and serious) and different stages of patients (treatment stage, convalescence stage, and rehabilitation stage); 3. the cultured pancreatic islet dataset [<xref ref-type="bibr" rid="R26">26</xref>] which has RNA-seq data of islets from three different conditions (normal, SARS-CoV-2 infected, and SARS-CoV-2 infected tissue with <italic>Remdesivir</italic> treatment). Detailed information on those datasets is in the <xref ref-type="sec" rid="S12">Methods</xref>.</p><p id="P16">For the ROSMAP dataset, we used the human brain single-cell profile from <italic>Darmanis et al.</italic> [<xref ref-type="bibr" rid="R27">27</xref>] as a reference. As we know, neuron cell loss is a significant symptom in patients with AD. In the ROSMAP dataset, the <italic>Braak</italic> stage is given as a measurement of the severity of AD [<xref ref-type="bibr" rid="R28">28</xref>]. So we expected neuron fraction would decrease with the development of AD. Additionally, we investigated each sample’s <italic>Braak</italic> stage to the estimated fraction of microglia whose proportion will increase with AD severity and decrease at stage 6 as shown by previous studies [<xref ref-type="bibr" rid="R29">29</xref>, <xref ref-type="bibr" rid="R30">30</xref>]. The results (<xref ref-type="fig" rid="F3">Figure 3a, 3b</xref>) show that TAPE can predict the tendency of neuron loss and have an accurate prediction of microglia activation and deactivation among 532 samples with clinical information. Moreover, according to the immunohistochemistry analysis of 41 AD patients from a previous study, the proportion of neurons or microglia cells ranged from 0.32-0.55 and 0.06-0.12, respectively [<xref ref-type="bibr" rid="R23">23</xref>]. Impressively, if we accept the assumption that the cell type proportions’ ranges of the 41 patients are the same as those of the 532 patients, only TAPE could predict proportions in this range, which shows the remarkable accuracy of TAPE’s prediction.</p><p id="P17">Next, we used the PBMC data8k [<xref ref-type="bibr" rid="R31">31</xref>] dataset as the reference to deconvolve the COVID-19 PBMC dataset. According to existing clinical observations and research, metrics like neutrophil-to-lymphocyte ratio (NLR) and monocyte-to-lymphocyte ratio (MLR) are closely associated with the progression of the COVID-19, thus which are used to indicate its severity clinically. [<xref ref-type="bibr" rid="R32">32</xref>, <xref ref-type="bibr" rid="R33">33</xref>]. In practice, patients with the higher NLR or MLR show a more serious symptom of COVID-19. Since the data we used are obtained from PBMC and do not contain neutrophils, we only tested the correlation between MLR and the severity of COVID-19 patients. The MLR is calculated by the fraction of monocytes divided by the sum of fractions of CD4 T cell, CD8 T cell and B cell. We used the estimated MLR value predicted from different models to compare the tendency between different severity (<xref ref-type="fig" rid="F3">Figure 3c</xref>). Although Scaden, CIBERSORTx, DWLS and TAPE predict an increasing tendency correctly, after hypothesis tests, only TAPE predicts the increasing tendency of MLR value with statistical significance, and the value range is suitable for the clinical report (0.29-0.88) [<xref ref-type="bibr" rid="R15">15</xref>].</p><p id="P18">To deconvolve the cultured islet dataset, we selected the endocrine cells (alpha, beta, gamma, delta, and epsilon cells) from <italic>Baron et al.</italic> [<xref ref-type="bibr" rid="R34">34</xref>] to generate the training data because pancreatic islet only contains endocrine cells. Since the infection of SARS-CoV-2 usually causes metabolic dysregulation and <italic>Mellitus</italic> [<xref ref-type="bibr" rid="R26">26</xref>], we expected a decrease in beta cell fraction in COVID-19 patients. Here, we used the sequencing data of <italic>in vitro</italic> cultured islets to deconvolve and expected TAPE to predict the decrease of beta cell proportion after infection. Furthermore, the proportion of beta cell should restore after treatment with <italic>Remdesivir</italic>, a very famous antiviral medication used to treat COVID-19 (<xref ref-type="fig" rid="F3">Figure 3d</xref>). Though Scaden and TAPE can predict both beta cell loss and restoration in this experiment among the three conditions, after one-sided t-test, only TAPE’s predictions show a statistical significance. The accurate deconvolution results of these controlled experiments demonstrate that TAPE is sensitive to the biological changes in the bulk RNA-seq data and can produce biologically significant results, which are consistent with the previous research and reports. All the clinical deconvolution results show that TAPE’s prediction is stable, with potential clinical applications for disease early screening and treatment outcome prediction.</p></sec><sec id="S8"><label>2.6</label><title>Tissue-adaptive cell-type-specific gene expression prediction</title><p id="P19">More than only predicting cell fractions of bulk RNA-seq data like the existing deep-learning method, TAPE could also predict the cell-type-specific gene expression tissue-adaptively. That is, TAPE only needs simulated data from healthy samples to train, but it can also predict the cell-type-specific gene expression in pathological conditions if the corresponding bulk RNA-seq data is given. This feature enables TAPE to dissect bulk gene expression into different cell types and discover some potentially differentially expressed genes in different cell types.</p><p id="P20">We began with testing the correctness of the predicted cell-type-specific GEPs. To test this, we measured the concordance between the predicted gene expression value of each cell type and the original gene expression value obtained from single-cell RNA-seq (<xref ref-type="fig" rid="F4">Fig 4a,b</xref>). Here, the PBMC bulk data are from <italic>Monoco et al.</italic> [<xref ref-type="bibr" rid="R21">21</xref>], while the single-cell data from the data8k dataset from the 10X website [<xref ref-type="bibr" rid="R31">31</xref>]. Since we transformed the input RNA-seq data into 0-1 values using Log<sub>2</sub> and MinMaxScaler() in the training stage (see more in the Methods), the sums of gene expression values grouped by cell types are also transformed in this way to compare with the predicted relative gene expression value. Note that only gene expression in monocytes does not have a good concordance (<xref ref-type="fig" rid="F4">Figure 4b</xref>). After testing TAPE on a simulated dataset with a single-cell profile as ground truth (<xref ref-type="fig" rid="F4">Figure 4a</xref>) and considering the good concordance in other five cell types, we draw the conclusion that this distortion is caused by the individual difference. The concordance shown in the figures proves that TAPE predicts the signature matrix correctly and establishes the base for further gene expression analysis. In contrast, this disconcordance in monocytes also shows the adaptiveness of our method.</p><p id="P21">Besides the concordance, we also expect that TAPE can assign the gene expression value in bulk data to different values at a cell-type level. To test this, we used the ROSMAP RNA-seq dataset [<xref ref-type="bibr" rid="R24">24</xref>] and human brain single-cell profile [<xref ref-type="bibr" rid="R27">27</xref>] to perform adaptive training in the “overall” mode. The deconvolution result (<xref ref-type="fig" rid="F4">Fig 4d</xref>) of cell-type-specific GEPs shows that TAPE indeed predicted the differentially expressed genes in different cell types. However, since TAPE takes single-cell gene expression as input, these differences may be inherent from single-cell data. So, we compared the original signature matrix from single-cell data to the adapted signature matrix using the heatmap (<xref ref-type="fig" rid="F4">Fig 4c</xref>). We further investigated whether TAPE just inherits the data distribution from bulk RNA-seq data and whether the different distributions of different cell types are randomly assigned. We selected the <italic>NRGN</italic> gene to study it. Since the <italic>NRGN</italic> gene has been shown to be closely associated with AD [<xref ref-type="bibr" rid="R35">35</xref>], we expected it to have a high gene expression level in neurons and other nerve cells. Interestingly, for the predicted values (<xref ref-type="fig" rid="F4">Fig 4g</xref>, blue columns), the gene expression value in Endothelial is low compared with the high-level gene expression values in ExNeurons, InNeurons, and Astrocytes. In contrast, for the healthy single-cell profiles (<xref ref-type="fig" rid="F4">Fig 4g</xref>, red columns), expression values of <italic>NRGN</italic> in these four cell types don’t have such big differences. Thus, TAPE can successfully predict a high expression value of <italic>NRGN</italic> in neurons while a low expression value of <italic>NRGN</italic> in endothelial cells. More specifically, this shows that the prediction of cell-type-specific GEPs is a product of two-sided information from both bulk and single-cell profiles, not randomly assigned or guessed. In this test, we also used the “group” mode of CIBERSORTx to predict the expression value of <italic>NRGN</italic> in different cell types. The results show that although CIBERSORTx can predict a high expression value of <italic>NRGN</italic> in InNeurons, it can not predict an expected high value in ExNeurons.</p></sec><sec id="S9"><label>2.7</label><title>Cell-type-specific differentially gene expression profiling at high-resolution</title><p id="P22">Since TAPE has shown its ability to predict cell-type-specific GEPs correctly and selectively given a group of bulk samples, we continued to use TAPE to predict cell-type-specific GEP per sample at high-resolution. To test TAPE’s capability under “high-resolution” mode, we synthesized a series of pseudo-bulk samples with known differentially expressed genes (DEGs) (<xref ref-type="fig" rid="F4">Figure 4e</xref>). Following the settings in CIBERSORTx [<xref ref-type="bibr" rid="R9">9</xref>], we selected 100 cells across four cell types (CD8 T cell, Natural Killer (NK) cell, B cell, and Monocyte) from PBMC single-cell data and another 10 cells from human brain single-cell dataset as noise to compose the pseudo-bulk data. Then we randomly selected 100 genes among 10,000 genes in CD8 T cells as up-regulated genes to adjust their expression. Each pseudo-bulk dataset contains 50 pseudo-bulk samples and half of them are composed of up-regulated CD8 T cells. The cell proportion of CD8 T cells in pseudo-bulk data ranges from 5% to 30%, and the foldchange of up-regulated genes ranges from 1.5 to 5. In total, we created a series of pseudo-bulk datasets with foldchange gradients and cell proportion gradients. After obtaining the GEP of CD8 T cells, we used a two-sided t-test to detect DEGs (<italic>p</italic> &lt; 0.05). So, this task is essentially a binary classification task, and we naturally chose area under receiver operating characteristic curve (AUROC) as the criterion. The results show that (<xref ref-type="fig" rid="F4">Figure 4f</xref>), TAPE can successfully predict cell-type-specific DEGs correctly (with good sensitivity) and selectively (with good specificity) while CIBERSORTx almost fails on this task. The overall trend is that algorithms can easily recognize DEGs in one cell type if the proportion of this cell type or the foldchange of DEGs is high. Interestingly, using DEGs in bulk as the reference, we can see that TAPE can even predict DEGs not shown up in bulk samples but in CD8 T cells (the maximum AUROC of TAPE is higher than the maximum AUROC of bulk samples in <xref ref-type="fig" rid="F4">Figure 4e,f</xref>). In the original article [<xref ref-type="bibr" rid="R9">9</xref>], CIBERSORTx has also demonstrated its great ability in DEGs prediction, the reason why it failed in this task is that CIBERSORTx usually focuses on signature genes which have bigger statistical power and are easily detectable if they are differentially expressed, but in this task, we randomly selected 100 genes which are probably not signature genes; therefore, it is hard for CIBERSORTx to infer the 100 DEGs properly. In contrast, TAPE has shown its ability in predicting DEGs even when they are not signature genes, which means TAPE has a broader application potential than CIBERSORTx. Of note, the recently published method, BLADE [<xref ref-type="bibr" rid="R13">13</xref>], can do this task too, but we did not benchmark BLADE in our experiments, considering its high time complexity.</p><p id="P23">In addition to the normal scenario where there are only 100 randomly selected DEGs with four non-similar cell types in simulated bulk samples, we designed comprehensive tests with four scenarios to benchmark TAPE and CIBERSORTx’s performances. The four scenarios are: “randomly selected DEGs without similar cell type”, “randomly selected DEGs with similar cell type”, “signature genes as DEGs without similar cell type”, and “signature genes as DEGs with similar cell type”. In detail, we set up a series of simulated bulk data to detect DEGs as we mentioned before. However, we used similar cell types or changed the number of randomly selected genes, or used signature genes as DEGs in this test. Specifically, for the “similar” scenario, we used similar cell types like CD4 T cells and CD8 T cells together with two other cell types, namely monocytes and NK cells. In the scenarios where DEGs are randomly selected, the number of DEGs ranges from 100 to 5,000. For the “signature genes as DEGs” scenario, we up-regulated the signature genes of CD8 T cells produced by CIBERSORTx in the simulated bulk samples. From the results (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 10</xref>), we can have four conclusions: 1. TAPE’s predictive power is better than CIBERSORTx when the randomly selected DEGs are less than 1,000; 2. both methods can achieve good performance when the DEGs are signature genes and there are not any similar cell types; 3. both methods can not distinguish DEGs from CD8 T cell rather than CD4 T cell if the DEGs are randomly selected; 4. CIBERSORTx is better than TAPE if the DEGs are signature genes and there exist similar cell types. Interestingly, from points 2 and 4, it seems that TAPE can learn the signature genes between distinguished cell types but not exactly enough to distinguish similar cell types. In all, considering all the scenarios, we display that each method has its own advantages and disadvantages and it can be seen as a guide for researchers to decide which method to use.</p><p id="P24">To further evaluate each method’s “high-resolution” mode in the real-life scenario, we take HIV infection as an example where the researchers want to determine which cell type differentially express a gene between two conditions. In this case, HIV-infected patients can be classified into two different classes based on the existence of broadly neutralizing antibodies (BNab). Recently, a study about the development mechanism of BNab in HIV patients used bulk RNA-seq and population sorted RNA-seq to investigate the most differentially expressed gene [<xref ref-type="bibr" rid="R36">36</xref>]. In this study, researchers initially found about 270 DEGs between two conditions using DESeq2 [<xref ref-type="bibr" rid="R37">37</xref>]. After filtering non-related DEGs by controlling non-related information like age, sex, country, and viral load, researchers made the conclusion that <italic>RAB11FIP5</italic> is the only differentially expressed gene in bulk samples. Then they used qPCR to find that <italic>RAB11FIP5</italic> is differentially expressed in NK cells rather than other cell types and leads to the development of BNab. The steps they used to find the relation between <italic>RAB11FIP5</italic> and NK could be replaced with the cell-type-specific gene expression analysis in the “high-resolution” mode. So, we used TAPE and CIBERSORTx to tissue-adaptively deconvolve the HIV PBMC data [<xref ref-type="bibr" rid="R36">36</xref>]. To avoid batch effects and harmful effects caused by the low-quality single-cell data, we combined data6k, data8k, and data10k PBMC single-cell data [<xref ref-type="bibr" rid="R31">31</xref>, <xref ref-type="bibr" rid="R38">38</xref>, <xref ref-type="bibr" rid="R39">39</xref>] as the reference. After obtaining the predicted GEPs for each sample at high resolution, we calculated the adjusted <italic>p</italic>-value and foldchange for each cell type (<xref ref-type="fig" rid="F4">Fig 4h</xref>). The results show that both TAPE and CIBERSORTx successfully predict that <italic>RAB11FIP5</italic> is differentially expressed in NK cells. Considering that there are about 270 pseudo-DEGs in bulk samples, we further validated whether TAPE can distinguish them as pseudo-DEGs by checking the DEGs in each cell type. The results show that TAPE only predicts NOP2 and <italic>RAB11FIP5</italic> as DEGs in NK cell and no DEGs for other cell types (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 8</xref>). We can see that the prediction is not perfect, but our method can correctly predict that NK cells have DEGs rather than other cell types and reduce the number of possible DEGs (including pseudo-DEGs if there is not any filter) from 270 to 2. All the results displayed prove that our methods can be applied to the real-life scenario and accelerate biological discoveries by identifying which cell type has DEGs and reducing the number of possible DEGs.</p></sec><sec id="S10"><label>2.8</label><title>Functional investigation across various types of virus infection</title><p id="P25">To further prove the versatility of TAPE, we applied TAPE on the PBMC RNA-seq data of three kinds of virus-infected samples, including the SARS-CoV-2 infection, which is the severe acute respiratory syndrome coronavirus 2 that has been sweeping the world, hepatitis C virus (HCV) infection, which caused 290,000 death in 2019, and human immunodeficiency virus (HIV) infection, which is the cause of acquired immunodeficiency syndrome (AIDS). These three virus infections will damage the host’s immune system but lead to different syndromes. Knowing the specific function in specific cells could help us in both the treatment and prevention of these infections.</p><p id="P26">Besides the differential expressed genes, we also investigated the functions of each cell type by incorporating cell-specific GEPs and ssGSEA [<xref ref-type="bibr" rid="R16">16</xref>]. Since the ssGSEA algorithm only needs the gene rank which can be provided by our method. We could predict the activities of each function pathway for each sample without positive or negative controls. Considering function pathways that is significantly (<italic>p<sub>adj</sub> &lt;</italic> 0.05) activated in at least one sample, we found the samples that were infected by different viruses clustered (Pearson for distance, ward.D2 for cluster) together (<xref ref-type="fig" rid="F5">Figure 5a</xref>). Besides functional pathways that are differently activated at the population level, there also existed a diversity of activated functional pathways at the sample level, especially in dendritic cells (<xref ref-type="fig" rid="F5">Figure 5a</xref>).</p><p id="P27">Compared SARS-CoV-2 infected samples with the other two virus-infected samples, functional pathways had more potential to activate than inactivate . Also, the HIV-infected samples are similar to the HCV-infected ones, showing the difference between the SARS-CoV-2 infection and other ones. Besides, subsets of samples within each virus-infected sample could also be identified, presenting the heterogeneous samples within the same virus infection.</p><p id="P28">Even the activities of the significant function pathways show differences among the three virus infections. The proportions of common significant enriched pathways were large in different cell types (<xref ref-type="fig" rid="F5">Figure 5b, 5c, 5d</xref>). More significant enriched function pathways were observed in SARS-CoV-2 infected samples, than in the other two virus-infection samples. In the B cells, HIV-infected samples shared 99% of significantly enriched pathways with HCV-indected samples, while SARS-CoV-2 occupied more than 40% of the significantly enriched pathways privately (<xref ref-type="fig" rid="F5">Figure 5b</xref>). These SARS-CoV-2 private enriched pathways contributed to the identification of the subset samples (<xref ref-type="fig" rid="F5">Figure 5e</xref>).</p><p id="P29">Of note, Monocytes and NK cells contributed to distinguishing these three kinds of virus-infected samples (<xref ref-type="fig" rid="F5">Figure 5f, 5g</xref>). We noticed that the number of common enriched pathways in these two cell types is much larger than the numbers of mono-enriched or di-enriched pathways, indicating the activation differences, rather than functional differences, make the various three virus-infection samples.</p><p id="P30">Combining with prior knowledge, some pathways we found are highly relevant to these diseases. For instance, most of the commonly activated pathways within the three infections in the B cells are general immune response pathways, including BIOCARTA_IL2_PATHWAY, BIOCARTA_IL4_PATHWAY, BIOCARTA_IL6_PATHWAY, and BIOCARTA_IL7_PATHWAY. Interestingly, out of these pathways, BIOCARTA_MAPK_PATHWAY, BIOCARTA_LONGEVITY_PATHWAY, and BIOCARTA_CELLCYCLE_PATHWAY have already been linked to SARS-CoV-2 infections. BIOCARTA_MAPK_PATHWAY (MAPKinase Signaling Pathway) activation has been proved to cause an overwhelming inflammatory response in SARS-CoV-2 infections [<xref ref-type="bibr" rid="R40">40</xref>]. The blockage of the BIOCARTA_LONGEVITY_PATHWAY (The IGF-1 Receptor and Longevity) has also been reported to mitigate lung injury and decrease the risk of death in patients with SARS-CoV-2 [<xref ref-type="bibr" rid="R41">41</xref>]. Recent studies also found the coronavirus would induce the cell cycle arrest, which did not exist in other kinds of virus infection, but was discovered by our algorithm [<xref ref-type="bibr" rid="R42">42</xref>]. Generally, these examples show that the combination of TAPE and ssGSEA can indeed discover some significant pathways as clues for further experimental validation.</p></sec></sec><sec id="S11" sec-type="discussion"><label>3</label><title>Discussion</title><p id="P31">We develop TAPE as a novel deep-learning algorithm for digital tissue dissection. Key features distinguishing it from previous methods include 1) highly accurate and sensitive deconvolution to capture the biologically significant changes in clinical data, and 2) tissue-adaptive cell-type-specific gene expression profile prediction to identify potential gene expression differences at the cell-type level. TAPE benefits from the architecture of the autoencoder and the unique training method in the adaptive stage. The encoder-decoder architecture enables an interpretable decoder to answer why the encoder makes such predictions. More interestingly, the decoder is a natural cell-type-specific signature matrix that can be learned after the training stage and then adapted to the bulk data after the adaptive stage. Notice that the special training process of TAPE makes it fundamentally different from other methods, which only predict cell fractions or need large cohort bulk RNA-seq data to impute cell-type-specific GEPs or are hard to infer insignificant gene expression in cell-type-specific GEPs. Another advantage of TAPE is its super fast inference when deconvolving a large number of samples. Running on a commonly-used graphics processing unit (GPU), TAPE has comparable speed to the fastest statistical method and even faster than the previous deep-learning method.</p><p id="P32">Although we have shown that TAPE’s deconvolution performance is pretty good in many scenarios, we find that it would perform poorly in the “rare” scenario since it shows a low CCC value. But, in the benchmarking process (<xref ref-type="fig" rid="F2">Figure 2c</xref>), the results show that other tools’ performance also drops in the “rare” scenario. This phenomenon indicates the “rare” scenario has not been solved well by current methods and needs to be addressed in future works. In the scenario of clinical data prediction, TAPE is capable of predicting the ratio change for most cell types in clinical cases stably with statistical power, whose results are consistent with the previous related clinical studies [<xref ref-type="bibr" rid="R15">15</xref>, <xref ref-type="bibr" rid="R26">26</xref>, <xref ref-type="bibr" rid="R29">29</xref>, <xref ref-type="bibr" rid="R30">30</xref>, <xref ref-type="bibr" rid="R32">32</xref>, <xref ref-type="bibr" rid="R33">33</xref>]. During real-life usage, to make the study more focused, we recommend that users select the cell types they want to analyze further from the TAPE output based on the existing experimental evidence.</p><p id="P33">As is previously highlighted, TAPE can predict cell-type-specific GEPs tissue-adaptively. But admittedly, it can be improved further. Firstly, when we study the correlation at the gene level using “overall” mode (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 7</xref>), about 30% of the predicted genes have the negative correlation. Although our method’s performance (median CCC 0.2127) is better than CSx (median CCC 0.0627), there is still large room for improvement. Secondly, when we use it to predict DEGs, it is hard for TAPE to predict a proper foldchange, this is partially caused by the normalization method since the gene value is normalized between 0 and 1. However, this phenomenon can also be observed in CIBERSORTx (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 8</xref>), which indicates the information loss between bulk samples and inferred cell-type-specific GEP is hard to be reconstructed. In our tests, considering the fact that the predicted foldchange is not proper, we only uses t-test to find DEGs with <italic>p &lt;</italic> 0.05 and we can obtain plausible DEG results from this criterion. Thirdly, we notice that both CIBERSORTx and our method can not distinguish DEGs from similar cell subtypes correctly if the DEGs are not signature genes (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 9</xref>) which means that their resolution is still limited. But CIBERSORTx has displayed its advantages in distinguishing signature DEGs from similar cell types because of the incorporation of the signature matrix (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 10</xref>). Though our method cannot precisely predict DEGs from cell subtypes or have better performance than CIBERSORTx if all signature genes are DEGs which probably does not occur in the real world, it still reduces the potential candidates by excluding irrelated cell types. So, our method is still useful and can be applied in real-life scenarios to accelerate biological research.</p><p id="P34">Benefited from the predicted cell-type-specific GEPs in the “high-resolution” mode, we could identify specific activated functional pathways in each cell type for each sample, which could be another potential advantage of our algorithm. According to the results above, we could identify cell types involved in the dysfunctional pathways. Combining ssGSEA and TAPE could help identify the specific dysfunctional pathways in particular cell types using the bulk RNA-seq data, which will essentially make use of previous population transcriptome datasets.</p><p id="P35">In summary, TAPE represents a widely applicable framework for deciphering the heterogeneity of tissues at a cell-type level, and provides a practical training scheme for supervised autoencoder to perform domain adaptation. Considering the fact that it can be integrated with other tools seamlessly, we believe that TAPE will be helpful to investigate the connection between the single-cell data and the abundant bulk data.</p></sec><sec id="S12" sec-type="methods"><label>4</label><title>Methods</title><sec id="S13"><label>4.1</label><title>Datasets and preprocessing</title><p id="P36">In this work, we used several public single-cell RNA-seq datasets, bulk RNA-seq datasets, and microarray datasets to perform our experiments. In the pseudo-bulk test, a single-cell dataset of mouse atlas from <italic>Tabular Muris</italic> [<xref ref-type="bibr" rid="R18">18</xref>] was used. This dataset consists of 20 organs and tissues with cell type labels provided by the authors. Only three tissues’ (Limb_Muscle, Marrow and Lung) data in both protocols were used to perform the pseudo-bulk test. Other data were not selected because the shared cell types across protocols are very limited (less than four cell types), which can not simulate the real-life scenario.</p><p id="P37">In the experiments of real bulk data with ground truth, we used several real bulk datasets with the corresponding cell fractions. The first PBMC dataset SDY67 was created by <italic>Zimmermann et al.</italic>, but it was indirectly obtained from Scaden’s training data with unknown fractions. The second PBMC dataset created by <italic>Monaco et al.</italic> could be downloaded from the GEO database with accession number <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE107011"><styled-content style-type="color" style="#EC19B0;">GSE107011</styled-content></ext-link>. The corresponding cell fractions data were provided as supplementary information of the original paper. More specifically, the unknown fraction was calculated by one minus the sum of known proportions, and cell types of the same kind were added together to fit the cell types in training data. For example, monocytes C, monocytes I, and monocytes NC are different kinds of monocytes, so their fractions will be added together as the total fraction of monocytes. When we used it to test whether deconvolution methods can achieve good performance with immune cell subtypes, we merged all 30 cell types into 13 cell subtypes (<xref ref-type="supplementary-material" rid="SD1">Supplementary Table 1</xref>). The similar subtypes are defined as “mDC” and “pDC”, “naive CD4 T cell” and “non-naive CD4 T cell”, “naive CD8 T cell” and “non-naive CD8 T cell”, and “naive B cell” and “memory B cell”. The third PBMC dataset was created by <italic>Newman et al</italic>. Its expression data were downloaded from GEO with accession number <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi"><styled-content style-type="color" style="#EC19B0;">GSE65133</styled-content></ext-link> and its cell fractions were provided on the webpage of CIBERSORT [<xref ref-type="bibr" rid="R7">7</xref>]. Next, the dataset we used to deconvolve human tissue with Alzheimer’s Disease (AD) was obtained from a project called Religious Orders Study and Memory and Aging Project (ROSMAP) [<xref ref-type="bibr" rid="R24">24</xref>]. This dataset consists of about 600 samples of RNA-seq data from AD patients, while 41 of them have cell-type proportion information measured by immunohistochemistry in another study [<xref ref-type="bibr" rid="R23">23</xref>]. The gene expression data were obtained from the supplementary data of Scaden rather than the original program of ROSMAP to maintain consistency during the test. As for the single-cell datasets, 8k PBMC dataset from healthy donors was downloaded from 10X Genomics [<xref ref-type="bibr" rid="R31">31</xref>], mouse and human brain datasets were obtained from the GEO database with accession number <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE87544"><styled-content style-type="color" style="#EC19B0;">GSE87544</styled-content></ext-link> and <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE67835"><styled-content style-type="color" style="#EC19B0;">GSE67835</styled-content></ext-link> respectively [<xref ref-type="bibr" rid="R27">27</xref>, <xref ref-type="bibr" rid="R43">43</xref>]. All of these datasets were preprocessed to generate cell-type labels using the same procedure in Scaden. Notably, if the training data were available in Scaden, like PBMC and mouse brain datasets, we just used the training data provided by the authors of Scaden to assess performance.</p><p id="P38">In the advanced analysis of real bulk data with clinical information, three different datasets were involved. Since the ROSMAP dataset has been introduced above, here we only describe the other two datasets. The first is the COVID-19 PBMC dataset [<xref ref-type="bibr" rid="R25">25</xref>] from a longitudinal study of patients with COVID-19. This dataset has 39 RNA-seq samples of PBMC consisting of different stages (treatment stage, convalescence stage, and rehabilitation stage) and different types (mild, moderate, and serious) from 16 patients. The second is the COVID-19 islet dataset which is from a study of the SARS-CoV-2 infected islets. This dataset only has six samples which are divided into three groups: normal cultured group, infected group, and <italic>Remdesivir</italic> treated group. The single-cell dataset used as the reference is from <italic>Baron et al.</italic> [<xref ref-type="bibr" rid="R34">34</xref>] (GEO accession number: <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE84133"><styled-content style-type="color" style="#EC19B0;">GSE84133</styled-content></ext-link>) which has 14 labeled cell types in pancreas tissue. Instead of using all the cells in the dataset, we only selected endocrine cells: alpha cell, beta-cell, delta cell, gamma cell, and epsilon cell to constitute the reference dataset.</p><p id="P39">In the final analysis of tissue-adaptive GEPs, we introduced an HIV PBMC dataset from the GEO database with accession number <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE115449"><styled-content style-type="color" style="#EC19B0;">GSE115449</styled-content></ext-link>. This dataset has PBMC data collected from 92 HIV patients. Half of them have developed BNab and the others do not have BNab. Furthermore, when we used ssGSEA to analyze cellular function changes in PBMC across different viruses’ infections, we used an HCV-infected bulk RNA-seq dataset of PBMC (GEO database, accession number: <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE119117"><styled-content style-type="color" style="#EC19B0;">GSE119117</styled-content></ext-link>). This dataset is also from a longitudinal study of patients. RNA-seq data were collected from individuals before, during, and after acute HCV infection. See more details on the GEO database. Another virus-infected PBMC dataset is the COVID-19 PBMC dataset which has been mentioned before.</p><p id="P40">Note that, the datasets involved in this study might use different ways to represent genes. To maintain the concordance, we processed all the different representations into gene names through BioMart [<xref ref-type="bibr" rid="R44">44</xref>].</p></sec><sec id="S14"><label>4.2</label><title>The TAPE framework</title><sec id="S15"><label>4.2.1</label><title>Simulation of pseudo-bulk data from a single-cell dataset</title><p id="P41">Usually, deep learning models need a large amount of training data to optimize its loss function and learn its parameters. So, it is crucial to generate pseudo-bulk data from a single-cell dataset to train the model. Single-cell expression data with cell type fractions are used to generate pseudo-bulk data. By definition, pseudo-bulk expression data are the sum of single-cell expression data from a subset of cells. So, to generate pseudo-bulk data, cells should be sampled with a given cell type proportion (ground truth) and total cell number like the stratified sampling.</p><p id="P42">Typically, cell-type fractions could be generated using dirichlet distribution when users have some prior information about cell-type fractions in a specific tissue. The cell-type fractions were first generated using the <italic>dirichlet()</italic> function from the <italic>numpy.random</italic> package [<xref ref-type="bibr" rid="R45">45</xref>] and users could define the prior cell fractions by setting the parameters in the <italic>dirichlet()</italic> function. If they do not have prior knowledge, the prior weight of each cell type will be the same (normal samples). Following Scaden, half of the generated samples’ corresponding cell type fractions contain zeros (sparse samples). Because, in our practice, deconvolution performance will be improved by training with both normal and sparse samples. Next, we multiply the total cell number with the generated cell fractions for each sample to acquire the exact sampling number for each cell type. After that, we use a stratified sampling method to sample cells of each cell type with the given number. Finally, the pseudo-bulk expression profile is created by summing the expression values of the randomly selected single-cell expression profiles for each sample.</p><p id="P43">Additionally, if users want to predict tissue-adaptive GEPs and investigate the relative gene expression value (output GEP value is between 0 and 1), they need to consider the data shift between different sequencing methods. For example, counts data from the 10X sequencing platform represent the real expression value while counts data from smart-seq [<xref ref-type="bibr" rid="R46">46</xref>] need to be further normalized using a method like TPM or FPKM to show the real expression value. Here we provide a simple function <italic>counts2FPKM()</italic> (or TPM) to transform raw counts to FPKM (or TPM). Due to the original information loss of the processed single-cell expression profile, we only normalized raw counts of a certain gene with its maximum transcripts length obtained from BioMart [<xref ref-type="bibr" rid="R44">44</xref>]. So, we recommend users prepare a suitable single-cell profile in advance to avoid information loss.</p><p id="P44">According to the previous study from Scaden [<xref ref-type="bibr" rid="R14">14</xref>], different sampling distributions and single-cell datasets with a heavy bias of different cell types do not affect deconvolution performance notably. So, we think the simulation procedure is reasonable in our settings</p></sec><sec id="S16"><label>4.2.2</label><title>Problem definition</title><p id="P45">To illustrate our model more clearly, it is necessary to define the problem in advance. All of the symbols defined in this section are consistent throughout the article. Intuitively, we expect GEPs from bulk RNA-seq would be a linear combination of each cell’s GEPs from single-cell RNA-seq. Furthermore, if cells belonging to one kind of cell type have the same gene expression pattern, we could use the signature gene expression pattern and the number of cells for each type to reconstruct the GEP of a bulk RNA-seq data. So, given the number of <italic>k</italic> cell types, <italic>m</italic> genes, and <italic>n</italic> samples in bulk RNA-seq data, an ideal mathematical model could be defined as: <disp-formula id="FD1"><label>(1)</label><mml:math id="M1"><mml:mrow><mml:mtext>X</mml:mtext><mml:mo>⋅</mml:mo><mml:mtext>S</mml:mtext><mml:mo>=</mml:mo><mml:mtext>B</mml:mtext><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula> where B is an <italic>n × m</italic> matrix representing GEPs of bulk RNA-seq; S is a <italic>k × m</italic> signature matrix; X is an <italic>n × k</italic> matrix representing cell-type fractions in each sample.</p></sec><sec id="S17"><label>4.2.3</label><title>Model set-up</title><p id="P46">Given the well-defined problem, we just need to modify the equation to accommodate deep learning: <disp-formula id="FD2"><label>(2)</label><mml:math id="M2"><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:msub><mml:mi>f</mml:mi><mml:mi>ϕ</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:msub><mml:mi>f</mml:mi><mml:mi>ψ</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo>⋅</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>S</mml:mi></mml:mstyle><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:msub><mml:mi>f</mml:mi><mml:mi>ψ</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>f</mml:mi><mml:mi>ϕ</mml:mi></mml:msub><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mo stretchy="false">)</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math></disp-formula></p><p id="P47">Here, <italic>f<sub>ϕ</sub></italic> and <italic>f<sub>ψ</sub></italic> represent two coordinated deep neural networks, symbols with tilde like <inline-formula><mml:math id="M3"><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle></mml:math></inline-formula> refers to the output of the model; and S refers to the explicit matrix form of <italic>f<sub>ψ</sub></italic>. Usually, <italic>f<sub>ϕ</sub></italic> and <italic>f<sub>ψ</sub></italic> are called encoder and decoder respectively in the classical architecture of AE. <italic>f<sub>ϕ</sub></italic> is a regression model which is responsible for mapping the high dimensional bulk gene expression data to a low dimensional representation of cell compositions. In contrast, <italic>f<sub>ψ</sub></italic> is the inverse function of <italic>f<sub>ϕ</sub></italic> which is expected to reconstruct bulk data based on the cell fractions. Obviously, <italic>f<sub>ψ</sub></italic> functions like the signature matrix discussed in previous sections. Therefore, we want to make it have an explicit matrix-form to enforce the interpretability of <italic>f<sub>ϕ</sub></italic>. To achieve the progress in the interpretability of deep model, <italic>f<sub>ψ</sub></italic> was designed without activation layers or biases, which is only the regularized value of dot product of five weight matrices. Thus, the signature matrix is visible in the deep model: <disp-formula id="FD3"><label>(3)</label><mml:math id="M4"><mml:mrow><mml:msub><mml:mi>f</mml:mi><mml:mi>ψ</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>S</mml:mi></mml:mstyle><mml:mo>=</mml:mo><mml:mtext>ReLU</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>W</mml:mi></mml:mstyle><mml:mn>1</mml:mn></mml:msub><mml:mo>⋅</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>W</mml:mi></mml:mstyle><mml:mn>2</mml:mn></mml:msub><mml:mo>⋅</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>W</mml:mi></mml:mstyle><mml:mn>3</mml:mn></mml:msub><mml:mo>⋅</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>W</mml:mi></mml:mstyle><mml:mn>4</mml:mn></mml:msub><mml:mo>⋅</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>W</mml:mi></mml:mstyle><mml:mn>5</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula> where ReLU(<italic>x</italic>) = (<italic>x</italic>)<sup>+</sup> = max(0, <italic>x</italic>). The reason to design such an equation to represent S rather than a single matrix is that more parameters could enable the model to learn a good signature matrix more quickly and easily, and the ReLU(·) function is used to ensure the biological meaning of the signature matrix. Of note, the decoder matrix is expected to represent a meaningful signature matrix only after the training with simulated data.</p><p id="P48">We need to stress that, it may seem that our model assumes that cell proportions could be inferred from the bulk data directly through the function <italic>f<sub>ϕ</sub></italic> without the signature matrix. However, if we consider <italic>f<sub>ψ</sub></italic>, we will find that parameters of <italic>f<sub>ϕ</sub></italic> is affected by <italic>f<sub>ψ</sub></italic> during optimization. Just like other statistical methods computing the pseudo-inverse of the signature matrix in the fitting process, we also use the inverse relationship between <italic>f<sub>ϕ</sub></italic> and <italic>f<sub>ψ</sub></italic> in the training stage. Therefore, compared with the previous machine learning methods using a single function to predict fractions without regularization from the signature matrix, this architecture makes more sense. More specifically, although Variational AutoEncoder (VAE) has become a powerful tool to model single-cell data recently [<xref ref-type="bibr" rid="R47">47</xref>–<xref ref-type="bibr" rid="R49">49</xref>], we do not use VAE because the encoded latent variable is probabilistic, not deterministic. This is the reason why VAE is very suitable for generative tasks, while not suitable for the cell-type deconvolution.</p></sec><sec id="S18"><label>4.2.4</label><title>Input data preprocessing</title><p id="P49">Although the input datasets varied between platforms and protocols, we utilized the same processing approach to prepare them for deep-learning models and alleviate the effect of the dimensionality curse. As for the bulk data (real or simulated), it is first transformed to the Log<sub>2</sub> space with a pre-added one to avoid null value. Then we need to filter some genes with low variance both in the training data and test data [<xref ref-type="bibr" rid="R10">10</xref>, <xref ref-type="bibr" rid="R14">14</xref>]. This step is very important, because TAPE will fail in predicting test bulk data proportions properly without proper filtering (<xref ref-type="supplementary-material" rid="SD1">Supplementary Table 2</xref> and <xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 11</xref>) [<xref ref-type="bibr" rid="R14">14</xref>]. In our experiments, we control the filtering threshold to keep about 10,000 genes as reported by Scaden [<xref ref-type="bibr" rid="R14">14</xref>]. If the less variable genes are not filtered out, TAPE can not predict a good result because of the noises (<xref ref-type="supplementary-material" rid="SD1">Supplementary Table 2</xref> and <xref ref-type="supplementary-material" rid="SD1">Supplementary Figure 11</xref>). Further signature gene selection methods [<xref ref-type="bibr" rid="R50">50</xref>, <xref ref-type="bibr" rid="R51">51</xref>] may help TAPE improve its performance. Next, to maintain the meaningful signature matrix, we decide to use the <italic>MinMaxScaler</italic>() function provided by scikit-learn [<xref ref-type="bibr" rid="R52">52</xref>] to scale data into the range between 0 and 1. This function is described below: <disp-formula id="FD4"><label>(4)</label><mml:math id="M5"><mml:mrow><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:mi>min</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mrow><mml:mi>max</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>−</mml:mo><mml:mi>min</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mi>i</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mfrac><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mo>,</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p></sec><sec id="S19"><label>4.2.5</label><title>Training method</title><p id="P50">As previously stated, there are two stages of training in TAPE. The first is the training stage, where we use about 5,000 pseudo-bulk samples for training. we use MAE between prediction and ground truth to optimize the parameters of encoder and MAE between the reconstructed input and the original input to optimize both the decoder and the encoder. The loss functions are defined as: <disp-formula id="FD5"><label>(5)</label><mml:math id="M6"><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mtext>MAE</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>X</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mstyle displaystyle="true"><mml:mi>∑</mml:mi></mml:mstyle><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>|</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>X</mml:mi></mml:mstyle><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>|</mml:mo></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>×</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mtext>MAE</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mstyle displaystyle="true"><mml:mi>∑</mml:mi></mml:mstyle><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>|</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>|</mml:mo></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>×</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math></disp-formula> where symbols with tilde represent learned/predicted data in the training stage.</p><p id="P51">Usually, we found that <inline-formula><mml:math id="M7"><mml:mrow><mml:mtext>MAE</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>X</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mover accent="true"><mml:mstyle mathvariant="bold"><mml:mi>X</mml:mi></mml:mstyle><mml:mo stretchy="true">˜</mml:mo></mml:mover><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> is stable after 5,000 iterations with batch size 128, so we stopped training to avoid overfitting.</p><p id="P52">In the adaptive stage, we aim to train the parameters to adapt to new data rather than predicting cell fractions with the same parameters in all situations. To achieve this goal, we design a greedily iterative optimizing method in a new manner: <italic>step 1.</italic> optimize the decoder with loss function <inline-formula><mml:math id="M8"><mml:mrow><mml:mtext>MAE</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>MAE</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>S</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:msub><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>S</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mn>0</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> until <inline-formula><mml:math id="M9"><mml:mrow><mml:mtext>MAE</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> does not decrease; <italic>step 2.</italic> optimize the encoder with loss function <inline-formula><mml:math id="M10"><mml:mrow><mml:mtext>MAE</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>MAE</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:msub><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mn>0</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> until <inline-formula><mml:math id="M11"><mml:mrow><mml:mtext>MAE</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> does not decrease. Here, <inline-formula><mml:math id="M12"><mml:mrow><mml:msub><mml:mover accent="true"><mml:mtext>X</mml:mtext><mml:mo>˜</mml:mo></mml:mover><mml:mn>0</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="M13"><mml:mrow><mml:msub><mml:mover accent="true"><mml:mtext>S</mml:mtext><mml:mo>˜</mml:mo></mml:mover><mml:mn>0</mml:mn></mml:msub></mml:mrow></mml:math></inline-formula> refer to the results of cell type fractions and cell-type-specific gene expression matrix after initial training. The intuition is that we want the decoder (signature matrix) to adapt to the bulk data first because each new bulk sample has a different signature matrix. Then we want the encoder to adapt to the bulk data to predict a slightly different cell fraction. Since this iterative method is not guaranteed to converge, we have to make the adapted parameters as close as possible to the original parameters. For the same reason, if we train both encoder and decoder simultaneously, it would be hard to guarantee the model could converge on our expectation, so we train them separately to make more sense. Usually, repeating <italic>step 1</italic> and <italic>step 2</italic> several times would make the parameters of TAPE adapt to the new data. In our experiments, after the adaptive stage, the prediction of cell fractions will improve a little, and it always outputs an adaptive signature matrix. The adaptive training stage is more like the fine-tuning step in deep learning rather than being re-trained with new single-cell data. The adaptive-training time is 3 seconds per sample with GPU acceleration.</p></sec><sec id="S20"><label>4.2.6</label><title>Predict tissue-adaptive cell-type-specific GEP in different modes</title><p id="P53">Generally, there are two different ways to analyze cell-type-specific GEPs: 1. The “overall” mode: using all the samples at once to capture an overall cell-type-specific GEPs in a certain condition. 2. The “high-resolution” mode: predicting all the samples one by one to maintain the differences between each sample. Certainly, the latter will consume more time than the former one. Usually, it takes 3 seconds to deconvolve cell-type-specific GEPs for each sample. The choice of different modes mainly depends on users’ demands. For example, if users want to discover the differentially expressed genes at a cell-type level, they should choose to predict GEPs in the “high-resolution” mode; thus they could calculate the <italic>p</italic>-value. On the other hand, if users only need to investigate the highly expressed genes in different cell types or have an overall look at the cell-type level, they should choose to predict GEPs in the “overall” mode.</p><p id="P54">It is worth noting that, the value of the GEP predicted by TAPE is between 0 and 1, which represents the relative expression value within a single sample due to the <italic>Min-Max</italic> scaling. Using this GEP may encounter some problems when users need to analyze the foldchange of a certain gene due to the information loss induced by the the nonlinear scaling function.</p></sec><sec id="S21"><label>4.2.7</label><title>Architecture and hyperparameters</title><p id="P55">TAPE’s encoder and decoder are both made up of five fully connected layers with the same weight size in the corresponding position. For example, the first layer of the encoder and the last layer of the decoder each have 512 nodes. More specifically, the number of nodes in each encoder layer is 512, 256, 128, 64, and the number of cell types is in sequential order. Before each of the first four fully connected layers, there is a dropout function with a probability of 0.5; after each layer, each has a nonlinear activation function CELU(·), defined as CELU(<italic>x</italic>) = max(0, <italic>x</italic>) + min(0, <italic>e</italic><sup><italic>x</italic>−1</sup>). Decoder, on the other hand, does not contain any bias in the fully connected layers or nonlinear functions except the ReLU(·) function, as we have mentioned before. During the training stage, we use Adam with a learning rate of 1 <italic>×</italic> 10<sup>−4</sup> to optimize parameters. Other parameters of Adam are set as default in PyTorch. We train the network for 5,000 iterations with batch size 128. These training hyperparameters are succeeded from Scaden. While in the adaptive stage, we use Adam with the same learning rate 1 <italic>×</italic> 10<sup>−4</sup> to fine-tune the parameters on the new data. We train both the encoder and the decoder for 300 steps within each iteration. The max iteration number is flexible for users, and we recommend users set it to at least 2 to make it output a well-adapted signature matrix.</p></sec><sec id="S22"><label>4.2.8</label><title>Model interpretation</title><p id="P56">This deep learning model is very similar to the middle-size model in Scaden. The performance improvement of this model is caused by the dropout layer, the decoder and the selection of activation function. We add the dropout layer in front of the first linear layer. This setting is rare in deep learning because it would be hard for the model to learn if there is only half of the input features. This empirical knowledge also works for TAPE, but we introduce the decoder layer to avoid the performance drop. In contrast, since the decoder could stabilize the encoder, the dropout layer in the encoder could help the model recognize which set of features is crucial to the result, and this dropout layer will enhance the performance. As for the decoder, it is actually a single matrix with constraint (all elements <italic>≥</italic> 0). The reason why we use dot product of five matrices is to improve the speed of convergence. In practice, the results have shown that the more parameters the model has, the faster the convergence speed will be. Moreover, we need to stress that the activation function will affect the performance. Previous deep learning framework, Scaden, uses Softmax() as the final activation function to guarantee the prediction is meaningful. But its drawback is that the training process will be less stable. Specifically, when the training data contain zero proportions for some cell types, and the model is forced to predict a zero during the training process, it would be really hard for a Softmax() function to predict a zero, and the last layers’ features should be very negative values which are harmful to the numerical stability. The similar problem is raised in the image classification task, and researchers usually use label smoothing to avoid this problem [<xref ref-type="bibr" rid="R53">53</xref>, <xref ref-type="bibr" rid="R54">54</xref>]. However, since label smoothing is not appropriate for the regression task, when predicting cell fractions, we finally use ReLU() and a scale function to guarantee the summation of cell fractions is 1.</p></sec></sec><sec id="S23"><label>4.3</label><title>Performance evaluation</title><p id="P57">Within the main text above, we combined mean absolute error (MAE) with Lin’s concordance correlation coefficient (CCC) [<xref ref-type="bibr" rid="R19">19</xref>] to evaluate different algorithms’ performance because it is hard to assess performance reasonably in all situations with only one metric. For instance, suppose there are only two kinds of cell types in tissue, and one type’s fraction ranges from 80%-90% in the ground truth. If the model predicts this cell type fraction is 100%, then the CCC value may imply a satisfying performance, but the MAE value may indicate the opposite. So, to avoid the situation of discarding fractions of minor cell types, it is necessary to combine MAE with CCC. Generally, a higher CCC value and a lower MAE suggest a better deconvolution performance. These metrics are defined as follows: <disp-formula id="FD6"><label>(6)</label><mml:math id="M14"><mml:mrow><mml:mtable columnalign="left"><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mtext>MAE</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>X</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mstyle displaystyle="true"><mml:mi>∑</mml:mi></mml:mstyle><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>|</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mi>X</mml:mi></mml:mstyle><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mrow><mml:mi>i</mml:mi><mml:mo>,</mml:mo><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>|</mml:mo></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>×</mml:mo><mml:mi>k</mml:mi></mml:mrow></mml:mfrac><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr columnalign="left"><mml:mtd columnalign="left"><mml:mrow><mml:mtext>CCC</mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mover accent="true"><mml:mi>x</mml:mi><mml:mo>˜</mml:mo></mml:mover><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mn>2</mml:mn><mml:mo>×</mml:mo><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>v</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mover accent="true"><mml:mi>x</mml:mi><mml:mo>˜</mml:mo></mml:mover><mml:mo stretchy="false">)</mml:mo></mml:mrow><mml:mrow><mml:msubsup><mml:mi>σ</mml:mi><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:msubsup><mml:mi>σ</mml:mi><mml:mover accent="true"><mml:mi>x</mml:mi><mml:mo>˜</mml:mo></mml:mover><mml:mn>2</mml:mn></mml:msubsup><mml:mo>+</mml:mo><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>μ</mml:mi><mml:mi>x</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>μ</mml:mi><mml:mover accent="true"><mml:mi>x</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mfrac><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:math></disp-formula> where <inline-formula><mml:math id="M15"><mml:mrow><mml:mi>c</mml:mi><mml:mi>o</mml:mi><mml:mi>v</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mover accent="true"><mml:mi>x</mml:mi><mml:mo>˜</mml:mo></mml:mover><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> stands for the covariance between these two vectors.</p><p id="P58">Notably, these two metrics are applied to all data points of the predicted matrix <inline-formula><mml:math id="M16"><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle></mml:math></inline-formula> and the ground truth matrix X. More specifically, for the CCC value, we reshape the matrix into a vector and then calculate the total CCC between two vectors. This calculation pattern usually results in a higher CCC value than computing the average CCC value for each cell type.</p></sec><sec id="S24"><label>4.4</label><title>Statistics and Reproducibility</title><p id="P59">Determining the sample size for the deconvolution problem is a challenging problem with no existing method, so we chose the sample size according to previously published datasets. Datasets were chosen in order to show the functionality and performance of our method. No data were excluded from the analyses. Replication and randomization are not applicable since we did not collect any experimental data. Hypothesis testing methods are explained in each figure legend. Any group allocations were determined by previously published dataset, we did not modify the group information. To reproduce the results, please find the Source Data file we provided.</p></sec><sec id="S25"><label>4.5</label><title>Software comparison and settings</title><p id="P60">To evaluate the performance of TAPE compared with other methods, we selected several representative methods for comparison. Except for Scaden, other methods were tested following the instruction and tutorials provided by each package.</p><p id="P61">For deconvolution performance on the pseudo-bulk and real bulk data with ground truth, we benchmark Scaden, RNAsieve, CIBERSORTx, DWLS, MuSiC and Bisque [<xref ref-type="bibr" rid="R8">8</xref>–<xref ref-type="bibr" rid="R12">12</xref>, <xref ref-type="bibr" rid="R14">14</xref>]. We will describe the details of the benchmarking procedure below. Hyperparameter tuning file is available in <xref ref-type="supplementary-material" rid="SD1">Supplementary Table 3-7</xref>.</p><p id="P62">For Scaden, we tested its performance in both platform: Keras-based Scaden (provided by Scaden’s authors) and PyTorch-based Scaden (implemented by ourselves). The training hyperparameters of PyTorch-based Scaden were set following the instruction of the original article and the source code. Though we tried our best to make it the same as the original Scaden, it still had some different behaviors, for example, loss plot and deconvolution performance on the SDY67 dataset were different from reported data. These differences were probably caused by the different deep learning backends (Keras or PyTorch). In general, since the differences were not huge, the implementation of Scaden is acceptable. The results shown in the Results part is mainly based on the Keras-based Scaden. Only the detailed performance comparison with different random seeds is produced by PyTorch-based Scaden.</p><p id="P63">For RNA-Sieve, it does not have a detailed documentation, so we ran it following its example code. In practice, we can produce the same result as its example code but the results of RNA-Sieve in pseudo and real bulk test are not as good as previously reported. We first validated its performance on pseudo-bulk data and the original data provided by the authors. The results showed that it could perform well on the simulated data but it could not reproduce the same results as they reported on <italic>Newman’s</italic> dataset and <italic>Monaco’s</italic> dataset. The benchmarking code is available in the <xref ref-type="supplementary-material" rid="SD1">supplementary file</xref>.</p><p id="P64">For CIBERSORTx (CSx), we used the web-based application to test. We first used a single-cell profile to generate a signature matrix and then we deconvolved the corresponding bulk data with S mode batch-correction. Other settings were default. When we need to predict the differentially expressed genes in different cell types for HIV PBMC dataset, we first selected the signature matrix and added the RAB11FIP5 gene to the list of genes of interest. Then we ran CSx to infer the gene expression profiles at high-resolution mode. All the procedures are following the tutorial given on the website</p><p id="P65">For DWLS, we used the core functions and packages written in R programming language to generate signature matrices and therefore deconvolving the targeted pseudo-bulk data and the real ones. To guarantee the rationality of our implementation, we carefully followed the example of the intestine stem cell provided by the manual of DWLS. Since the deconvolution function provided by DWLS only deconvolves one sample at a time, a for-loop is brought in because we need to deal with some large samples. For a better performance of DWLS, in the step of generating signature matrix, we used the <italic>Seurat</italic> flavor for pseudo-bulk test and the MAST[<xref ref-type="bibr" rid="R50">50</xref>] flavor for real bulk test. Furthermore, to ensure the stability and usability for all the bulk samples, we used support vector regression (<italic>nu-SVR</italic>) to obtain the initial estimation instead of the ordinary least square regression.</p><p id="P66">For MuSiC, we installed the R package and ran it with default settings following its tutorial. Of note, MuSiC claims it can take the advantages of multi-subject single-cell profiles to improve deconvolution performance. But in our pseudo-bulk test, we do not have multi-subject single-cell data, to meet its requirement, we randomly assigned one dataset to two virtually different source. In the real bulk test, we first combined PBMC data6k and data8k as reference to deconvolve PBMC bulk dataset, but MuSiC failed to predict them properly. The CCC value was negative which has been reported by previous study [<xref ref-type="bibr" rid="R9">9</xref>]. Then we only used PBMC data8k as reference and assigned it to two virtually different datasets to deconvolve PBMC bulk data. With only one source single-cell profile the CCC value was normal and this result challenges the MuSiC’s claim. Thus, we only displayed the one-subject single-cell reference results above.</p><p id="P67">For Bisque, we installed the R package BisqueRNA and ran it with default settings following its example provided by the author. In the default mode of the ’Reference-based decomposition’ mode, Bisque filters out low variance genes and uses genes left for decomposition, so we input all the genes without specifying some marker genes.</p><p id="P68">To generate all the figures, we used the following python packages: matplotlib [<xref ref-type="bibr" rid="R55">55</xref>], seaborn [<xref ref-type="bibr" rid="R56">56</xref>], and pandas [<xref ref-type="bibr" rid="R57">57</xref>]. Additional packages such as anndata and tqdm [<xref ref-type="bibr" rid="R58">58</xref>] are used to build our method.</p><p id="P69">It should be pointed out that, for all statistical methods (RNA-sieve, CSx, and DWLS), all PBMC datasets were deconvolved using a signature matrix generated from PBMC data8k dataset, reference of mouse brain dataset is generated from <italic>Chen et al.</italic> [<xref ref-type="bibr" rid="R43">43</xref>], and signature matrix of human brain dataset is generated from <italic>Darmanis et al.</italic> [<xref ref-type="bibr" rid="R27">27</xref>]</p></sec></sec><sec sec-type="supplementary-material" id="SM"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="SD1"><label>SupplementaryInformation</label><media xlink:href="EMS139884-supplement-SupplementaryInformation.pdf" mimetype="application" mime-subtype="pdf" id="d21aAdEbB" position="anchor"/></supplementary-material></sec></body><back><ack id="S26"><label>7</label><title>Acknowledgements</title><p>We thank Mengyue Sun for his help to accelerate the simulation process. Special thanks to people who helped us request for the ROSMAP dataset and the dataset creators from Religious Orders Study (ROS) or the Rush Memory and Aging Project (MAP). The work was supported by Chinese University of Hong Kong (CUHK) with the award number 4937025, 4937026, 5501517, and 5501329 and the General Research Funds 14306020 and 14305319 from the Hong Kong Research Grants Council of the Hong Kong Special Administrative Region of the People’s Republic of China. Y.C. and T.F.C. are supported by University Grants Committee Area of Excellence Scheme [AoE/M-403/16], a generous donation from Mr. and Mrs. Sunny Yang; and the Innovation and Technology Commission, Hong Kong Special Administrative Region Government to the State Key Laboratory of Agrobiotechnology (CUHK). Y.Y.W and T.F.C are supported by a Project Impact Enhancement Fund (PIEF) and Science Faculty’s Collaborative Research Impact Matching Scheme (CRIMS).</p></ack><sec id="S27" sec-type="data-availability"><label>5</label><title>Data availability</title><p id="P70">Source data are provided with this paper. All the datasets we used are listed in the Method part. Only the ROSMAP human brain dataset is not public, researchers need to download it from Synapse (ID: syn3219045) with a request. For convenience, we listed these datasets on the webpage: <ext-link ext-link-type="uri" xlink:href="https://sctape.readthedocs.io/datasets/">https://sctape.readthedocs.io/datasets/</ext-link>.</p></sec><sec id="S28" sec-type="data-availability"><label>6</label><title>Code availability</title><p id="P71">The open source implementation of TAPE is available at <ext-link ext-link-type="uri" xlink:href="https://github.com/poseidonchan/TAPE">https://github.com/poseidonchan/TAPE</ext-link> [<xref ref-type="bibr" rid="R59">59</xref>], and the experiments conducted to produce the main results of this article are also stored in this repository. The documentation of TAPE is published at <ext-link ext-link-type="uri" xlink:href="https://sctape.readthedocs.io/">https://sctape.readthedocs.io/</ext-link>.</p></sec><fn-group><fn id="FN1" fn-type="con"><p id="P72"><bold>Author contributions</bold></p><p id="P73">Y.L., Y.S.C, and Y.X.W conceived of and designed the computational method; Y.S.C implemented the main algorithm; Y.S.C and Y.X.W did experiments and interpreted the results; Y.S.C and Y.Q.C analyzed and interpreted the clinical analysis results; Y.L.C analyzed and interpreted the ssGSEA results; Y.S.C, Y.X.W and Y.L.C wrote the manuscript; Y.M.W, Y.X.L, J.M.W, Y.Y.W, T.F.C and Y.L revised the manuscript. T.F.C and Y.L supervised the project. All authors read and approved the final paper.</p></fn><fn id="FN2" fn-type="conflict"><p id="P74"><bold>Competing interests</bold></p><p id="P75">The authors declare no competing interests.</p></fn></fn-group><ref-list><ref id="R1"><label>[1]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hong</surname><given-names>M</given-names></name><etal/></person-group><article-title>Rna sequencing: new technologies and applications in cancer research</article-title><source>Journal of hematology &amp; oncology</source><year>2020</year><volume>13</volume><fpage>1</fpage><lpage>16</lpage></element-citation></ref><ref id="R2"><label>[2]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dong</surname><given-names>B</given-names></name><etal/></person-group><article-title>Single-cell analysis supports a luminal-neuroendocrine transdifferentiation in human prostate cancer</article-title><source>Communications biology</source><year>2020</year><volume>3</volume><fpage>1</fpage><lpage>15</lpage></element-citation></ref><ref id="R3"><label>[3]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Horning</surname><given-names>AM</given-names></name><etal/></person-group><article-title>Single-cell rna-seq reveals a subpopulation of prostate cancer cells with enhanced cell-cycle–related transcription and attenuated androgen response</article-title><source>Cancer research</source><year>2018</year><volume>78</volume><fpage>853</fpage><lpage>864</lpage></element-citation></ref><ref id="R4"><label>[4]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Papalexi</surname><given-names>E</given-names></name><name><surname>Satija</surname><given-names>R</given-names></name></person-group><article-title>Single-cell rna sequencing to explore immune cell heterogeneity</article-title><source>Nature Reviews Immunology</source><year>2018</year><volume>18</volume><fpage>35</fpage><lpage>45</lpage></element-citation></ref><ref id="R5"><label>[5]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Stegle</surname><given-names>O</given-names></name><name><surname>Teichmann</surname><given-names>SA</given-names></name><name><surname>Marioni</surname><given-names>JC</given-names></name></person-group><article-title>Computational and analytical challenges in single-cell transcriptomics</article-title><source>Nature Reviews Genetics</source><year>2015</year><volume>16</volume><fpage>133</fpage><lpage>145</lpage></element-citation></ref><ref id="R6"><label>[6]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Han</surname><given-names>W</given-names></name><etal/></person-group><article-title>Self-supervised contrastive learning for integrative single cell RNA-seq data analysis</article-title><source>Briefings in Bioinformatics</source><year>2022</year><volume>23</volume></element-citation></ref><ref id="R7"><label>[7]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Newman</surname><given-names>AM</given-names></name><etal/></person-group><article-title>Robust enumeration of cell subsets from tissue expression profiles</article-title><source>Nat Methods</source><year>2015</year><volume>12</volume><fpage>453</fpage><lpage>7</lpage></element-citation></ref><ref id="R8"><label>[8]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wang</surname><given-names>X</given-names></name><name><surname>Park</surname><given-names>J</given-names></name><name><surname>Susztak</surname><given-names>K</given-names></name><name><surname>Zhang</surname><given-names>NR</given-names></name><name><surname>Li</surname><given-names>M</given-names></name></person-group><article-title>Bulk tissue cell type deconvolution with multi-subject single-cell expression reference</article-title><source>Nat Commun</source><year>2019</year><volume>10</volume><fpage>380</fpage></element-citation></ref><ref id="R9"><label>[9]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Newman</surname><given-names>AM</given-names></name><etal/></person-group><article-title>Determining cell type abundance and expression from bulk tissues with digital cytometry</article-title><source>Nat Biotechnol</source><year>2019</year><volume>37</volume><fpage>773</fpage><lpage>782</lpage></element-citation></ref><ref id="R10"><label>[10]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jew</surname><given-names>B</given-names></name><etal/></person-group><article-title>Accurate estimation of cell composition in bulk expression through robust integration of single-cell information</article-title><source>Nat Commun</source><year>2020</year><volume>11</volume><elocation-id>1971</elocation-id></element-citation></ref><ref id="R11"><label>[11]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tsoucas</surname><given-names>D</given-names></name><etal/></person-group><article-title>Accurate estimation of cell-type composition from gene expression data</article-title><source>Nat Commun</source><year>2019</year><volume>10</volume><elocation-id>2975</elocation-id></element-citation></ref><ref id="R12"><label>[12]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Erdmann-Pham</surname><given-names>DD</given-names></name><name><surname>Fischer</surname><given-names>J</given-names></name><name><surname>Hong</surname><given-names>J</given-names></name><name><surname>Song</surname><given-names>YS</given-names></name></person-group><article-title>A likelihood-based deconvolution of bulk gene expression data using single-cell references</article-title><source>Genome Res</source><year>2021</year></element-citation></ref><ref id="R13"><label>[13]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Andrade Barbosa</surname><given-names>B</given-names></name><etal/></person-group><article-title>Bayesian log-normal deconvolution for enhanced in silico microdissection of bulk gene expression data</article-title><source>Nature communications</source><year>2021</year><volume>12</volume><fpage>1</fpage><lpage>13</lpage></element-citation></ref><ref id="R14"><label>[14]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Menden</surname><given-names>K</given-names></name><etal/></person-group><article-title>Deep learning-based cell composition analysis from tissue expression profiles</article-title><source>Sci Adv</source><year>2020</year><volume>6</volume><elocation-id>eaba2619</elocation-id></element-citation></ref><ref id="R15"><label>[15]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dávila-Collado</surname><given-names>R</given-names></name><name><surname>Jarquín-Durán</surname><given-names>O</given-names></name><name><surname>Solís-Vallejo</surname><given-names>A</given-names></name><name><surname>Nguyen</surname><given-names>MA</given-names></name><name><surname>Espinoza</surname><given-names>JL</given-names></name></person-group><article-title>Elevated monocyte to lymphocyte ratio and increased mortality among patients with chronic kidney disease hospitalized for covid-19</article-title><source>Journal of personalized medicine</source><year>2021</year><volume>11</volume><fpage>224</fpage></element-citation></ref><ref id="R16"><label>[16]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Barbie</surname><given-names>DA</given-names></name><etal/></person-group><article-title>Systematic rna interference reveals that oncogenic kras-driven cancers require tbk1</article-title><source>Nature</source><year>2009</year><volume>462</volume><fpage>108</fpage><lpage>112</lpage></element-citation></ref><ref id="R17"><label>[17]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Johnson</surname><given-names>WE</given-names></name><name><surname>Li</surname><given-names>C</given-names></name><name><surname>Rabinovic</surname><given-names>A</given-names></name></person-group><article-title>Adjusting batch effects in microarray expression data using empirical bayes methods</article-title><source>Biostatistics</source><year>2007</year><volume>8</volume><fpage>118</fpage><lpage>127</lpage></element-citation></ref><ref id="R18"><label>[18]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tabula Muris</surname><given-names>C</given-names></name><etal/></person-group><article-title>Single-cell transcriptomics of 20 mouse organs creates a tabula muris</article-title><source>Nature</source><year>2018</year><volume>562</volume><fpage>367</fpage><lpage>372</lpage></element-citation></ref><ref id="R19"><label>[19]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lin</surname><given-names>LIK</given-names></name></person-group><article-title>A concordance correlation coefficient to evaluate reproducibility</article-title><source>Biometrics</source><year>1989</year><volume>45</volume></element-citation></ref><ref id="R20"><label>[20]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zimmermann</surname><given-names>MT</given-names></name><etal/></person-group><article-title>System-wide associations between dna-methylation, gene expression, and humoral immune response to influenza vaccination</article-title><source>PLoS One</source><year>2016</year><volume>11</volume><elocation-id>e0152034</elocation-id></element-citation></ref><ref id="R21"><label>[21]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Monaco</surname><given-names>G</given-names></name><etal/></person-group><article-title>Rna-seq signatures normalized by mrna abundance allow absolute deconvolution of human immune cell types</article-title><source>Cell Rep</source><year>2019</year><volume>26</volume><fpage>1627</fpage><lpage>1640</lpage><elocation-id>e7</elocation-id></element-citation></ref><ref id="R22"><label>[22]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bennett</surname><given-names>DA</given-names></name><etal/></person-group><article-title>Religious orders study and rush memory and aging project</article-title><source>J Alzheimers Dis</source><year>2018</year><volume>64</volume><fpage>S161</fpage><lpage>S189</lpage></element-citation></ref><ref id="R23"><label>[23]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Patrick</surname><given-names>E</given-names></name><etal/></person-group><article-title>Deconvolving the contributions of cell-type heterogeneity on cortical gene expression</article-title><source>PLoS Comput Biol</source><year>2020</year><volume>16</volume><elocation-id>e1008120</elocation-id></element-citation></ref><ref id="R24"><label>[24]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>De Jager</surname><given-names>PL</given-names></name><etal/></person-group><article-title>A multi-omic atlas of the human frontal cortex for aging and alzheimer’s disease research</article-title><source>Sci Data</source><year>2018</year><volume>5</volume><elocation-id>180142</elocation-id></element-citation></ref><ref id="R25"><label>[25]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zheng</surname><given-names>HY</given-names></name><etal/></person-group><article-title>Longitudinal transcriptome analyses show robust t cell immunity during recovery from covid-19</article-title><source>Signal Transduct Target Ther</source><year>2020</year><volume>5</volume><fpage>294</fpage></element-citation></ref><ref id="R26"><label>[26]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Muller</surname><given-names>JA</given-names></name><etal/></person-group><article-title>Sars-cov-2 infects and replicates in cells of the human endocrine and exocrine pancreas</article-title><source>Nat Metab</source><year>2021</year><volume>3</volume><fpage>149</fpage><lpage>165</lpage></element-citation></ref><ref id="R27"><label>[27]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Darmanis</surname><given-names>S</given-names></name><etal/></person-group><article-title>A survey of human brain transcriptome diversity at the single cell level</article-title><source>Proc Natl Acad Sci U S A</source><year>2015</year><volume>112</volume><fpage>7285</fpage><lpage>90</lpage></element-citation></ref><ref id="R28"><label>[28]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Braak</surname><given-names>H</given-names></name><name><surname>Braak</surname><given-names>E</given-names></name></person-group><article-title>Neuropathological stageing of alzheimer-related changes</article-title><source>Acta Neuropathol</source><year>1991</year><volume>82</volume><fpage>239</fpage><lpage>59</lpage></element-citation></ref><ref id="R29"><label>[29]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hansen</surname><given-names>DV</given-names></name><name><surname>Hanson</surname><given-names>JE</given-names></name><name><surname>Sheng</surname><given-names>M</given-names></name></person-group><article-title>Microglia in alzheimer’s disease</article-title><source>J Cell Biol</source><year>2018</year><volume>217</volume><fpage>459</fpage><lpage>472</lpage></element-citation></ref><ref id="R30"><label>[30]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Navarro</surname><given-names>V</given-names></name><etal/></person-group><article-title>Microglia in alzheimer’s disease: Activated, dysfunctional or degenerative</article-title><source>Front Aging Neurosci</source><year>2018</year><volume>10</volume><fpage>140</fpage></element-citation></ref><ref id="R31"><label>[31]</label><element-citation publication-type="journal"><article-title>8k pbmcs from a healthy donor, single cell gene expression dataset by cell ranger 2.1.0</article-title><source>10X Genomics</source><year>2017</year><comment>URL <ext-link ext-link-type="uri" xlink:href="https://www.10xgenomics.com/resources/datasets/8-k-pbm-cs-from-a-healthy-donor-2-standard-2-1-0">https://www.10xgenomics.com/resources/datasets/8-k-pbm-cs-from-a-healthy-donor-2-standard-2-1-0</ext-link></comment></element-citation></ref><ref id="R32"><label>[32]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lissoni</surname><given-names>P</given-names></name><etal/></person-group><article-title>Evidence of abnormally low lymphocyte-to-monocyte ratio in covid-19-induced severe acute respiratory syndrome</article-title><source>J Immuno Allerg</source><year>2020</year><volume>1</volume><fpage>1</fpage><lpage>6</lpage></element-citation></ref><ref id="R33"><label>[33]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yang</surname><given-names>AP</given-names></name><name><surname>Liu</surname><given-names>JP</given-names></name><name><surname>Tao</surname><given-names>WQ</given-names></name><name><surname>Li</surname><given-names>HM</given-names></name></person-group><article-title>The diagnostic and predictive role of nlr, d-nlr and plr in covid-19 patients</article-title><source>Int Immunopharmacol</source><year>2020</year><volume>84</volume><elocation-id>106504</elocation-id></element-citation></ref><ref id="R34"><label>[34]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Baron</surname><given-names>M</given-names></name><etal/></person-group><article-title>A single-cell transcriptomic map of the human and mouse pancreas reveals inter- and intra-cell population structure</article-title><source>Cell Syst</source><year>2016</year><volume>3</volume><fpage>346</fpage><lpage>360</lpage><elocation-id>e4</elocation-id></element-citation></ref><ref id="R35"><label>[35]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sun</surname><given-names>X</given-names></name><etal/></person-group><article-title>Association of neurogranin gene expression with alzheimer’s disease pathology in the perirhinal cortex</article-title><source>Alzheimers Dement (N Y)</source><year>2021</year><volume>7</volume><elocation-id>e12162</elocation-id></element-citation></ref><ref id="R36"><label>[36]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bradley</surname><given-names>T</given-names></name><etal/></person-group><article-title>Rab11fip5 expression and altered natural killer cell function are associated with induction of hiv broadly neutralizing antibody responses</article-title><source>Cell</source><year>2018</year><volume>175</volume><fpage>387</fpage><lpage>399</lpage><elocation-id>e17</elocation-id></element-citation></ref><ref id="R37"><label>[37]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Love</surname><given-names>MI</given-names></name><name><surname>Huber</surname><given-names>W</given-names></name><name><surname>Anders</surname><given-names>S</given-names></name></person-group><article-title>Moderated estimation of fold change and dispersion for rna-seq data with deseq2</article-title><source>Genome biology</source><year>2014</year><volume>15</volume><fpage>1</fpage><lpage>21</lpage></element-citation></ref><ref id="R38"><label>[38]</label><element-citation publication-type="book"><source>6k pbmcs from a healthy donor single cell gene expression dataset by cell ranger 1.1.0</source><publisher-name>10X Genomics</publisher-name><year>2016</year><comment>URL <ext-link ext-link-type="uri" xlink:href="https://www.10xgenomics.com/resources/datasets/6-k-pbm-cs-from-a-healthy-donor-1-standard-1-1-0">https://www.10xgenomics.com/resources/datasets/6-k-pbm-cs-from-a-healthy-donor-1-standard-1-1-0</ext-link></comment></element-citation></ref><ref id="R39"><label>[39]</label><element-citation publication-type="book"><source>10k pbmcs from a healthy donor (v3 chemistry), single cell gene expression dataset by cell ranger 3.0.0</source><publisher-name>10X Genomics</publisher-name><year>2018</year><comment>URL <ext-link ext-link-type="uri" xlink:href="https://www.10xgenomics.com/resources/datasets/10-k-pbm-cs-from-a-healthy-donor-v-3-chemistry-3-standard-3-0-0">https://www.10xgenomics.com/resources/datasets/10-k-pbm-cs-from-a-healthy-donor-v-3-chemistry-3-standard-3-0-0</ext-link></comment></element-citation></ref><ref id="R40"><label>[40]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Grimes</surname><given-names>JM</given-names></name><name><surname>Grimes</surname><given-names>KV</given-names></name></person-group><article-title>p38 mapk inhibition: A promising therapeutic approach for covid-19</article-title><source>Journal of Molecular and Cellular Cardiology</source><year>2020</year><volume>144</volume><fpage>63</fpage><lpage>65</lpage></element-citation></ref><ref id="R41"><label>[41]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Winn</surname><given-names>BJ</given-names></name></person-group><article-title>Is there a role for insulin-like growth factor inhibition in the treatment of covid-19-related adult respiratory distress syndrome?</article-title><source>Medical Hypotheses</source><year>2020</year><volume>144</volume><elocation-id>110167</elocation-id></element-citation></ref><ref id="R42"><label>[42]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Su</surname><given-names>M</given-names></name><etal/></person-group><article-title>A mini-review on cell cycle regulation of coronavirus infection</article-title><source>Frontiers in Veterinary Science</source><year>2020</year><fpage>943</fpage></element-citation></ref><ref id="R43"><label>[43]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chen</surname><given-names>R</given-names></name><name><surname>Wu</surname><given-names>X</given-names></name><name><surname>Jiang</surname><given-names>L</given-names></name><name><surname>Zhang</surname><given-names>Y</given-names></name></person-group><article-title>Single-cell rna-seq reveals hypothalamic cell diversity</article-title><source>Cell Rep</source><year>2017</year><volume>18</volume><fpage>3227</fpage><lpage>3241</lpage></element-citation></ref><ref id="R44"><label>[44]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Smedley</surname><given-names>D</given-names></name><etal/></person-group><article-title>The biomart community portal: an innovative alternative to large, centralized data repositories</article-title><source>Nucleic Acids Res</source><year>2015</year><volume>43</volume><fpage>W589</fpage><lpage>98</lpage></element-citation></ref><ref id="R45"><label>[45]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Harris</surname><given-names>CR</given-names></name><etal/></person-group><article-title>Array programming with numpy</article-title><source>Nature</source><year>2020</year><volume>585</volume><fpage>357</fpage><lpage>362</lpage></element-citation></ref><ref id="R46"><label>[46]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Picelli</surname><given-names>S</given-names></name><etal/></person-group><article-title>Smart-seq2 for sensitive full-length transcriptome profiling in single cells</article-title><source>Nature methods</source><year>2013</year><volume>10</volume><fpage>1096</fpage><lpage>1098</lpage></element-citation></ref><ref id="R47"><label>[47]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lopez</surname><given-names>R</given-names></name><name><surname>Regier</surname><given-names>J</given-names></name><name><surname>Cole</surname><given-names>MB</given-names></name><name><surname>Jordan</surname><given-names>MI</given-names></name><name><surname>Yosef</surname><given-names>N</given-names></name></person-group><article-title>Deep generative modeling for single-cell transcriptomics</article-title><source>Nature methods</source><year>2018</year><volume>15</volume><fpage>1053</fpage><lpage>1058</lpage></element-citation></ref><ref id="R48"><label>[48]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Svensson</surname><given-names>V</given-names></name><name><surname>Gayoso</surname><given-names>A</given-names></name><name><surname>Yosef</surname><given-names>N</given-names></name><name><surname>Pachter</surname><given-names>L</given-names></name></person-group><article-title>Interpretable factor models of single-cell rna-seq via variational autoencoders</article-title><source>Bioinformatics</source><year>2020</year><volume>36</volume><fpage>3418</fpage><lpage>3421</lpage></element-citation></ref><ref id="R49"><label>[49]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Shu</surname><given-names>H</given-names></name><etal/></person-group><article-title>Modeling gene regulatory networks using neural network architectures</article-title><source>Nature Computational Science</source><year>2021</year><volume>1</volume><fpage>491</fpage><lpage>501</lpage></element-citation></ref><ref id="R50"><label>[50]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Finak</surname><given-names>G</given-names></name><etal/></person-group><article-title>Mast: a flexible statistical framework for assessing transcriptional changes and characterizing heterogeneity in single-cell rna sequencing data</article-title><source>Genome biology</source><year>2015</year><volume>16</volume><fpage>1</fpage><lpage>13</lpage></element-citation></ref><ref id="R51"><label>[51]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Aliee</surname><given-names>H</given-names></name><name><surname>Theis</surname><given-names>FJ</given-names></name></person-group><article-title>Autogenes: Automatic gene selection using multi-objective optimization for rna-seq deconvolution</article-title><source>Cell Systems</source><year>2021</year><volume>12</volume><fpage>706</fpage><lpage>715</lpage></element-citation></ref><ref id="R52"><label>[52]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pedregosa</surname><given-names>F</given-names></name><etal/></person-group><article-title>Scikit-learn: Machine learning in python</article-title><source>the Journal of machine Learning research</source><year>2011</year><volume>12</volume><fpage>2825</fpage><lpage>2830</lpage></element-citation></ref><ref id="R53"><label>[53]</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Szegedy</surname><given-names>C</given-names></name><name><surname>Vanhoucke</surname><given-names>V</given-names></name><name><surname>Ioffe</surname><given-names>S</given-names></name><name><surname>Shlens</surname><given-names>J</given-names></name><name><surname>Wojna</surname><given-names>Z</given-names></name></person-group><source>Rethinking the inception architecture for computer vision</source><conf-name>Proceedings of the IEEE conference on computer vision and pattern recognition</conf-name><year>2016</year><fpage>2818</fpage><lpage>2826</lpage></element-citation></ref><ref id="R54"><label>[54]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Müller</surname><given-names>R</given-names></name><name><surname>Kornblith</surname><given-names>S</given-names></name><name><surname>Hinton</surname><given-names>GE</given-names></name></person-group><article-title>When does label smoothing help?</article-title><source>Advances in neural information processing systems</source><year>2019</year><volume>32</volume></element-citation></ref><ref id="R55"><label>[55]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hunter</surname><given-names>JD</given-names></name></person-group><article-title>Matplotlib: A 2d graphics environment</article-title><source>Computing in Science &amp; Engineering</source><year>2007</year><volume>9</volume><fpage>90</fpage><lpage>95</lpage></element-citation></ref><ref id="R56"><label>[56]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Waskom</surname><given-names>ML</given-names></name></person-group><article-title>seaborn: statistical data visualization</article-title><source>Journal of Open Source Software</source><year>2021</year><volume>6</volume><fpage>3021</fpage><pub-id pub-id-type="doi">10.21105/joss.03021</pub-id></element-citation></ref><ref id="R57"><label>[57]</label><element-citation publication-type="journal"><collab>pandas development team, T</collab><source>pandas-dev/pandas: Pandas</source><year>2020</year><pub-id pub-id-type="doi">10.5281/zenodo.3509134</pub-id></element-citation></ref><ref id="R58"><label>[58]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>da Costa-Luis</surname><given-names>C</given-names></name><etal/></person-group><source>tqdm: A fast, Extensible Progress Bar for Python and CLI</source><year>2022</year><pub-id pub-id-type="doi">10.5281/zenodo.7046742</pub-id></element-citation></ref><ref id="R59"><label>[59]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chen</surname><given-names>YS</given-names></name><name><surname>Wang</surname><given-names>YX</given-names></name></person-group><source>Deep autoencoder for interpretable tissue-adaptive deconvolution and cell-type-specific gene analysis poseidonchan/TAPE</source><year>2022</year><pub-id pub-id-type="doi">10.5281/zenodo.7183923</pub-id></element-citation></ref></ref-list></back><floats-group><boxed-text id="BX1" position="float" orientation="portrait"><caption><title>Algorithm 1: Adaptive Training Procedure</title></caption><p>    <bold>input    :</bold> Encoder parameters <italic>E</italic> and decoder parameters <italic>D</italic> from the initial training stage,</p><p>                      GEPs of bulk RNA-seq B of size <italic>n × m</italic>, step number <italic>α</italic>, max iteration <italic>β</italic></p><p>    <bold>output:</bold> signature matrix S of size <italic>k × m</italic>,</p><p>                     predicted fractions X of size <italic>n × k</italic>,</p><p>                     training loss <italic>L</italic></p><p>1 <inline-formula><mml:math id="M17"><mml:mrow><mml:msub><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>S</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mn>0</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mn>0</mml:mn></mml:msub><mml:mo>←</mml:mo><mml:mtext>model </mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mtext>B</mml:mtext><mml:mo stretchy="false">)</mml:mo><mml:mo>;</mml:mo></mml:mrow></mml:math></inline-formula></p><p>2 <bold>for</bold> <italic>k ←</italic> 1 <bold>to</bold> <italic>β</italic> <bold>do</bold></p><p>3       <bold>for</bold> <italic>i ←</italic> 1 <bold>to</bold> <italic>α</italic> <bold>do</bold></p><p>4             <inline-formula><mml:math id="M18"><mml:mrow><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo>,</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>X</mml:mi></mml:mstyle><mml:mo>←</mml:mo><mml:mtext>model </mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mo stretchy="false">)</mml:mo><mml:mo>;</mml:mo></mml:mrow></mml:math></inline-formula></p><p>5             <inline-formula><mml:math id="M19"><mml:mrow><mml:mi>L</mml:mi><mml:mo>←</mml:mo><mml:mtext>MAE </mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>MAE </mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>S</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:msub><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>S</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mn>0</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>;</mml:mo></mml:mrow></mml:math></inline-formula></p><p>6             <inline-formula><mml:math id="M20"><mml:mrow><mml:mi>D</mml:mi><mml:mo>←</mml:mo><mml:mi>D</mml:mi><mml:mo>−</mml:mo><mml:mfrac><mml:mrow><mml:mo>∂</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mo>∂</mml:mo><mml:mi>D</mml:mi></mml:mrow></mml:mfrac><mml:mo>;</mml:mo></mml:mrow></mml:math></inline-formula></p><p>7       <bold>end</bold></p><p>8       <bold>for</bold> <italic>j ←</italic> 1 <bold>to</bold> <italic>α</italic> <bold>do</bold></p><p>9              <inline-formula><mml:math id="M21"><mml:mrow><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mstyle mathvariant="bold"><mml:mi>S</mml:mi></mml:mstyle><mml:mo>←</mml:mo><mml:mtext>model </mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mo stretchy="false">)</mml:mo><mml:mo>;</mml:mo></mml:mrow></mml:math></inline-formula></p><p>10            <inline-formula><mml:math id="M22"><mml:mrow><mml:mi>L</mml:mi><mml:mo>←</mml:mo><mml:mtext>MAE </mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>B</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:mstyle mathvariant="bold"><mml:mi>B</mml:mi></mml:mstyle><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mtext>MAE </mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mstyle mathvariant="bold"><mml:mi>X</mml:mi></mml:mstyle><mml:mo>,</mml:mo><mml:mtext> </mml:mtext><mml:msub><mml:mstyle mathvariant="bold"><mml:mover accent="true"><mml:mi>X</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:mstyle><mml:mn>0</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>;</mml:mo></mml:mrow></mml:math></inline-formula></p><p>11            <inline-formula><mml:math id="M23"><mml:mrow><mml:mi>E</mml:mi><mml:mo>←</mml:mo><mml:mi>E</mml:mi><mml:mo>−</mml:mo><mml:mfrac><mml:mrow><mml:mo>∂</mml:mo><mml:mi>L</mml:mi></mml:mrow><mml:mrow><mml:mo>∂</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:mfrac><mml:mo>;</mml:mo></mml:mrow></mml:math></inline-formula></p><p>12      <bold>end</bold></p><p>13 <bold>end</bold></p><p>14 S, X <italic>←</italic> model(B);</p></boxed-text><fig id="F1" position="float"><label>Figure 1</label><caption><title>TAPE workflow and clarification of adaptive stage.</title><p><bold>a</bold> TAPE takes scRNA-seq data from human or mouse and RNA-seq data from the homologous tissue as input, then performs the deconvolution as well as the prediction of cell-type-specific GEPs via a training stage and an adaptive stage. <bold>b</bold> Generation of the cell-type-specific GEPs has two separate modes. The first is the “high-resolution” mode: TAPE takes the RNA-seq data from one sample at a time as input and outputs the adapted cell-type-specific signature matrix for each sample. The second is the “overall” mode: TAPE takes all the RNA-seq data at one time as input and outputs one signature matrix adapted to all samples. n is the number of samples, m is the number of genes, k is the number of cell types.</p></caption><graphic xlink:href="EMS139884-f001"/></fig><fig id="F2" position="float"><label>Figure 2</label><caption><title>Comparison of deconvolution algorithms on benchmark datasets.</title><p><bold>a</bold> Deconvolution procedure diagram. Bulk RNA-seq data and single-cell data should come from a homologous tissue. <bold>b</bold> Time complexity analysis of different methods (including pre-processing steps). Time measured by seconds is scaled by Log() to show the differences more clearly. These tests are conducted on the simulated data. The time limit is set to 2500s. Any longer test was not conducted. <bold>c</bold> Deconvolution results on simulated data. CCC represents the Lin’s concordance correlation coefficient, measuring the concordance between the predicted fraction and the ground truth. MAE represents mean absolute error, measuring the accuracy of prediction. Higher CCC and lower MAE are better. Each box contains metric values for all the cell types considered in all the tissues. Different color refers to different methods. Sample size in the four scenarios from left to right is 44, 12, 4, and 4, respectively. Sample size of different method is the same. <bold>d</bold> Deconvolution results on real data. The columns’ labels refer to the datasets. CCC and MAE are used as metrics. Sample size of each method on each dataset consistently equals to 5. In the (<bold>c</bold>, <bold>d</bold>), the boxes represent interquartile range (IQR) while the solid line represents the median. The whiskers extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed as points independently. Source data are provided as a Source Data file.</p></caption><graphic xlink:href="EMS139884-f002"/></fig><fig id="F3" position="float"><label>Figure 3</label><caption><title>Deconvolution benchmark on datasets with clinical information.</title><p><bold>a</bold> Comparison of estimated neuron cell proportion on different <italic>Braak</italic> stages between different models on the ROSMAP dataset. Neuron content is expected to decrease along with the development of AD. <bold>b</bold> Microglia content estimated by different methods on <italic>Braak</italic> stage. The fraction is expected to increase from stage 0 to 5 followed by a decrease from stage 5 to 6. In (<bold>a</bold>, <bold>b</bold>), sample size of each stage from 0 to 6 is 7, 43, 47, 150, 174, 104, and 7, respectively. The boxes represent IQR while the solid line represents the median. The whiskers extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed as points independently. <bold>c</bold> Estimated MLR value calculated from the estimated monocytes fraction divided by the sum of estimated proportions of CD4<sup>+</sup> T cell, CD8<sup>+</sup> T cell, and B cell. We expect MLR value increases from mild (n=12) stage to moderate (n=14) and serious (n=12) stage. After one-sided Wilcoxon signed-rank test, we find that MLR increasement from mild to serious stage of TAPE has significance with <italic>p</italic> = 0.0461. <bold>d</bold> Estimated beta cell fractions of cultured islet in different conditions. The middle column represents samples infected with SARS-CoV-2, and the right one means samples treated with <italic>Remdesivir</italic> after infection. Sample size of each bar is 2. The model should predict the restoration of beta cell content after being treated with medication. One-sided t-test was used due to the small sample size. For TAPE’s prediction, the <italic>p</italic>-value is 0.0475 and 0.0142 for normal versus infected and treated versus infected, respectively. In (<bold>c</bold>, <bold>d</bold>), these data are presented as mean values <italic>±</italic> standard error of the mean. <italic>p</italic>-value with notation * means <italic>p &lt;</italic> 0.05, with notation <italic>ns</italic> means no significance. Source data are provided as a Source Data file.</p></caption><graphic xlink:href="EMS139884-f003"/></fig><fig id="F4" position="float"><label>Figure 4</label><caption><title>Cell-type-specific gene expression analysis.</title><p><bold>a</bold> Concordance between the predicted relative gene expression value in simulated bulk data and the relative gene expression value in single-cell data. The relative gene expression value is the original expression value after Log<sub>2</sub> and MinMaxScaler() transformation. <bold>b</bold> Concordance between the predicted relative gene expression value in real bulk data and the relative gene expression value in single-cell data. <bold>c,d</bold> Estimated signature matrix after the adaptive stage in the “overall” mode. The gene expression is normalized with Z-Score. The genes are selected by the differential expression in different cell types after the adaptive stage. The differences between before and after the adaptive stage indicate that TAPE could not only make the signature matrix adapted to new data but also maintain concordance with the original one. <bold>e</bold> Differentially expressed genes detected from bulk RNA-seq data. The color indicates the AUROC value, red means better classification performance. Each row corresponds to different up-regulated foldchanges of randomly selected genes in CD8 T cells. Each column refers to CD8 T cell proportion in simulated bulk data. <bold>f</bold> Differentially expressed genes detected by CIBERSORTx and TAPE in different cell types. DEGs should only be detected from CD8 T cell. <bold>g</bold> The relative gene expression value of <italic>NRGN</italic> from different sources. The dashed line represents the total relative <italic>NRGN</italic> expression value in the AD patients’ brain tissue. The missing column means the relative gene expression value of prediction or single-cell data is zero. <bold>h</bold> Boxplots of the estimated <italic>RAB11FIP5</italic> gene expression values in different cell types by different methods. Both control group and BNab group have 46 samples in it. The estimated <italic>RAB11FIP5</italic> values by CIBERSORTx in other cell types are NaN (not shown). <italic>p</italic>-value is calculated from two-sided t-test. <italic>p</italic>-value has been adjusted by the false discovery rate. <italic>p</italic>-value with notation <italic>*</italic> means <italic>p &lt;</italic> 0.05 (exact value for TAPE is 0.025), with notation <italic>**</italic> means <italic>p &lt;</italic> 0.01 (exact value for CIBERSORTx is 0.00041). The boxes represent IQR while the solid line represents the median. The whiskers extend to points that lie within 1.5 IQRs of the lower and upper quartile, and then observations that fall outside this range are displayed as points independently. Source data are provided as a Source Data file.</p></caption><graphic xlink:href="EMS139884-f004"/></fig><fig id="F5" position="float"><label>Figure 5</label><caption><title>Function enrichment of cell-specific GEP.</title><p><bold>a</bold> Heatmap of enrichment scores for various cell types, including B cells, CD4 T cells, CD8 T cells, Dendritic cells, Monocytes, and NK cells within different virus infection samples. The enrichment scores have been scaled by the Z-Score. The top row annotation represents the virus types of the infection. The left column annotation represents the corresponding cell types of the enriched pathway. <bold>b-d</bold> Significantly enriched pathway upset plots for <bold>b</bold> B cells, <bold>c</bold> Monocytes, and <bold>d</bold> NK cells in three kinds of virus infection. <bold>e-g</bold> Heatmaps of enrichment scores for <bold>e</bold> B cells, <bold>f</bold> Monocytes, and <bold>g</bold> NK cells. Source data are provided as a Source Data file.</p></caption><graphic xlink:href="EMS139884-f005"/></fig></floats-group></article>