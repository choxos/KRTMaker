<!DOCTYPE article
 PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">
<article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="preprint"><?all-math-mml yes?><?use-mml?><?origin ukpmcpa?><front><journal-meta><journal-id journal-id-type="nlm-ta">bioRxiv</journal-id><journal-title-group><journal-title>bioRxiv : the preprint server for biology</journal-title></journal-title-group><issn pub-type="ppub"/></journal-meta><article-meta><article-id pub-id-type="manuscript">EMS158938</article-id><article-id pub-id-type="doi">10.1101/2022.12.15.520571</article-id><article-id pub-id-type="archive">PPR586961</article-id><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>SIMplyBee: R package for simulating honeybee populations and breeding programs</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Obšteter</surname><given-names>Jana</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="corresp" rid="CR1">*</xref></contrib><contrib contrib-type="author"><name><surname>Strachan</surname><given-names>Laura K.</given-names></name><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><name><surname>Bubniš</surname><given-names>Jernej</given-names></name><xref ref-type="aff" rid="A1">1</xref></contrib><contrib contrib-type="author"><name><surname>Prešern</surname><given-names>Janez</given-names></name><xref ref-type="aff" rid="A1">1</xref></contrib><contrib contrib-type="author"><name><surname>Gorjanc</surname><given-names>Gregor</given-names></name><xref ref-type="aff" rid="A2">2</xref></contrib></contrib-group><aff id="A1"><label>1</label>Department of Animal Science, The Agricultural Institute of Slovenia, Ljubljana, Slovenia</aff><aff id="A2"><label>2</label>The Roslin Institute and Royal (Dick) School of Veterinary Medicine, The University of Edinburgh, Edinburgh, UK</aff><aff id="A3"><label>3</label>Biotechnical Faculty, Department of Animal Science, The University of Ljubljana, Ljubljana, Slovenia</aff><author-notes><corresp id="CR1">
<label>*</label>Correspondence: <email>jana.obsteter@kis.si</email></corresp></author-notes><pub-date pub-type="nihms-submitted"><day>23</day><month>12</month><year>2022</year></pub-date><pub-date pub-type="preprint"><day>19</day><month>12</month><year>2022</year></pub-date><permissions><ali:free_to_read/><license><ali:license_ref>https://creativecommons.org/licenses/by-nc-nd/4.0/</ali:license_ref><license-p>This work is licensed under a <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by-nc-nd/4.0/">CC BY-NC-ND 4.0 International license</ext-link>.</license-p></license></permissions><abstract><sec id="S1"><title>Background</title><p id="P1">The Western honeybee is an economically important species globally, but has been experiencing colony losses that lead to economical damage and decreased genetic variability. This situation is spurring additional interest in honeybee breeding and conservation programs. Stochastic simulators are essential tools for rapid and low-cost testing of breeding programs and methods, yet no existing simulator allows for a detailed simulation of honeybee populations. Here we describe SIMplyBee, a holistic simulator of honeybee populations and breeding programs. SIMplyBee is an R package and hence freely available for installation from CRAN <ext-link ext-link-type="uri" xlink:href="http://cran.r-project.org/package=SIMplyBee">http://cran.r-project.org/package=SIMplyBee</ext-link>.</p></sec><sec id="S2"><title>Implementation</title><p id="P2">SIMplyBee builds upon the stochastic simulator AlphaSimR that simulates individuals with their corresponding genomes and quantitative genetic values. To enable a honeybee specific simulation, we extended AlphaSimR by developing classes for global simulation parameters, SimParamBee, for a honeybee colony, Colony, and multiple colonies, MultiColony. We also developed functions to address major specificities of the honeybees: honeybee genome, haplo-diploid inheritance, social organisation, complementary sex determination, polyandry, colony events, and quantitative genetics of honeybees.</p></sec><sec id="S3"><title>Results</title><p id="P3">We describe and show implementation regarding simulating a honeybee genome, creating a honeybee colony and its members, haplodiploid inheritance and complementary sex determination, colony events, creating and managing multiple colonies at once, and obtaining genomic data and honeybee quantitative genetics. Further documentation at <ext-link ext-link-type="uri" xlink:href="http://SIMplyBee.info">http://SIMplyBee.info</ext-link> provides details on these operations and describes additional operations related to genomics, quantitative genetics, and other functionality.</p></sec><sec id="S4"><title>Discussion</title><p id="P4">SIMplyBee is a holistic simulator of honeybee populations and breeding programs that simulates individual honeybees with their genomes, colonies with colony events, and individual- and colony-level quantitative values. SIMplyBee provides a research platform for testing breeding and conservation strategies and their effect on future genetic gain and variability. Future development of SIMplyBee will focus on improving the simulation of honeybee genomes, optimizing the performance of the simulator, and including spatial awareness to crossing functions and phenotype simulation. We welcome the honeybee genetics and breeding community to join us in the future development of SIMplyBee.</p></sec></abstract><kwd-group><kwd>stochastic simulator</kwd><kwd>honeybees</kwd><kwd>breeding programs</kwd><kwd>conservation programs</kwd></kwd-group></article-meta></front><body><sec id="S5" sec-type="intro"><title>Background</title><p id="P5">The Western honeybee <italic>(Apis mellifera</italic>) is an economically important species globally, playing a major role in pollination and food production. The value of insect pollinators is estimated at 150 billion euros per year worldwide, which is approximately 10 percent of the global agriculture production [<xref ref-type="bibr" rid="R1">1</xref>, <xref ref-type="bibr" rid="R2">2</xref>, <xref ref-type="bibr" rid="R3">3</xref>]. In recent decades, both wild and managed populations have been experiencing increased colony losses due to numerous biotic and abiotic factors [<xref ref-type="bibr" rid="R4">4</xref>, <xref ref-type="bibr" rid="R5">5</xref>, <xref ref-type="bibr" rid="R6">6</xref>]. Besides the economic loss, high colony mortality and human-mediated hybridisation have also driven the loss of within species diversity during the last century and put native subspecies at risk [<xref ref-type="bibr" rid="R7">7</xref>, <xref ref-type="bibr" rid="R5">5</xref>, <xref ref-type="bibr" rid="R8">8</xref>, <xref ref-type="bibr" rid="R9">9</xref>]. Although honeybees are a diverse species that is differentiated into 7 evolutionary lineages and 33 subspecies [<xref ref-type="bibr" rid="R10">10</xref>, <xref ref-type="bibr" rid="R11">11</xref>], two subspecies, <italic>A. m. ligustica</italic> and <italic>A. m. carnica,</italic> dominate the vast majority of commercial beekeeping operations [<xref ref-type="bibr" rid="R12">12</xref>]. The loss of genetic variability can decrease the fitness of the populations and further increases the susceptibility of populations to ecological and anthropogenic factors [<xref ref-type="bibr" rid="R5">5</xref>, <xref ref-type="bibr" rid="R9">9</xref>].</p><p id="P6">Due to increased colony losses and decline in genetic diversity there has been an increased interest in honeybee management programs, either for breeding, conservation, or both. Breeding programs aim to improve honeybee production, behaviour, and resistance to pathogens, and manage genetic diversity that enables long-term response to selection. Conservation programs aim to preserve populations of endangered or native species by managing genetic diversity, reducing inbreeding depression, maintaining locally adaptive traits, and reducing the prevalence of pathogens.</p><p id="P7">The increased interest in honeybee breeding has spurred additional research in quantitative genetics of honeybees. Stochastic simulators are an essential tool for <italic>in-silico</italic> development and testing of quantitative genetic and statistical methods, and breeding strategies [<xref ref-type="bibr" rid="R13">13</xref>, <xref ref-type="bibr" rid="R14">14</xref>, <xref ref-type="bibr" rid="R15">15</xref>, <xref ref-type="bibr" rid="R16">16</xref>]. While simulations rest on a number of assumptions, they enable cost effective and rapid testing of hypotheses before practical deployment. There are a number of simulators available for the most commercially interesting mammalian or plant species [<xref ref-type="bibr" rid="R13">13</xref>, <xref ref-type="bibr" rid="R15">15</xref>, <xref ref-type="bibr" rid="R16">16</xref>]. Due to the differences in biology and social organisation, these simulators cannot simulate honeybee populations. Although there are existing honeybee simulators, they are either too simplistic, do not simulate genomes and genetic and phenotypic values of individual honeybees, lack flexibility to simulate the honeybee colony life cycle or the entire breeding program, or are not available as open source [<xref ref-type="bibr" rid="R14">14</xref>, <xref ref-type="bibr" rid="R17">17</xref>]. One of such honeybee simulators is BeeSim [<xref ref-type="bibr" rid="R14">14</xref>] that accounts for the quantitative genetics of the honeybees, but simulates quantitative values on the colony level, does not account for the colony events, and is also not publicly available. Another honeybee simulator, BEEHAVE [<xref ref-type="bibr" rid="R17">17</xref>], simulates colony and population dynamics as well as environmental variation to explore causes of colony failures and colony performance, but does not include genetics.</p><p id="P8">The aim of this work was to develop a holistic simulator of honeybee population management programs, SIMplyBee. SIMplyBee simulates i) genomes and quantitative values of individual honeybees as well as whole colonies, ii) major biological, reproductive, and organisational specificities of the honeybees, and iii) colony events. SIMplyBee is freely available for installation from CRAN (<monospace><ext-link ext-link-type="uri" xlink:href="http://cran.r-project.org/package=SIMplyBee">http://cran.r-project.org/package=SIMplyBee</ext-link></monospace>) with extensive help pages, examples, and vignettes. See also <monospace><ext-link ext-link-type="uri" xlink:href="http://www.SIMplyBee.info">http://www.SIMplyBee.info</ext-link></monospace>. We welcome contributions from the community at <monospace><ext-link ext-link-type="uri" xlink:href="https://www.github.com/HighlanderLab/SIMplyBee">https://www.github.com/HighlanderLab/SIMplyBee</ext-link></monospace>. In the following, we describe the theory and technical implementation in the SIMplyBee, demonstrate the use of SIMplyBee, and discuss the potential use of SIMplyBee and our plans for its future development.</p></sec><sec id="S6"><title>Implementation</title><p id="P9">SIMplyBee builds upon an established simulator, Al-phaSimR [<xref ref-type="bibr" rid="R18">18</xref>, <xref ref-type="bibr" rid="R15">15</xref>], and shares its core simulation principles and functionality. AlphaSimR is a stochastic simulator that simulates individuals with their corresponding genomes and quantitative genetic and phenotypic values. The most important classes in AlphaSimR are the <monospace>SimParam</monospace> class for global simulation parameters and the <monospace>Pop</monospace> class for objects that hold a group of individuals with their individual identification, parent identifications, as well as genomes and trait values.</p><p id="P10">To enable a honeybee specific simulation, we extended AlphaSimR by developing dedicated classes: <monospace>SimParamBee</monospace> for global simulation parameters, <monospace>Colony</monospace> for a honeybee colony, and <monospace>MultiColony</monospace> for multiple honeybee colonies. We also developed functions to simulate honeybee populations and its events and facilitate an inspection or analysis of the results. The functions address major specificities of the honeybees: honeybee genome, honeybe biology, including haplodiploid inheritance, complementary sex determination, social organisation, and polyandry, and colony events. Functionally, we organised these functions in five functional groups related to genome and genomic information, caste operations, colony and multicolony operations, quantitative genetics, and auxiliary operations. From the operational standpoint of the SIMplyBee R package, we separated these functions into four operational levels with respect to their simplest return objects: level 0 being auxiliary functions returning standard R class objects such as vectors, matrices, and lists; level 1 returning an AlphaSimR Pop class object; level 2 returning a SIMplyBee <monospace>Colony</monospace> class object; and level 3 returning a SIMplyBee <monospace>MultiColony</monospace> class object. The total codebase spans over 16,000 lines of R code, documentation, and unit tests.</p></sec><sec id="S7" sec-type="results"><title>Results</title><p id="P11">Here, we present the SIMplyBee functionality. We briefly describe the biological mechanisms behind the functionality and demonstrate its use. We describe: i) simulating honeybee genome; ii) creating a honeybee colony and its members; iii) haplodiploid inheritance and the complementary sex determination locus <italic>CSD</italic>; iv) colony events; v) working with multiple colonies; and vi) honeybee genomics and quantitative genetics.</p><sec id="S8"><title>Honeybee genome and initiating a honeybee simulation</title><p id="P12">To initiate the simulation we first need to simulate honeybee genomes and set simulation parameters (<xref ref-type="fig" rid="F1">Figure 1</xref>). The honeybee genome is small in its physical length, only 250 million bp, but large in its genetic length, 23 Morgans, due to a very high recombination rate of 2.3 x 10<sup>–7</sup> per bp [<xref ref-type="bibr" rid="R19">19</xref>]. In SIMplyBee, we generate honeybee genome sequences with the approximate (Markovian) coalescent simulator MaCS [<xref ref-type="bibr" rid="R20">20</xref>] according to the most complete honeybee demographic model [<xref ref-type="bibr" rid="R21">21</xref>]. We are currently simulating three subspecies: <italic>A. m. ligustica, A. m. carnica,</italic> and A. <italic>m. mellifera.</italic></p><p id="P13">To start the simulation we initially install the SIMplyBee package and load it. <preformat preformat-type="computer code">
&gt; install.packages(pkg = “SIMplyBee”)
&gt; library (package = “SIMplyBee”)</preformat></p><p id="P14">First, we generate founder honeybee genomes using <monospace>simulateHoneybeeGenome()</monospace>. Alternatively, we can import chromosome haplotypes, say from drones, phased queen or worker genotypes. Here, we simulate 10 <italic>A. m. carnica</italic> honeybees with only three chromosomes, each with only 100 segregating sites. These numbers are not realistic, but enable a fast demonstration. You can read more about initiating a simulation in the Additional File 1. <preformat preformat-type="computer code">
&gt; founderGenomes &lt;-
   simulateHoneyBeeGenomes(nCar = 10,
                           nChr = 3,
                           nSegSites = 100)</preformat></p><p id="P15">Second, we set global simulation parameters with <monospace>SimParamBee. SimParamBee</monospace> builds upon the AlphaSimR class <monospace>SimParam</monospace>, which contains global user-defined simulation parameters that apply to all individuals and populations, including genome and trait parameters, but also global pedigree and recombination events. <monospace>SimParamBee</monospace> additionally holds honeybee-specific information: default numbers of workers (<monospace>nWorkers</monospace>), drones (nDrones), and virgin queens (<monospace>nVirginQueens</monospace>) in a full-size colony, default number of drones that a queen mates with (<monospace>nFathers</monospace>), default proportions of workers that leave in a colony swarm (<monospace>swarmP</monospace>) or are removed in a colony split (<monospace>splitP</monospace>), and a default percentage of workers removed during colony downsize (<monospace>downsizeP</monospace>). These default numbers can be changed according to the needs of a simulation. The default numbers can even be replaced by providing functions to sample numbers. For example, to sample variable number of fathers, workers, drones, and virgin queens from Poisson or truncated Poisson distributions (Additional File 7). Most SIMplyBee functions that take the number of individuals as an argument can accept these sampling functions as input, meaning that the output of such function calls will be stochastic. <monospace>Sim-ParamBee</monospace> also holds information about the <italic>CSD</italic> locus: the chromosome (<monospace>csdChr</monospace>), the physical position on the chromosome (<monospace>csdPos</monospace>), and the number of alleles (<monospace>nCsdAlleles</monospace>). <monospace>SimParamBee</monospace> also holds the caste of each individual in the simulation. The caste can be a queen, father (drones that successfully mated and died), worker, drone, or virgin queen. The caste can change during the life of a honeybee. For example, after successful mating, a virgin queen becomes a queen and drones become fathers.</p><p id="P16">Here, we show how to set the <monospace>SimParamBee</monospace> with the default number of workers in a colony being 100, default number of drones in a colony being 10, and the <italic>CSD</italic> locus to have 32 alleles. We save the output to the <monospace>SP</monospace> object, which enables its direct use for other SIMplyBee functions without explicitly passing it as an argument. <preformat preformat-type="computer code">&gt; SP &lt;- SimParamBee$new(founderGenomes,
                        nWorkers = 100,
                        nDrones = 10,
                        csdChr = 3,
                        nCsdAlleles = 32)</preformat></p></sec><sec id="S9"><title>Colony as an operational unit</title><p id="P17">Honeybees live in colonies organized into two castes, the queens and the workers, and the drones. The queen is a single reproductive diploid female, the workers are non-reproductive diploid females and perform various colony maintenance tasks (collect food, nurse larvae, clean cells, etc.), and the drones are reproductive haploid males. A single colony can contain up to 65,000 workers ([<xref ref-type="bibr" rid="R22">22</xref>]. Drones can represent up to 20% of a honeybee colony [<xref ref-type="bibr" rid="R23">23</xref>]. In SIMplyBee, we accounted for this social organisation by creating a class <monospace>Colony</monospace> that holds all the above mentioned individuals as AlphaSimR populations. For the ease of use, we refer to all these groups as “castes”. We also consider the drones that the queen mated with (fathers) and the virgin queens (queen-cells or emerged virgin queens) as “castes”, although the term is not biologically correct. The <monospace>Colony</monospace> further contains technical information about the colony, its identification (<monospace>id</monospace>) and location (<monospace>location</monospace>) coded as (<monospace>latitude, longitude</monospace>) coordinates. Further, it contains logical information about the past colony events: <monospace>split</monospace>, <monospace>swarm</monospace>, <monospace>supersedure</monospace>, or <monospace>collapse</monospace>. It also contains production status, which indicates whether we can collect a production phenotype from the colony. The latter is possible when the colony is built-up to its full size and has not swarmed. The production is turned off when a colony downsizes, collapses, swarms, or is a split from a colony.</p><p id="P18">Here we show how to create a colony in SIMplyBee (<xref ref-type="fig" rid="F1">Figure 1</xref>). From the founder genomes, we create a base population of virgin queens (an AlphaSimR’s Pop class object). We check whether they are really virgin queens with the function <monospace>isVirginQueen()</monospace>. SIMply-Bee contains a similar <monospace>is*()</monospace> function for checking the caste of each honeybee, where <monospace>*</monospace> is the inquired caste. These functions return <monospace>TRUE</monospace> or <monospace>FALSE</monospace> when an individual belongs or does not belong to the caste. <preformat preformat-type="computer code">
&gt; baseQueens &lt;-
   createVirginQueens(founderGenomes)
&gt; baseQueens
An object of class “Pop”
Ploidy: 2
Individuals: 10
Chromosomes: 3
Loci: 300
Traits: 0
&gt; all (isVirginQueen(baseQueens))
[1] TRUE</preformat></p><p id="P19">From the first virgin queen, we create a <monospace>Colony</monospace> object. We can also use <monospace>n</monospace> simulated queens to simulate <monospace>n</monospace> colonies. Printout of a <monospace>Colony</monospace> object returns its basic information: the <monospace>id</monospace> (1), location (not set, hence <monospace>NA</monospace>), queen (not yet available, hence <monospace>NA</monospace>), the number of fathers, workers, drones, and virgin queens, as well as colony event statuses. <preformat preformat-type="computer code">
&gt; colony &lt;- createColony(x = baseQueens[2])
&gt; colony
An object of class “Colony”
Id: 1
Location:
Queen: NA
Number of fathers: 0
Number of workers: 0
Number of drones: 0
Number of virgin queens: 1
Has split: FALSE
Has swarmed: FALSE
Has superseded: FALSE
Has collapsed: FALSE
Is productive: FALSE</preformat></p><p id="P20">From the second virgin queen, we create drones for mating, the drone congregation area (DCA) (<xref ref-type="fig" rid="F1">Figure 1</xref>). You can use more than one virgin queen to create a DCA. Technically, virgin queens do not create drones, only queens with colonies do that. However, to kick-start the simulation, we need drones. The function <monospace>createDrones()</monospace> can therefore work with a virgin queen or a mated queen in colony as the input to create drones. SIMplyBee contains a <monospace>create*()</monospace> function for each of the castes. <preformat preformat-type="computer code">
&gt; baseDrones &lt;- createDrones(x = baseQueens[1],
                             nInd = 15)</preformat></p><p id="P21">In honeybees, the virgin queens mate with multiple drones, a phenomena termed polyandry. A honeybee virgin queen will undergo several mating flights to a drone congregation area (DCA) that consists of thousands of drones from up to 240 colonies [<xref ref-type="bibr" rid="R24">24</xref>]. There, she will mate with 6 to 24 drones [<xref ref-type="bibr" rid="R25">25</xref>] and store the sperm in spermatheca for life.</p><p id="P22">Here, we now show how to mate our virgin queen in the colony with the function <monospace>cross()</monospace> to promote her to a queen so she can lay eggs for workers and drones. After the crossing, we inspect the colony printout and see that the identification of the queen is <monospace>“2”</monospace>, that there are 15 fathers, and that there are no more virgin queens in the colony. <preformat preformat-type="computer code">
&gt; colony &lt;- cross(colony,
                  drones = baseDrones)
&gt; colony
An object of class “Colony”
Id: 1
Location:
Queen: 2
Number of fathers: 15
...
Number of virgin queens: 0
...</preformat></p><p id="P23">In SIMplyBee, we developed additional functionality regarding open or controlled mating that we describe in detail in the Crossing vignette in Additional File 4. There is a function to i) create a DCA for open mating, <monospace>createDCA()</monospace>, or a DCA with drones from sister queens, as commonly found on honeybee mating stations, <monospace>createMatingStationDCA()</monospace>; ii) sample a desired number of drones from a DCA, <monospace>pullDroneGroupsFromDCA()</monospace>; iii) create a cross plan, which includes information about which drones will mate with each virgin queen, <monospace>createRandomCrossPlan()</monospace>; iv) cross a virgin queen to a selected population of drones or according to a user defined cross plan, cross().</p><p id="P24">Next, we show to to build-up the colony with workers and drones with the <monospace>buildUpColony()</monospace> function. We can specify the number of workers and drones. Without specifying these numbers, the function uses default numbers in the <monospace>SimParamBee</monospace> object. Building up the colony always switches the production status to <monospace>TRUE</monospace>. <preformat preformat-type="computer code">
&gt; colony &lt;- buildUp(colony)
&gt; colony
Id: 1
Queen: 2
Number of fathers: 15
Number of workers: 100
Number of drones: 10
...
Is productive: TRUE</preformat></p><p id="P25">SIMplyBee also contains <monospace>n*()</monospace> functions to count individuals in each caste. <preformat preformat-type="computer code">
&gt; nQueens(colony)
[1] 1
&gt; nFathers(colony)
[1] 15
&gt; nWorkers(colony)
[1] 100
&gt; nDrones(colony)
[1] 10
&gt; nVirginQueens(colony)
[1] 0</preformat></p><p id="P26">We can access individuals using <monospace>get*()</monospace> functions. Note that these functions copy individuals and hence leave individuals in the colony-check <monospace>pull*()</monospace> functions for ”pulling” individuals out of the colony. <preformat preformat-type="computer code">
&gt; queen &lt;- getQueen(colony)
&gt; fathers &lt;- getFathers(colony)
&gt; workers &lt;- getWorkers(colony)
&gt; drones &lt;- getDrones(colony)
&gt; virginQueens &lt;- getVirginQueens(colony)</preformat></p><p id="P27">We can access the caste information of every individual with the <italic>getCaste()</italic> function. <preformat preformat-type="computer code">
&gt; getCaste(queen)
[1] “queen”
&gt; getCaste(drones[1:2])
[1] “drones” “drones”</preformat></p><p id="P28">The <monospace>getCaste()</monospace> can be very useful when you have a group of honeybees and you do not know their source. <preformat preformat-type="computer code">
&gt; bees &lt;-c (queen, fathers[1:2],
            workers[1:2], drones[1])
&gt; getCaste(bees)
[1] “queen” “fathers” “fathers”
    “workers” “workers” “drones”</preformat></p><p id="P29">Additional functions for caste operations include obtaining the identifications of caste members, and set or get the year of birth and age of the queen. To work with castes within a Colony object, <monospace>use addCastePop(), replaceCastePop(), or removeCastePop()</monospace>, which all return a modified Colony object.</p></sec><sec id="S10"><title>Haplodiploidy and <italic>CSD</italic></title><p id="P30">Honeybees belong to the insect order Hymenoptera. The order is characterised by haplo-diploid inheritance [<xref ref-type="bibr" rid="R26">26</xref>, <xref ref-type="bibr" rid="R27">27</xref>, <xref ref-type="bibr" rid="R28">28</xref>]. In SIMplyBee, we accounted for the haplo-diploidy by simulating queens and workers as proper diploids and males as doubled haploids. Doubled hap-loids are fully homozygous individuals. However, we only use one (haploid) genome set in all drone operations inside the functions.</p><p id="P31">Second, besides haplo-diploidy, sex in honeybees is determined by the complementary sex determination <italic>(CSD</italic>) locus. Fertilised eggs that are heterozygous at the <italic>CSD</italic> locus develop into diploid females, while homozygotes develop into non-viable diploid drones [<xref ref-type="bibr" rid="R29">29</xref>]. In SIMplyBee, we assign a specific region of the genome to represent the <italic>CSD</italic> gene. This region corresponds to the position of the <italic>CSD</italic> on chromosome three [<xref ref-type="bibr" rid="R30">30</xref>]. We simulate the <italic>CSD</italic> region as a sequence of non-recombining biallelic SNPs which determine a <italic>CSD</italic> allele. To account for balancing selection [<xref ref-type="bibr" rid="R31">31</xref>] at the <italic>CSD</italic> locus, we edit the initial founder genomes to achieve the desired number and frequency of <italic>CSD</italic> alleles in a population. The user can control the number of possible <italic>CSD</italic> alleles (2<sup>length</sup>) by controlling the length of the locus (in number of SNPs) in the simulated population.</p><p id="P32">We retrieve <italic>CSD</italic> alleles with <monospace>getCsdAlleles()</monospace>, which for diploids reports two non-recombining haplotypes as strings of 0s and 1s representing respectively ancestral and mutation alleles along the <italic>CSD</italic> locus. Here we show the queen’s <italic>CSD</italic> alleles. The first row of the output shows locus identifications (<monospace>chromosome_-locus</monospace>) and the first column shows haplotype identifications (<monospace>individual_haplotype</monospace>). We see that the two sequences are different, meaning that she is heterozygous, as expected -otherwise her egg would have developed into a diploid drone that would have been killed by workers. <preformat preformat-type="computer code">
&gt; getCsdAlleles(queen)
    3_86 3_87 3_88 3_89 3_90
2_1 1 1 0 1 0 2
2_2 0 1 1 0 1
&gt; isCsdHeterozygous(queen)
   2
TRUE</preformat></p><p id="P33">The <italic>CSD</italic> heterozygosity of honeybees is critical. Comparing <italic>CSD</italic> alleles of this queen and the drones she mated with (compare <monospace>getCsdAlleles(queen</monospace>) and <monospace>getCsdAlleles(fathers)</monospace> - not shown) shows no allele matches, which means we do not expect any homozygous brood in this colony. We obtain the theoretical brood homozygosity of a queen with <monospace>pHom-Brood()</monospace> and realized number of homozygous offspring with <monospace>nHomBrood()</monospace>. <preformat preformat-type="computer code">
&gt; pHomBrood(colony)
[1] 0</preformat></p><p id="P34">Let’s create an inbred colony, by mating a virgin queen from our colony with her brothers, and inspect the expected brood homozygosity. <preformat preformat-type="computer code">
&gt; newVirginQueen &lt;-
    createVirginQueens(x = colony,
                       nInd = 1)
&gt; fathers &lt;- createDrones(colony,
                          nInd = 10)
&gt; newQueen &lt;- cross(newVirginQueen,
                    drones = fathers)
&gt; inbredColony &lt;- createColony(newQueen)
&gt; pHomBrood(inbredColony)
[1] 0.25</preformat></p><p id="P35">We see that the expected brood homozygosity is 0.25, hence we expect that about 25% of diploid brood will be homozygous. We now add workers to the colony to observe how many of them are homozygous. Inheritance is a random process, so a realised number of homozygotes will deviate from the expected proportion. <preformat preformat-type="computer code">
&gt; inbredColony &lt;- addWorkers(inbredColony,
                             nInd = 100)
&gt; nWorkers(inbredColony)
[1] 71
&gt; nHomBrood(inbredColony)
[1] 29</preformat></p><p id="P36">We tried adding 100 workers, but we only got 71. The difference of 29 is due to non-viable CSD homozygous brood. The information about the number of homozygous brood is stored in the queen’s miscellaneous slot and is updated every time we create offspring from her.</p></sec><sec id="S11"><title>Colony events</title><p id="P37">A honeybee colony can experience a series of events during its life: swarming, superseeding, splitting, and collapsing. We present the details of colony events and their simulation in the Additional File 3.</p><p id="P38">In swarming a proportion of workers leave the hive with the queen, while the rest of the workers and drones stay in the hive. New virgin queens emerge and compete in the colony. The winner undergoes mating flights as described above. In SIMplyBee, we created a function <monospace>swarm()</monospace> to swarm a colony (<xref ref-type="fig" rid="F2">Figure 2</xref>). An input parameter to the function is also the percentage of workers that leaves with the swarm, p. This can be either a fixed number or a function that samples the p from either a uniform distribution or in some cases also from a beta distribution that accounts for the number of individuals in a colony (colony strength). You can read more about the sampling functions in the Additional File 7. The <monospace>swarm</monospace> function returns an R list with two colonies: <monospace>swarm</monospace> that contains the old queen and a proportion p of workers, and <monospace>remnant</monospace> that contains the rest of workers, all the drones, and virgin queens that are daughters of the queen that swarmed. The function also changes the <monospace>swarm</monospace> status to <monospace>TRUE</monospace> and production status to <monospace>FALSE</monospace> <preformat preformat-type="computer code">
&gt; tmp &lt;- swarm(colony, p = 0.5)
&gt; tmp$swarm
Id: 3
Queen: 2
Number of fathers: 15
Number of workers: 50
Number of drones: 0
Number of virgin queens: 0
...
Has swarmed: TRUE
...
Is productive: FALSE

&gt; tmp$remnant
Id: 4
Queen: NA
Number of fathers: 0
Number of workers: 50
Number of drones: 10
Number of virgin queens: 1
...
Has swarmed: TRUE
...
Is productive: FALSE</preformat></p><p id="P39">To prevent swarming of strong colonies, beekeepers often split them by taking away a proportion of workers and starting a new colony with a new queen. The rest of the workers stay in the hive with the old queen. In SIMplyBee, we created a function split() that takes a colony and proportion of workers that we remove with the split, <monospace>p</monospace>. The <monospace>split</monospace> function returns an R list with two colonies: <monospace>split</monospace> that contains proportion <monospace>p</monospace> of workers taken from the main hive and virgin queens, and <monospace>remnant</monospace> that contains the queen, the remaining workers and drones (<xref ref-type="fig" rid="F3">Figure 3</xref>). After the split, the remnant colony is still productive, while the split is not.  <preformat preformat-type="computer code">
&gt; tmp &lt;-split (colony, p = 0.3)
&gt; tmp$split
Id: 8
Queen: NA
Number of fathers: 0
Number of workers: 30
Number of drones: 0
Number of virgin queens: 1
Has split: TRUE
...
Is productive: FALSE

&gt; tmp $remnant
Id: 1
Queen: 2
Number of fathers: 15
Number of workers: 70
Number of drones: 10
Number of virgin queens: 0
Has split: TRUE
...
Is productive: TRUE</preformat></p><p id="P40">In supersedure, the queen dies or is killed and its workers raise new virgin queens. In SIMplyBee, we created a function <monospace>supersede()</monospace> that removes the queen and produces new virgin queens from the brood (<xref ref-type="fig" rid="F4">Figure 4</xref>). After a supersedure, the colony is still productive because the workers are still present and working within the colony. <preformat preformat-type="computer code">
&gt; supersede(colony)
Id: 1
Queen: NA
Number of fathers: 0
Number of workers: 100
Number of drones: 10
Number of virgin queens: 1
...
Has superseded: TRUE
...
Is productive: TRUE</preformat></p><p id="P41">Finally, some colonies can collapse due to the death of all its members. In SIMplyBee, we created a function <monospace>collapse()</monospace> that collapses a colony by changing the <monospace>collapse</monospace> status to <monospace>TRUE</monospace> (<xref ref-type="fig" rid="F5">Figure 5</xref>). The function keeps the individuals in the colony to enable study of genetic and environmental causes contributing to the collapse. In reality, dead honeybees would also be present in a collapsed colony. <preformat preformat-type="computer code">
&gt; collapse(colony)
Id: 1
Queen: 2
Number of fathers: 15
Number of workers: 100
Number of drones: 10
Number of virgin queens: 0
...
Has collapsed: TRUE
...
Is productive: FALSE</preformat></p><p id="P42">SIMplyBee also includes functions to build-up a colony, as shown above, a function to downsize a colony named <monospace>downsize()</monospace>, and a function to combine a strong and a weak colony named <monospace>combine()</monospace>. You can read more about simulating events in <monospace>SIMplyBee</monospace> in Additional File 3.</p></sec><sec id="S12"><title>Working with multiple colonies</title><p id="P43">Beekeepers regularly work with a collection of colonies at once. To this end, we created a <monospace>MultiColony</monospace> class that collects a list of colonies to represent an apiary, a region, an age group, etc. You can read more about working with multiple colonies in the Additional File 2.</p><p id="P44">In SIMplyBee, we use a function <monospace>createMultiColony()</monospace> to create a <monospace>MultiColony</monospace> object. Here, we take three of the remaining base population virgin queens to create an apiary with three virgin colonies. The printout of the object returns basic information including the number of all, empty, and <monospace>NULL</monospace> colonies, and information about the colony events for the colonies within. <preformat preformat-type="computer code">
&gt; apiary &lt;-
   createMultiColony(x = baseQueens[3:5])
&gt; apiary
An object of class “MultiColony”
Number of colonies: 3
Are empty: 0
Are NULL: 0
Have split: 0
Have swarmed: 0
Have superseded: 0
Have collapsed: 0
Are productive: 0</preformat></p><p id="P45">All the functions for managing a <monospace>Colony</monospace> object can also be applied to a <monospace>MultiColony</monospace> object, which streamlines simulation scripts. These functions include functions for crossing, adding or removing individuals, simulating colony events, etc. Here, we demonstrate a short script to cross the <monospace>apiary</monospace>, build-up its colonies, and swarm some of them. We start by creating a DCA from the remaining base population virgin queens and sampling three groups of drones to mate the three virgin queens. As already mentioned, when we sample individuals in SIMplyBee, we can use either fixed numbers or use sampling functions (Additional File 7). <preformat preformat-type="computer code">
&gt; DCA &lt;- createDrones(baseQueens[5:10],
                      nInd = 100)
&gt; fun &lt;- nFathersPoisson
&gt; droneGroups &lt;-
   pullDroneGroupsFromDCA(DCA, n = 3,
                          nDrones = fun)</preformat></p><p id="P46">Next, we cross the virgin queens in the apiary with the provided drones groups. We test for the presence of queens before and after mating to show that mating was successful. For this we can use <monospace>is*Present()</monospace> functions, where <monospace>*</monospace> is the caste, that check the presence of a caste in a colony. We then build-up all the colonies. <preformat preformat-type="computer code">
&gt; all (isQueenPresent(apiary))
[1] FALSE
&gt; apiary &lt;- cross(apiary, drones = droneGroups)
&gt; all (isQueenPresent(apiary))
[1] TRUE
&gt; apiary &lt;- buildUp(apiary)</preformat></p><p id="P47">Now, we use the function <monospace>pullColonies()</monospace> to sample one colony that will swarm. This returns an R list with two <monospace>MultiColony</monospace> objects: <monospace>pulled</monospace> with the sampled colonies, and <monospace>remnant</monospace> with the remaining ones. We save the latter back in the apiary. <preformat preformat-type="computer code">
&gt; tmp &lt;- pullColonies(apiary, n = 1)
&gt; apiary &lt;- tmp$remnant
[1] TRUE</preformat></p><p id="P48">Now, we swarm the pulled colonies. When applied to <monospace>MultiColony</monospace>, all the colonies are swarmed with the same p, unless specified otherwise. You can read more about simulating colony events for <monospace>MultiColony</monospace> in the Additional File 3. The swarm function returns an R list with two <monospace>MultiColony</monospace> objects, <monospace>remnant</monospace> and <monospace>swarm</monospace>. <preformat preformat-type="computer code">
&gt;tmp &lt;- swarm(tmp$pulled, p = 0.5)</preformat></p><p id="P49">Assuming that we did not catch the swarm(s), we combine the colonies that did not swarm with the swarm remnant(s) into an updated apiary. <preformat preformat-type="computer code">
&gt; apiary &lt;- c(apiary, tmp$remnant)
&gt; swarms &lt;- tmp$swarm</preformat></p></sec><sec id="S13"><title>Genomics and Quantitative genetics</title><p id="P50">Similar to extracting the <italic>CSD</italic> genomic sequence, SIM-plyBee provide functions to extract whole-genome information for any set of individuals using <monospace>get*Haplo()</monospace> or <monospace>get*Geno()</monospace>. Here, <monospace>*</monospace> can be <monospace>SegSite</monospace> to extract all segregating/polymorphic loci tracked in the simulation, <monospace>Snp</monospace> to extract marker loci, or <monospace>Qtl</monospace> to extract Quantitative Trait Loci. There is also <monospace>getIbdHaplo()</monospace> to extract Identity By Descent information, with IBD alleles defined as those originating from the base population genomes. These functions leverage AlphaSimR functionality, but work with SIMplyBee <monospace>Colony</monospace> or <monospace>MultiColony</monospace> objects and in addition take the caste argument to extract information only for a specific caste. For example, to extract genotypes of the first five workers in the colony at the first five tracked segregating sites we call the code below. See further details in the Additional File 5. <preformat preformat-type="computer code">
&gt; getSegSiteGeno(colony, caste = “workers”) [1:5,
    1:5]
   1_1 1_2 1_3 1_4 1_5
26 0 2 1 0 1
27 0 1 2 1 1
28 0 2 2 1 1
29 0 1 1 0 1
30 0 2 2 1 1</preformat></p><p id="P51">Honeybee phenotypes are characterized with two important phenomena. First, in honeybee keeping and breeding, phenotypes are mostly collected on a colony level as opposed to on an individual level. Second, phenotypes in honeybees are a complex interaction between queen and worker effects that are often negatively correlated [<xref ref-type="bibr" rid="R32">32</xref>, <xref ref-type="bibr" rid="R33">33</xref>]. For most traits, the queen indirectly contributes to the colony phenotype by laying eggs [<xref ref-type="bibr" rid="R34">34</xref>, <xref ref-type="bibr" rid="R35">35</xref>] and stimulating the workers through pheromones [<xref ref-type="bibr" rid="R36">36</xref>, <xref ref-type="bibr" rid="R37">37</xref>], while workers contribute directly by doing the actual work.</p><p id="P52">In SIMplyBee, we simulate genetic and phenotypic values for each individual honeybee and enable also calculating colony-level values. Quantitative genetic simulation is initiated in the <monospace>SimParamBee</monospace> by specifying the assumptions about the genetic architecture of traits in <monospace>SimParamBee</monospace>, including the number of quantitative trait loci, distribution of their effects, as well as genetic and environmental variances and covariances. Let’s initiate another simulation and specify two negatively correlated traits that will represent the queen and worker effect for honey yield. You can read a more extensive explanation of this simulation in the Additional file 6. <preformat preformat-type="computer code">
&gt; SP &lt;- SimParamBee$new(founderGenomes)
&gt; nQtlPerChr &lt;- 100
<italic># The means for both effects</italic>
&gt; mean&lt;-c (10, 10 / SP$nWorkers)
<italic># The variances for both effects</italic>
&gt; varA &lt;-c (1, 1 / SP$nWorkers)
<italic># The genetic correlation matrix</italic>
&gt; corA &lt;- matrix(data = c( 1.0, -0.5,
                          -0.5, 1.0),
                 nrow = 2, byrow = TRUE)
<italic># Add the traits to SimParamBee</italic>
&gt; SP$addTraitA(nQtlPerChr = nQtlPerChr,
   mean = mean, var = varA, corA = corA,
   name = c(“queenTrait”, “workersTrait”))
<italic># Environmental effect parameters</italic>
&gt; varE &lt;- c(3, 3 / SP$nWorkers)
&gt; corE &lt;- matrix(data = c(1.0, 0.3,
                          0.3, 1.0),
                 nrow = 2, byrow = TRUE)
&gt; SP$setVarE(varE = varE, corE = corE)</preformat></p><p id="P53">This initiation triggers calculation of individual-level genetic and phenotypic values. Using an AlphaSimR <monospace>Pop</monospace> class object, genetic and phenotypic values are stored respectively in <monospace>gv</monospace> and <monospace>pheno</monospace> slots. We can access the genetic and phenotypic values of population or colony members with functions <monospace>getGv()</monospace> and <monospace>get-Pheno()</monospace>, both of which have the caste argument and work on <monospace>Colony</monospace> and <monospace>MultiColony</monospace>. <preformat preformat-type="computer code">
<italic># Base population virgin queens</italic>
&gt; basePop &lt;- createVirginQueens(founderGenomes,
                                n = 20)
<italic># Create an apiary, cross it, and build it up</italic>
&gt; DCA &lt;- createDrones(x = basePop[1:5],
                      nInd = 100)
&gt; droneGroups &lt;- pullDroneGroupsFromDCA(DCA,
   n = 3, nDrones = 15)
&gt; apiary &lt;- createMultiColony(x = basePop[6:8])
&gt; apiary &lt;- cross(x = apiary,
   drones = droneGroups)
&gt; apiary &lt;- buildUp(x = apiary)
<italic># Inspect workers values in the first colony</italic>
&gt; head(getWorkersGv(apiary[[1]]))
    queenTrait workersTrait
[1,] 9.741739 0.02025635
[2,] 9.918515 0.05704912
&gt; head(getWorkersPheno(apiary[[1]]))
   queenTrait workersTrait
[1,] 9.110582 0.31215045
[2,] 10.851997 0.09501006</preformat></p><p id="P54">To obtain colony-level values we provide <monospace>calcColonyValue()</monospace> function that maps individual values to colony values. While we provide an established mapping function from the literature [<xref ref-type="bibr" rid="R38">38</xref>, <xref ref-type="bibr" rid="R14">14</xref>, <xref ref-type="bibr" rid="R39">39</xref>], users can provide their own mapping function. Examples of such quantitative genetic simulations of one or multiple correlated traits are shown in the Additional File 6.</p><p id="P55">Here, we compute the colony-level genetic and phenotypic values for the colonies in our apiary. <preformat preformat-type="computer code">
&gt; colonyGv &lt;- calcColonyGv(apiary)
&gt; colonyGv
      [,1]
11 14.69092
12 24.62362
13 18.51376
&gt; colonyPheno &lt;- calcColonyPheno(apiary)
&gt; colonyPheno
      [,1]
11 15.15722
12 20.89392
13 11.90577</preformat></p><p id="P56">We see that the best colony according to the genetic as well as the phenotypic value is colony with ID “12”, hence we would select it for further reproduction. We can pour the values into the use parameter of the <monospace>se-lectColonies()</monospace>. <preformat preformat-type="computer code">
bestColony &lt;- selectColonies(apiary, n = 1, by =
    colonyGv)</preformat></p></sec></sec><sec id="S14" sec-type="discussion"><title>Discussion</title><p id="P57">SIMplyBee is an R package for holistic simulation of honeybee breeding and conservation programs. In comparison to previously developed general genetics and breeding simulators [<xref ref-type="bibr" rid="R15">15</xref>, <xref ref-type="bibr" rid="R16">16</xref>], it enables the simulation of honeybee-specific genomes, social organisation, and behaviours. SIMplyBee differs from previously developed honeybee-specific simulators [<xref ref-type="bibr" rid="R14">14</xref>, <xref ref-type="bibr" rid="R17">17</xref>] by enabling the simulation of individual honeybees, individual-level and colony-level quantitative values, and colony events that can affect genetic and phenotypic variation in a population.</p><p id="P58">SIMplyBee provides a valuable research platform for testing different population-management decisions and answering various questions regarding design of breeding schemes. SIMplyBee can be used to test the effect of various decisions in a breeding program on genetic gain, genetic diversity and inbreeding; or to test the accuracy of inferences with competing quantitative genetic models. For example, users can test the effect of different phenotyping schemes by varying the frequency of phenotyping or the measuring scale. Furthermore, SIMplyBee can be used to test different mating control designs and the effect of varying the number of sires or drone producing queens on a mating station. The users can also test different selection strategies by varying the time of selection, the number of selected queens, or the sources of information (pedigree, genomic, and phenotypic data). The list of such potential studies is long. SIMplyBee is also a valuable platform for answering questions regarding the conservation of honeybees. Users might be interested in the effect of mating and management decisions on the genetic diversity in a population along the whole genome or only at the <italic>CSD</italic> locus. Users might also be interested comparing how different migration or import practices and associated policies affect genetic diversity, or how to design a conservation program to preserve the existing genetic diversity.</p><p id="P59">While developing SIMplyBee, we observed that there is very limited knowledge of relationship between individual-level and colony-level phenotypes. This knowledge includes the contribution of individual worker’s honey yield to the total colony honey yield, the effect of the number of workers on the total colony honey yield, the effect of colony events on colony honey yield, etc. While this knowledge gap is understandable, given the sheer number of honeybees in a colony, future advances in sensor and beekeeping technologies and data science (machine learning) will provide evermore fine-grained data. Such data could further contribute to explaining the relationship between individual-level and colony-level phenotypes. SIMplyBee can serve as a research platform to model such relationships. Less ambitiously, SIMplyBee can serve as a research platform to test assumptions of the current quantitative genetic models [<xref ref-type="bibr" rid="R39">39</xref>, <xref ref-type="bibr" rid="R14">14</xref>, <xref ref-type="bibr" rid="R38">38</xref>]. Another challenge that we faced in developing SIMplyBee was in providing functionality to calculate statistical genetic values, that is, breeding values, dominance deviations, and epistasis deviations. Since SIMplyBee leverages AlphaSimR [<xref ref-type="bibr" rid="R15">15</xref>], all these values can be calculated using bv(), dd(), and aa() functions. However, caution is required because these values are computed “relative” to the population of individuals at hand, which means that for a honeybee simulation we would either have to report these values relative to each colony population, which would make the output useless, or we would have to create a large “meta” population object of all currently living honeybees. Also, these functions and the underlying theory assume Hardy-Weinberg equilibrium [<xref ref-type="bibr" rid="R40">40</xref>]. Further development is required to address this aspect in SIMplyBee.</p><p id="P60">Future development of the SIMplyBee package will focus on additional features and improving the functionality and efficiency of existing features. Our immediate focus is on the following three features. First, we are working on a new honeybee demographic model to include more subspecies and improve estimation of the model parameters ([<xref ref-type="bibr" rid="R41">41</xref>]). While we are currently using MaCS [<xref ref-type="bibr" rid="R20">20</xref>]) to simulate the genome, we are also contributing honeybee species and demography to the stdpopsim consortium [<xref ref-type="bibr" rid="R42">42</xref>, <xref ref-type="bibr" rid="R43">43</xref>], which uses the msprime (backward in time) [<xref ref-type="bibr" rid="R44">44</xref>, <xref ref-type="bibr" rid="R45">45</xref>] and SLiM (forward in time) [<xref ref-type="bibr" rid="R46">46</xref>] simulators. Second, we will further optimize the speed and memory performance of SIMplyBee. A simulation of an entire real-size honeybee colony or a breeding program with such colonies can be computationally demanding because a single colony can hold up to several tens of thousands of workers. We are profiling memory and compute bottlenecks in SIMply-Bee and will optimize functions by leveraging C++ via the Rcpp package [<xref ref-type="bibr" rid="R47">47</xref>] or by adopting alternative approaches for achieving the same target. For example, by working with the expectation and variance of genetic values in progeny [<xref ref-type="bibr" rid="R48">48</xref>, <xref ref-type="bibr" rid="R49">49</xref>] instead of simulating tens of thousands of workers. Third, we will add spatial awareness. Colony location plays a major role in honeybee mating and colony performance. The current implementation enables setting the location of every <monospace>Colony</monospace> and <monospace>MultiColony</monospace> object. We will develop functionality to create a DCA or sample the drones for a virgin queen mating according to the location of colonies, for example, in a certain radius, since virgin queens are more likely to mate with drones from nearby colonies. Furthermore, we will add spatially-aware simulation of environmental effects. Honeybee colony performance depends heavily on the environment due to food provision, weather, pests, etc. Such environmental conditions usually change continuously through space, hence colonies closer together usually experience more similar environmental conditions than colonies further apart. The framework for such spatially aware simulation and modelling has already been developed and tested in a livestock setting [<xref ref-type="bibr" rid="R50">50</xref>].</p><p id="P61">We welcome the honeybee genetics and breeding <monospace>community to join us in the future development of</monospace> SIMplyBee. The development is hosted on GitHub at <ext-link ext-link-type="uri" xlink:href="https://github.com/HighlanderLab/SIMplyBee">https://github.com/HighlanderLab/SIMplyBee</ext-link>. We welcome users and developers to fork this git repository and provide “pull request (PR)” contributions. Each pull request is reviewed by one of the developers within the core team. Based on the review, pull requests are updated before being merged into the development branch. The development branch is periodically merged into the main branch for publication on CRAN and user installation. For each function we request documentation with examples and unit tests to ensure future changes will not break the functionality.</p><p id="P62">In this work, we described the usage of SIMplyBee for simulating honeybee populations. However, other bee species share a similar organisation and behaviour as the honeybee. Hence, SIMplyBee could also be used to simulate other <italic>Apis</italic> species. For example, <italic>Apis flo-rea,</italic> the dwarf honeybee, and <italic>Apis cerana. Apis florea</italic> importantly contributes to pollination in some countries of the Middle East and Asia. Its range is predicted to increase due to climate change [<xref ref-type="bibr" rid="R51">51</xref>] and SIMplyBee could be used to model a breeding program in this bee species as well.</p></sec><sec id="S15" sec-type="conclusions"><title>Conclusions</title><p id="P63">We developed a stochastic simulator, SIMplyBee, for holistic simulation of honeybee populations and population management programs. SIMplyBee builds upon its predecessors by simulating genomes of individual honeybees and the corresponding individual-level quantitative values. SIMplyBee stores individual honeybees as caste population within a colony object, which enables the simulation of colony events and calculation of colony-level values. Colonies can be further organised into multi-colony objects for ease of use. SIMplyBee provides a valuable research platform for honeybee genetics, breeding, and conservation. Possible uses include testing the effects of breeding or conservation decisions on genetic gain and genetic variability in honeybee populations, testing the performance of existing and novel statistical methods, etc. Future directions include improvements to the simulation of honeybee chromosomes through new demographic models, addition of spatial awareness in mating and phenotype simulation, reducing computational bottlenecks, and encouraging community engagement. We welcome the honeybee genetics and breeding community to collaborate with us in improving SIMply-Bee.</p></sec><sec sec-type="supplementary-material" id="SM"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="SD1"><label>Additional Files</label><media xlink:href="EMS158938-supplement-Additional_Files.pdf" mimetype="application" mime-subtype="pdf" id="d81aAdFbB" position="anchor"/></supplementary-material></sec></body><back><ack id="S17"><title>Acknowledgements</title><p>The authors would like to thank R. Chris Gaynor for suggestions on how to leverage AlphaSimR functionality to implement honeybee specificities in SIMplyBee, and Philip Greenspoon for suggestions on improving the manuscript.</p><sec id="S18"><title>Funding</title><p>JO acknowledges support from the ARRS Research program P4-0133. JO, LS, JB, JP, and GG acknowledge support from the ARRS research project L4-2624. JB acknowledges support from the ARRS PhD studentship 1000-20-0401. JB and JP acknowledge the support from the ARRS Research program P4-0431. LS and GG acknowledge support from the BBSRC DTP (EASTBio) CASE PhD studentship with AbacusBio and the BBSRC ISP grant BBS/E/D/30002275 to The Roslin Institute. For the purpose of open access, the authors have applied a Creative Commons Attribution (CC BY) license to any Author Accepted Manuscript version arising from this submission.</p></sec></ack><fn-group><fn id="FN1"><p id="P64"><bold>Availability and requirements</bold></p><p id="P65"><bold>Project name</bold>: SIMplyBee</p><p id="P66"><bold>Home page</bold>:<ext-link ext-link-type="uri" xlink:href="http://SIMplyBee.info">http://SIMplyBee.info</ext-link></p><p id="P67"><bold>Installation</bold>:<ext-link ext-link-type="uri" xlink:href="http://cran.r-project.org/package=SIMplyBee">http://cran.r-project.org/package=SIMplyBee</ext-link></p><p id="P68"><bold>Development</bold>:<ext-link ext-link-type="uri" xlink:href="https://github.com/HighlanderLab/SIMplyBee">https://github.com/HighlanderLab/SIMplyBee</ext-link></p><p id="P69"><bold>Operating systems</bold>: Windows, Linux, and MacOS <bold>Programming language</bold>: R</p><p id="P70"><bold>License</bold>: MIT + file</p></fn><fn id="FN2" fn-type="con"><p id="P71"><bold>Authors’ contributions</bold></p><p id="P72">JO and GG initiated the project, planned the SIMplyBee implementation, and led the SIMplyBee development. LS, JB, and JP contributed to SIMplyBee development, documentation, and testing. JO wrote the first draft of this manuscript. All authors have contributed to the final version of the manuscript.</p></fn><fn id="FN3" fn-type="conflict"><p id="P73"><bold>Competing interests</bold></p><p id="P74">Not applicable.</p></fn><fn id="FN4"><p id="P75"><bold>Ethics approval and consent to participate</bold></p><p id="P76">Not applicable.</p></fn><fn id="FN5"><p id="P77"><bold>Consent for publication</bold></p><p id="P78">Not applicable.</p></fn></fn-group><sec id="S19" sec-type="data-availability"><title>Availability of data and materials</title><p id="P79">The data and material for this study are available in the SIMplyBee GitHub repository <ext-link ext-link-type="uri" xlink:href="https://github.com/HighlanderLab/SIMplyBee">https://github.com/HighlanderLab/SIMplyBee</ext-link> and <ext-link ext-link-type="uri" xlink:href="https://SIMplyBee.info">https://SIMplyBee.info</ext-link>.</p></sec><ref-list><ref id="R1"><label>1</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Breeze</surname><given-names>TD</given-names></name><name><surname>Dean</surname><given-names>R</given-names></name><name><surname>Potts</surname><given-names>SG</given-names></name></person-group><article-title>The costs of beekeeping for pollination services in the UK – an explorative study</article-title><source>Journal of Apicultural Research</source><year>2017</year><month>May</month><volume>56</volume><issue>3</issue><fpage>310</fpage><lpage>317</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://www.tandfonline.com/doi/full/10.1080/00218839.2017.1304518">https://www.tandfonline.com/doi/full/10.1080/00218839.2017.1304518</ext-link></comment></element-citation></ref><ref id="R2"><label>2</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Gallai</surname><given-names>Nicola</given-names></name><name><surname>Salles</surname><given-names>Jean-Michel</given-names></name><name><surname>Settele</surname><given-names>Josef</given-names></name><name><surname>Vaissiere</surname><given-names>Bernard E</given-names></name></person-group><source>Economic valuation of the vulnerability of world agriculture confronted with pollinator decline</source><publisher-name>Elsevier Enhanced Reader</publisher-name><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://reader.elsevier.com/reader/sd/pii/S0921800908002942?token=5CCD5396DEE311E33F026E71357220CA6CECD23673B61F72AC0672E1047FD433D28B7593DD9AEF8923D644C4C78A3B17&amp;originRegion=eu-west-1&amp;originCreation=20210504110532">https://reader.elsevier.com/reader/sd/pii/S0921800908002942?token=5CCD5396DEE311E33F026E71357220CA6CECD23673B61F72AC0672E1047FD433D28B7593DD9AEF8923D644C4C78A3B17&amp;originRegion=eu-west-1&amp;originCreation=20210504110532</ext-link></comment></element-citation></ref><ref id="R3"><label>3</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Strano</surname><given-names>A</given-names></name><name><surname>Stillitano</surname><given-names>T</given-names></name><name><surname>De Luca</surname><given-names>AI</given-names></name><name><surname>Falcone</surname><given-names>G</given-names></name><name><surname>Gulisano</surname><given-names>G</given-names></name></person-group><article-title>Profitability Analysis of Small-Scale Beekeeping Firms by Using Life Cycle Costing (LCC) Methodology</article-title><source>American Journal of Agricultural and Biological Sciences</source><year>2015</year><month>Mar</month><volume>10</volume><issue>3</issue><fpage>116</fpage><lpage>127</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="http://thescipub.com/abstract/10.3844/ajabssp.2015.116.127">http://thescipub.com/abstract/10.3844/ajabssp.2015.116.127</ext-link></comment></element-citation></ref><ref id="R4"><label>4</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Steinhauer</surname><given-names>N</given-names></name><name><surname>Kulhanek</surname><given-names>K</given-names></name><name><surname>Antunez</surname><given-names>K</given-names></name><name><surname>Human</surname><given-names>H</given-names></name><name><surname>Chantawannakul</surname><given-names>P</given-names></name><name><surname>Chauzat</surname><given-names>MP</given-names></name><etal/></person-group><article-title>Drivers of colony losses</article-title><source>Current Opinion in Insect Science</source><year>2018</year><month>Apr</month><volume>26</volume><fpage>142</fpage><lpage>148</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S2214574517302080">https://www.sciencedirect.com/science/article/pii/S2214574517302080</ext-link></comment><pub-id pub-id-type="pmid">29764654</pub-id></element-citation></ref><ref id="R5"><label>5</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Espregueira Themudo</surname><given-names>G</given-names></name><name><surname>Rey-Iglesia</surname><given-names>A</given-names></name><name><surname>Robles Tascon</surname><given-names>L</given-names></name><name><surname>Bruun Jensen</surname><given-names>A</given-names></name><name><surname>da Fonseca</surname><given-names>RR</given-names></name><name><surname>Campos</surname><given-names>PF</given-names></name></person-group><article-title>Declining genetic diversity of European honeybees along the twentieth century</article-title><source>Scientific Reports</source><month>Jun</month><volume>10</volume><issue>1</issue><elocation-id>10520</elocation-id><publisher-name>Nature Publishing Group</publisher-name><year>2020</year><comment>Number: 1 Available from:<ext-link ext-link-type="uri" xlink:href="https://www.nature.com/articles/s41598-020-67370-2">https://www.nature.com/articles/s41598-020-67370-2</ext-link></comment><pub-id pub-id-type="pmcid">PMC7324561</pub-id><pub-id pub-id-type="pmid">32601293</pub-id><pub-id pub-id-type="doi">10.1038/s41598-020-67370-2</pub-id></element-citation></ref><ref id="R6"><label>6</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Smith</surname><given-names>KM</given-names></name><name><surname>Loh</surname><given-names>EH</given-names></name><name><surname>Rostal</surname><given-names>MK</given-names></name><name><surname>Zambrana-Torrelio</surname><given-names>CM</given-names></name><name><surname>Mendiola</surname><given-names>L</given-names></name><name><surname>Daszak</surname><given-names>P</given-names></name></person-group><article-title>Pathogens, Pests, and Economics: Drivers of Honey Bee Colony Declines and Losses</article-title><source>EcoHealth</source><year>2013</year><month>Dec</month><volume>10</volume><issue>4</issue><fpage>434</fpage><lpage>445</lpage><pub-id pub-id-type="pmid">24496582</pub-id></element-citation></ref><ref id="R7"><label>7</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Lodesani</surname><given-names>M</given-names></name><name><surname>Costa</surname><given-names>C</given-names></name></person-group><article-title>Bee breeding and genetics in Europe</article-title><source>Bee World</source><month>Jan</month><volume>84</volume><issue>2</issue><fpage>69</fpage><lpage>85</lpage><publisher-name>Taylor &amp; Francis</publisher-name><year>2003</year><comment>eprint</comment><pub-id pub-id-type="doi">10.1080/0005772X.2003.11099579</pub-id></element-citation></ref><ref id="R8"><label>8</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Groeneveld</surname><given-names>LF</given-names></name><name><surname>Kirkerud</surname><given-names>LA</given-names></name><name><surname>Dahle</surname><given-names>B</given-names></name><name><surname>Sunding</surname><given-names>M</given-names></name><name><surname>Flobakk</surname><given-names>M</given-names></name><name><surname>Kjos</surname><given-names>M</given-names></name><etal/></person-group><article-title>Conservation of the dark bee (<italic>Apis mellifera mellifera</italic>): Estimating C-lineage introgression in Nordic breeding stocks</article-title><source>Acta Agriculturae Scandinavica, Section A — Animal Science</source><year>2020</year><month>Jul</month><volume>69</volume><issue>3</issue><fpage>157</fpage><lpage>168</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://www.tandfonline.com/doi/full/10.1080/09064702.2020.1770327">https://www.tandfonline.com/doi/full/10.1080/09064702.2020.1770327</ext-link></comment></element-citation></ref><ref id="R9"><label>9</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Panziera</surname><given-names>D</given-names></name><name><surname>Requier</surname><given-names>F</given-names></name><name><surname>Chantawannakul</surname><given-names>P</given-names></name><name><surname>Pirk</surname><given-names>CWW</given-names></name><name><surname>Blacquiere</surname><given-names>T</given-names></name></person-group><source>The diversity decline in wild and managed honey bee populations urges for an integrated conservation approach</source><month>Mar</month><publisher-name>Frontiers Media</publisher-name><publisher-loc>S.A</publisher-loc><year>2022</year><comment>Accepted: 2022-07-28T11:48:30Z Available from:<ext-link ext-link-type="uri" xlink:href="https://repository.up.ac.za/handle/2263/86561">https://repository.up.ac.za/handle/2263/86561</ext-link></comment></element-citation></ref><ref id="R10"><label>10</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ilyasov</surname><given-names>RA</given-names></name><name><surname>Lee</surname><given-names>Ml</given-names></name><name><surname>Takahashi</surname><given-names>Ji</given-names></name><name><surname>Kwon</surname><given-names>HW</given-names></name><name><surname>Nikolenko</surname><given-names>AG</given-names></name></person-group><article-title>A revision of subspecies structure of western honey bee Apis mellifera</article-title><source>Saudi Journal of Biological Sciences</source><year>2020</year><month>Dec</month><volume>27</volume><issue>12</issue><fpage>3615</fpage><lpage>3621</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S1319562X20303363">https://www.sciencedirect.com/science/article/pii/S1319562X20303363</ext-link></comment><pub-id pub-id-type="pmcid">PMC7714978</pub-id><pub-id pub-id-type="pmid">33304172</pub-id><pub-id pub-id-type="doi">10.1016/j.sjbs.2020.08.001</pub-id></element-citation></ref><ref id="R11"><label>11</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dogantzis</surname><given-names>Ida M Conflitti</given-names></name><name><surname>Tiwari</surname><given-names>Tanushree</given-names></name><name><surname>Dey</surname><given-names>Alivia</given-names></name><name><surname>Patch</surname><given-names>Harland M</given-names></name></person-group><article-title>Thrice out of Asia and the adaptive radiation of the western honey bee</article-title><source>Science Advances</source><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://www.science.org/doi/full/10.1126/sciadv.abj2151">https://www.science.org/doi/full/10.1126/sciadv.abj2151</ext-link></comment><pub-id pub-id-type="pmcid">PMC8641936</pub-id><pub-id pub-id-type="pmid">34860547</pub-id><pub-id pub-id-type="doi">10.1126/sciadv.abj2151</pub-id></element-citation></ref><ref id="R12"><label>12</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Moritz</surname><given-names>RFA</given-names></name><name><surname>Härtel</surname><given-names>S</given-names></name><name><surname>Neumann</surname><given-names>P</given-names></name></person-group><article-title>Global invasions of the western honeybee (<italic>Apis mellifera</italic>) and the consequences for biodiversity</article-title><source>Ecoscience</source><year>2005</year><month>Jan</month><volume>12</volume><issue>3</issue><fpage>289</fpage><lpage>301</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://www.tandfonline.com/doi/full/10.2980/i1195-6860-12-3-289.1">https://www.tandfonline.com/doi/full/10.2980/i1195-6860-12-3-289.1</ext-link></comment></element-citation></ref><ref id="R13"><label>13</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sargolzaei</surname><given-names>M</given-names></name><name><surname>Schenkel</surname><given-names>FS</given-names></name></person-group><article-title>QMSim: a large-scale genome simulator for livestock</article-title><source>Bioinformatics</source><year>2009</year><month>Mar</month><volume>25</volume><issue>5</issue><fpage>680</fpage><lpage>681</lpage><pub-id pub-id-type="pmid">19176551</pub-id></element-citation></ref><ref id="R14"><label>14</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Plate</surname><given-names>M</given-names></name><name><surname>Bernstein</surname><given-names>R</given-names></name><name><surname>Hoppe</surname><given-names>A</given-names></name><name><surname>Bienefeld</surname><given-names>K</given-names></name></person-group><article-title>The importance of controlled mating in honeybee breeding</article-title><source>Genetics Selection Evolution</source><year>2019</year><month>Dec</month><volume>51</volume><issue>1</issue><fpage>74</fpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://gsejournal.biomedcentral.com/articles/10.1186/s12711-019-0518-y">https://gsejournal.biomedcentral.com/articles/10.1186/s12711-019-0518-y</ext-link></comment><pub-id pub-id-type="pmcid">PMC6907340</pub-id><pub-id pub-id-type="pmid">31830903</pub-id><pub-id pub-id-type="doi">10.1186/s12711-019-0518-y</pub-id></element-citation></ref><ref id="R15"><label>15</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gaynor</surname><given-names>RC</given-names></name><name><surname>Gorjanc</surname><given-names>G</given-names></name><name><surname>Hickey</surname><given-names>JM</given-names></name></person-group><article-title>AlphaSimR: an R package for breeding program simulations</article-title><source>G3 Genes|Genomes|Genetics</source><year>2021</year><month>Feb</month><volume>11</volume><issue>2</issue><elocation-id>jkaa017</elocation-id><pub-id pub-id-type="pmcid">PMC8022926</pub-id><pub-id pub-id-type="pmid">33704430</pub-id><pub-id pub-id-type="doi">10.1093/g3journal/jkaa017</pub-id></element-citation></ref><ref id="R16"><label>16</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pook</surname><given-names>T</given-names></name><name><surname>Schlather</surname><given-names>M</given-names></name><name><surname>Simianer</surname><given-names>H</given-names></name></person-group><article-title>MoBPS-Modular Breeding Program Simulator</article-title><source>G3 Genes|Genomes|Genetics</source><year>2020</year><month>Jun</month><volume>10</volume><issue>6</issue><fpage>1915</fpage><lpage>1918</lpage><pub-id pub-id-type="pmcid">PMC7263682</pub-id><pub-id pub-id-type="pmid">32229505</pub-id><pub-id pub-id-type="doi">10.1534/g3.120.401193</pub-id></element-citation></ref><ref id="R17"><label>17</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Becher</surname><given-names>MA</given-names></name><name><surname>Grimm</surname><given-names>V</given-names></name><name><surname>Thorbek</surname><given-names>P</given-names></name><name><surname>Horn</surname><given-names>J</given-names></name><name><surname>Kennedy</surname><given-names>PJ</given-names></name><name><surname>Osborne</surname><given-names>JL</given-names></name></person-group><article-title>BEEHAVE: a systems model of honeybee colony dynamics and foraging to explore multifactorial causes of colony failure</article-title><source>Journal of Applied Ecology</source><year>2014</year><month>Apr</month><volume>51</volume><issue>2</issue><fpage>470</fpage><lpage>482</lpage><comment>Available from: <ext-link ext-link-type="uri" xlink:href="https://onlinelibrary.wiley.com/doi/10.1111/1365-2664.12222">https://onlinelibrary.wiley.com/doi/10.1111/1365-2664.12222</ext-link></comment><pub-id pub-id-type="pmcid">PMC4283046</pub-id><pub-id pub-id-type="pmid">25598549</pub-id><pub-id pub-id-type="doi">10.1111/1365-2664.12222</pub-id></element-citation></ref><ref id="R18"><label>18</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Faux</surname><given-names>AM</given-names></name><name><surname>Gorjanc</surname><given-names>G</given-names></name><name><surname>Gaynor</surname><given-names>RC</given-names></name><name><surname>Battagin</surname><given-names>M</given-names></name><name><surname>Edwards</surname><given-names>SM</given-names></name><name><surname>Wilson</surname><given-names>DL</given-names></name><etal/></person-group><article-title>AlphaSim: Software for Breeding Program Simulation</article-title><source>The Plant Genome</source><year>2016</year><volume>9</volume><issue>3</issue><elocation-id>plantgenome2016.02.0013</elocation-id><comment>_eprint:<ext-link ext-link-type="uri" xlink:href="https://onlinelibrary.wiley.com/doi/pdf/10.3835/plantgenome2016.02">https://onlinelibrary.wiley.com/doi/pdf/10.3835/plantgenome2016.02</ext-link>. Available from:<ext-link ext-link-type="uri" xlink:href="https://onlinelibrary.wiley.com/doi/abs/10.3835/plantgenome2016.02.0013">https://onlinelibrary.wiley.com/doi/abs/10.3835/plantgenome2016.02.0013</ext-link></comment><pub-id pub-id-type="pmid">27902803</pub-id></element-citation></ref><ref id="R19"><label>19</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Beye</surname><given-names>M</given-names></name><name><surname>Gattermeier</surname><given-names>I</given-names></name><name><surname>Hasselmann</surname><given-names>M</given-names></name><name><surname>Gempe</surname><given-names>T</given-names></name><name><surname>Schioett</surname><given-names>M</given-names></name><name><surname>Baines</surname><given-names>JF</given-names></name><etal/></person-group><article-title>Exceptionally high levels of recombination across the honey bee genome</article-title><source>Genome research</source><volume>16</volume><issue>11</issue><fpage>1339</fpage><lpage>1344</lpage><publisher-name>Cold Spring Harbor Lab</publisher-name><year>2006</year><pub-id pub-id-type="pmcid">PMC1626635</pub-id><pub-id pub-id-type="pmid">17065604</pub-id><pub-id pub-id-type="doi">10.1101/gr.5680406</pub-id></element-citation></ref><ref id="R20"><label>20</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chen</surname><given-names>GK</given-names></name><name><surname>Marjoram</surname><given-names>P</given-names></name><name><surname>Wall</surname><given-names>JD</given-names></name></person-group><article-title>Fast and flexible simulation of DNA sequence data</article-title><source>Genome Research</source><year>2009</year><month>Jan</month><volume>19</volume><issue>1</issue><fpage>136</fpage><lpage>142</lpage><comment>Company: Cold Spring Harbor Laboratory Press Distributor: Cold Spring Harbor Laboratory Press Institution: Cold Spring Harbor Laboratory Press Label: Cold Spring Harbor Laboratory Press Publisher: Cold Spring Harbor Lab. Available from:<ext-link ext-link-type="uri" xlink:href="https://genome.cshlp.org/content/19/1/136">https://genome.cshlp.org/content/19/1/136</ext-link></comment><pub-id pub-id-type="pmcid">PMC2612967</pub-id><pub-id pub-id-type="pmid">19029539</pub-id><pub-id pub-id-type="doi">10.1101/gr.083634.108</pub-id></element-citation></ref><ref id="R21"><label>21</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wallberg</surname><given-names>A</given-names></name><name><surname>Han</surname><given-names>F</given-names></name><name><surname>Wellhagen</surname><given-names>G</given-names></name><name><surname>Dahle</surname><given-names>B</given-names></name><name><surname>Kawata</surname><given-names>M</given-names></name><name><surname>Haddad</surname><given-names>N</given-names></name><etal/></person-group><article-title>A worldwide survey of genome sequence variation provides insight into the evolutionary history of the honeybee Apis mellifera</article-title><source>Nature Genetics</source><year>2014</year><month>Oct</month><volume>46</volume><issue>10</issue><fpage>1081</fpage><lpage>1088</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="http://www.nature.com/articles/ng.3077">http://www.nature.com/articles/ng.3077</ext-link></comment><pub-id pub-id-type="pmid">25151355</pub-id></element-citation></ref><ref id="R22"><label>22</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Farrar</surname><given-names>CL</given-names></name></person-group><article-title>The influence of colony populations on honey production</article-title><source>Journal of Agricultural Research</source><year>1937</year><volume>54</volume><issue>12</issue><fpage>945</fpage><lpage>954</lpage></element-citation></ref><ref id="R23"><label>23</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Allen</surname><given-names>MD</given-names></name></person-group><article-title>The Effect of a Plentiful Supply of Drone Comb on Colonies of Honeybees</article-title><source>Journal of Apicultural Research</source><month>Jan</month><volume>4</volume><issue>2</issue><fpage>109</fpage><lpage>119</lpage><publisher-name>Taylor &amp; Francis</publisher-name><year>1965</year><comment>eprint</comment><pub-id pub-id-type="doi">10.1080/00218839.1965.11100114</pub-id></element-citation></ref><ref id="R24"><label>24</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Koeniger</surname><given-names>N</given-names></name><name><surname>Koeniger</surname><given-names>G</given-names></name><name><surname>Gries</surname><given-names>M</given-names></name><name><surname>Tingek</surname><given-names>S</given-names></name></person-group><article-title>Drone competition at drone congregation areas in four Apis species</article-title><source>Apidologie</source><month>Apr</month><volume>36</volume><issue>2</issue><fpage>211</fpage><lpage>221</lpage><publisher-name>EDP Sciences</publisher-name><year>2005</year><pub-id pub-id-type="doi">10.1051/apido:2005011</pub-id></element-citation></ref><ref id="R25"><label>25</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Neumann</surname><given-names>P</given-names></name><name><surname>Moritz</surname><given-names>RFA</given-names></name><name><surname>van Praagh</surname><given-names>J</given-names></name></person-group><article-title>Queen mating frequency in different types of honey bee mating apiaries</article-title><source>Journal of Apicultural Research</source><month>Jan</month><volume>38</volume><issue>1-2</issue><fpage>11</fpage><lpage>18</lpage><publisher-name>Taylor &amp; Francis</publisher-name><year>1999</year><comment>eprint</comment><pub-id pub-id-type="doi">10.1080/00218839.1999.11100990</pub-id></element-citation></ref><ref id="R26"><label>26</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Goulet</surname><given-names>H</given-names></name><name><surname>Huber</surname><given-names>JT</given-names></name></person-group><source>Canada Agriculture Canada Research Branch. Hymenoptera of the world: an identification guide to families</source><comment>No. 1894 in Publication (Canada. Agriculture Canada)</comment><publisher-loc>Ottawa</publisher-loc><publisher-name>Research Branch, Agriculture Canada</publisher-name><year>1993</year></element-citation></ref><ref id="R27"><label>27</label><element-citation publication-type="book"><collab>New TR</collab><source>Hymenoptera and conservation</source><publisher-loc>Chichester West Sussex UK Hoboken NJ</publisher-loc><publisher-name>Wiley</publisher-name><year>2012</year></element-citation></ref><ref id="R28"><label>28</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Peters</surname><given-names>RS</given-names></name><name><surname>Krogmann</surname><given-names>L</given-names></name><name><surname>Mayer</surname><given-names>C</given-names></name><name><surname>Donath</surname><given-names>A</given-names></name><name><surname>Gunkel</surname><given-names>S</given-names></name><name><surname>Meusemann</surname><given-names>K</given-names></name><etal/></person-group><article-title>Evolutionary History of the Hymenoptera</article-title><source>Current biology</source><volume>27</volume><issue>7</issue><fpage>1013</fpage><lpage>1018</lpage><publisher-name>Elsevier Ltd</publisher-name><publisher-loc>England</publisher-loc><year>2017</year><pub-id pub-id-type="pmid">28343967</pub-id></element-citation></ref><ref id="R29"><label>29</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Beye</surname><given-names>M</given-names></name><name><surname>Hasselmann</surname><given-names>M</given-names></name><name><surname>Fondrk</surname><given-names>MK</given-names></name><name><surname>Page</surname><given-names>RE</given-names></name><name><surname>Omholt</surname><given-names>SW</given-names></name></person-group><article-title>The Gene csd Is the Primary Signal for Sexual Development in the Honeybee and Encodes an SR-Type Protein</article-title><source>Cell</source><year>2003</year><month>Aug</month><volume>114</volume><issue>4</issue><fpage>419</fpage><lpage>429</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://linkinghub.elsevier.com/retrieve/pii/S0092867403006068">https://linkinghub.elsevier.com/retrieve/pii/S0092867403006068</ext-link></comment><pub-id pub-id-type="pmid">12941271</pub-id></element-citation></ref><ref id="R30"><label>30</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Woyke</surname><given-names>J</given-names></name></person-group><article-title>Drone Larvae from Fertilized Eggs of the Honeybee</article-title><source>Journal of Apicultural Research</source><month>Jan</month><volume>2</volume><issue>1</issue><fpage>19</fpage><lpage>24</lpage><publisher-name>Taylor &amp; Francis</publisher-name><year>1963</year><comment>eprint</comment><pub-id pub-id-type="doi">10.1080/00218839.1963.11100052</pub-id></element-citation></ref><ref id="R31"><label>31</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cho</surname><given-names>S</given-names></name><name><surname>Huang</surname><given-names>ZY</given-names></name><name><surname>Green</surname><given-names>DR</given-names></name><name><surname>Smith</surname><given-names>DR</given-names></name><name><surname>Zhang</surname><given-names>J</given-names></name></person-group><article-title>Evolution of the complementary sex-determination gene of honey bees: Balancing selection and trans-species polymorphisms</article-title><source>Genome Research</source><year>2006</year><month>Nov</month><volume>16</volume><issue>11</issue><fpage>1366</fpage><lpage>1375</lpage><comment>Company: Cold Spring Harbor Laboratory Press Distributor: Cold Spring Harbor Laboratory Press Institution: Cold Spring Harbor Laboratory Press Label: Cold Spring Harbor Laboratory Press Publisher: Cold Spring Harbor Lab. Available from:<ext-link ext-link-type="uri" xlink:href="https://genome.cshlp.org/content/16/11/1366">https://genome.cshlp.org/content/16/11/1366</ext-link></comment><pub-id pub-id-type="pmcid">PMC1626638</pub-id><pub-id pub-id-type="pmid">17065615</pub-id><pub-id pub-id-type="doi">10.1101/gr.4695306</pub-id></element-citation></ref><ref id="R32"><label>32</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bienefeld</surname><given-names>K</given-names></name><name><surname>Pirchner</surname><given-names>F</given-names></name></person-group><article-title>Heritabilities for several colony traits in the honeybee (Apis mellifera carnica)</article-title><source>Apidologie</source><year>1990</year><volume>21</volume><issue>3</issue><fpage>175</fpage><lpage>183</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="http://www.apidologie.org/10.1051/apido:19900302">http://www.apidologie.org/10.1051/apido:19900302</ext-link></comment></element-citation></ref><ref id="R33"><label>33</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Andonov</surname><given-names>S</given-names></name><name><surname>Costa</surname><given-names>C</given-names></name><name><surname>Uzunov</surname><given-names>A</given-names></name><name><surname>Bergomi</surname><given-names>P</given-names></name><name><surname>Lourenco</surname><given-names>D</given-names></name><name><surname>Misztal</surname><given-names>I</given-names></name></person-group><article-title>Modeling honey yield, defensive and swarming behaviors of Italian honey bees (Apis mellifera ligustica) using linear-threshold approaches</article-title><source>BMC Genetics</source><year>2019</year><month>Oct</month><volume>20</volume><issue>1</issue><fpage>78</fpage><pub-id pub-id-type="pmcid">PMC6805448</pub-id><pub-id pub-id-type="pmid">31638899</pub-id><pub-id pub-id-type="doi">10.1186/s12863-019-0776-2</pub-id></element-citation></ref><ref id="R34"><label>34</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Korb</surname><given-names>J</given-names></name><name><surname>Meusemann</surname><given-names>K</given-names></name><name><surname>Aumer</surname><given-names>D</given-names></name><name><surname>Bernadou</surname><given-names>A</given-names></name><name><surname>Elsner</surname><given-names>D</given-names></name><name><surname>Feldmeyer</surname><given-names>B</given-names></name><etal/></person-group><article-title>Comparative transcriptomic analysis of the mechanisms underpinning ageing and fecundity in social insects</article-title><source>Philosophical Transactions of the Royal Society B</source><volume>376</volume><issue>1823</issue><elocation-id>20190728</elocation-id><publisher-name>The Royal Society</publisher-name><year>2021</year><pub-id pub-id-type="pmcid">PMC7938167</pub-id><pub-id pub-id-type="pmid">33678016</pub-id><pub-id pub-id-type="doi">10.1098/rstb.2019.0728</pub-id></element-citation></ref><ref id="R35"><label>35</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Remolina</surname><given-names>SC</given-names></name><name><surname>Hughes</surname><given-names>KA</given-names></name></person-group><article-title>Evolution and mechanisms of long life and high fertility in queen honey bees</article-title><source>AGE</source><year>2008</year><month>Sep</month><volume>30</volume><issue>2-3</issue><fpage>177</fpage><lpage>185</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="http://link.springer.com/10.1007/s11357-008-9061-4">http://link.springer.com/10.1007/s11357-008-9061-4</ext-link></comment><pub-id pub-id-type="pmcid">PMC2527632</pub-id><pub-id pub-id-type="pmid">19424867</pub-id><pub-id pub-id-type="doi">10.1007/s11357-008-9061-4</pub-id></element-citation></ref><ref id="R36"><label>36</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Hoover</surname><given-names>SE</given-names></name><name><surname>Keeling</surname><given-names>CI</given-names></name><name><surname>Winston</surname><given-names>ML</given-names></name><name><surname>Slessor</surname><given-names>KN</given-names></name></person-group><article-title>The effect of queen pheromones on worker honey bee ovary development</article-title><source>Naturwissenschaften</source><volume>90</volume><issue>10</issue><fpage>477</fpage><lpage>480</lpage><publisher-name>Springer</publisher-name><year>2003</year><pub-id pub-id-type="pmid">14564409</pub-id></element-citation></ref><ref id="R37"><label>37</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Kocher</surname><given-names>SD</given-names></name><name><surname>Richard</surname><given-names>FJ</given-names></name><name><surname>Tarpy</surname><given-names>DR</given-names></name><name><surname>Grozinger</surname><given-names>CM</given-names></name></person-group><article-title>Queen reproductive state modulates pheromone production and queen-worker interactions in honeybees</article-title><source>Behavioral Ecology</source><volume>20</volume><issue>5</issue><fpage>1007</fpage><lpage>1014</lpage><publisher-name>Oxford University Press</publisher-name><year>2009</year><pub-id pub-id-type="pmcid">PMC2744121</pub-id><pub-id pub-id-type="pmid">22476212</pub-id><pub-id pub-id-type="doi">10.1093/beheco/arp090</pub-id></element-citation></ref><ref id="R38"><label>38</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bienefeld</surname><given-names>K</given-names></name><name><surname>Ehrhardt</surname><given-names>K</given-names></name><name><surname>Reinhardt</surname><given-names>F</given-names></name></person-group><article-title>Genetic evaluation in the honey bee considering queen and worker effects – A BLUP-Animal Model approach</article-title><source>Apidologie</source><year>2007</year><month>Jan</month><volume>38</volume><issue>1</issue><fpage>77</fpage><lpage>85</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="http://link.springer.com/10.1051/apido:2006050">http://link.springer.com/10.1051/apido:2006050</ext-link></comment></element-citation></ref><ref id="R39"><label>39</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Brascamp</surname><given-names>EW</given-names></name><name><surname>Bijma</surname><given-names>P</given-names></name></person-group><article-title>Methods to estimate breeding values in honey bees</article-title><source>Genetics Selection Evolution</source><year>2014</year><month>Dec</month><volume>46</volume><issue>1</issue><fpage>53</fpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="http://gsejournal.biomedcentral.com/articles/10.1186/s12711-014-0053-9">http://gsejournal.biomedcentral.com/articles/10.1186/s12711-014-0053-9</ext-link></comment><pub-id pub-id-type="pmcid">PMC4168193</pub-id><pub-id pub-id-type="pmid">25237934</pub-id><pub-id pub-id-type="doi">10.1186/s12711-014-0053-9</pub-id></element-citation></ref><ref id="R40"><label>40</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Falconer</surname><given-names>DS</given-names></name></person-group><article-title>A note on Fisher’s ‘average effect’ and ‘average excess’</article-title><source>Genetical Research</source><year>1985</year><month>Dec</month><volume>46</volume><issue>3</issue><fpage>337</fpage><lpage>347</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://www.cambridge.org/core/product/identifier/S0016672300022825/type/journal_article">https://www.cambridge.org/core/product/identifier/S0016672300022825/type/journal_article</ext-link></comment><pub-id pub-id-type="pmid">4092925</pub-id></element-citation></ref><ref id="R41"><label>41</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Obsteter</surname><given-names>J</given-names></name><name><surname>Marine</surname><given-names>A</given-names></name><name><surname>Presern</surname><given-names>J</given-names></name><name><surname>Wragg</surname><given-names>D</given-names></name><name><surname>Gorjanc</surname><given-names>G</given-names></name></person-group><source>Inferring whole-genome tree sequences and population and demographic parameters of the Western honeybee</source><publisher-loc>Rotterdam, The Netherlands</publisher-loc><publisher-name>Wageningen Academic Publishers</publisher-name><year>2022</year><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://www.wageningenacademic.com/pb-assets/wagen/WCGALP2022/53_013.pdf">https://www.wageningenacademic.com/pb-assets/wagen/WCGALP2022/53_013.pdf</ext-link></comment></element-citation></ref><ref id="R42"><label>42</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Adrion</surname><given-names>JR</given-names></name><name><surname>Cole</surname><given-names>CB</given-names></name><name><surname>Dukler</surname><given-names>N</given-names></name><name><surname>Galloway</surname><given-names>JG</given-names></name><name><surname>Gladstein</surname><given-names>AL</given-names></name><name><surname>Gower</surname><given-names>G</given-names></name><etal/></person-group><article-title>A community-maintained standard library of population genetic models</article-title><source>eLife</source><month>Jun</month><volume>9</volume><elocation-id>e54967</elocation-id><publisher-name>eLife Sciences Publications, Ltd</publisher-name><year>2020</year><pub-id pub-id-type="pmcid">PMC7438115</pub-id><pub-id pub-id-type="pmid">32573438</pub-id><pub-id pub-id-type="doi">10.7554/eLife.54967</pub-id></element-citation></ref><ref id="R43"><label>43</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lauterbur</surname><given-names>ME</given-names></name><name><surname>Cavassim</surname><given-names>MIA</given-names></name><name><surname>Gladstein</surname><given-names>AL</given-names></name><name><surname>Gower</surname><given-names>G</given-names></name><name><surname>Pope</surname><given-names>NS</given-names></name><name><surname>Tsambos</surname><given-names>G</given-names></name><etal/></person-group><article-title>Expanding the stdpopsim species catalog, and lessons learned for realistic genome simulations</article-title><source>bioRxiv</source><year>2022</year><elocation-id>2022.10.29.514266</elocation-id><comment>Section: New Results. Available from: <ext-link ext-link-type="uri" xlink:href="https://www.biorxiv.org/content/10.1101/2022.10.29.514266v1">https://www.biorxiv.org/content/10.1101/2022.10.29.514266v1</ext-link></comment></element-citation></ref><ref id="R44"><label>44</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kelleher</surname><given-names>J</given-names></name><name><surname>Etheridge</surname><given-names>AM</given-names></name><name><surname>McVean</surname><given-names>G</given-names></name></person-group><article-title>Efficient Coalescent Simulation and Genealogical Analysis for Large Sample Sizes</article-title><source>PLOS Computational Biology</source><year>2016</year><month>May</month><volume>12</volume><issue>5</issue><elocation-id>e1004842</elocation-id><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://dx.plos.org/10.1371/journal.pcbi.1004842">https://dx.plos.org/10.1371/journal.pcbi.1004842</ext-link></comment><pub-id pub-id-type="pmcid">PMC4856371</pub-id><pub-id pub-id-type="pmid">27145223</pub-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1004842</pub-id></element-citation></ref><ref id="R45"><label>45</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Baumdicker</surname><given-names>F</given-names></name><name><surname>Bisschop</surname><given-names>G</given-names></name><name><surname>Goldstein</surname><given-names>D</given-names></name><name><surname>Gower</surname><given-names>G</given-names></name><name><surname>Ragsdale</surname><given-names>AP</given-names></name><name><surname>Tsambos</surname><given-names>G</given-names></name><etal/></person-group><article-title>Efficient ancestry and mutation simulation with msprime 1.0</article-title><source>Genetics</source><year>2022</year><month>Mar</month><volume>220</volume><issue>3</issue><elocation-id>iyab229</elocation-id><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/genetics/article/doi/10.1093/genetics/iyab229/6460344">https://academic.oup.com/genetics/article/doi/10.1093/gene tics/iyab229/6460344</ext-link></comment><pub-id pub-id-type="pmcid">PMC9176297</pub-id><pub-id pub-id-type="pmid">34897427</pub-id><pub-id pub-id-type="doi">10.1093/genetics/iyab229</pub-id></element-citation></ref><ref id="R46"><label>46</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Haller</surname><given-names>BC</given-names></name><name><surname>Messer</surname><given-names>PW</given-names></name></person-group><article-title>SLiM 3: Forward Genetic Simulations Beyond the Wright–Fisher Model</article-title><source>Molecular Biology and Evolution</source><year>2019</year><month>Mar</month><volume>36</volume><issue>3</issue><fpage>632</fpage><lpage>637</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/mbe/article/36/3/632/5229931">https://academic.oup.com/mbe/article/36/3/632/5229931</ext-link></comment><pub-id pub-id-type="pmcid">PMC6389312</pub-id><pub-id pub-id-type="pmid">30517680</pub-id><pub-id pub-id-type="doi">10.1093/molbev/msy228</pub-id></element-citation></ref><ref id="R47"><label>47</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Eddelbuettel</surname><given-names>D</given-names></name><name><surname>Balamuta</surname><given-names>JJ</given-names></name></person-group><article-title>Extending <italic>R</italic> with C⊓—+: A Brief Introduction to Rcpp</article-title><source>The American Statistician</source><year>2018</year><month>Jan</month><volume>72</volume><issue>1</issue><fpage>28</fpage><lpage>36</lpage><comment>Available from: <ext-link ext-link-type="uri" xlink:href="https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375990">https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375990</ext-link></comment></element-citation></ref><ref id="R48"><label>48</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lehermeier</surname><given-names>C</given-names></name><name><surname>Teyssedre</surname><given-names>S</given-names></name><name><surname>Schon</surname><given-names>CC</given-names></name></person-group><article-title>Genetic Gain Increases by Applying the Usefulness Criterion with Improved Variance Prediction in Selection of Crosses</article-title><source>Genetics</source><year>2017</year><month>Dec</month><volume>207</volume><issue>4</issue><fpage>1651</fpage><lpage>1661</lpage><comment>Available from:<ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/genetics/article/207/4/1651/5930776">https://academic.oup.com/genetics/article/207/4/1651/5930776</ext-link></comment><pub-id pub-id-type="pmcid">PMC5714471</pub-id><pub-id pub-id-type="pmid">29038144</pub-id><pub-id pub-id-type="doi">10.1534/genetics.117.300403</pub-id></element-citation></ref><ref id="R49"><label>49</label><element-citation publication-type="web"><person-group person-group-type="author"><name><surname>Werner</surname><given-names>CR</given-names></name><name><surname>Gaynor</surname><given-names>RC</given-names></name><name><surname>Sargent</surname><given-names>DJ</given-names></name><name><surname>Lillo</surname><given-names>A</given-names></name><name><surname>Gorjanc</surname><given-names>G</given-names></name><name><surname>Hickey</surname><given-names>JM</given-names></name></person-group><article-title>Genomic selection strategies for clonally propagated crops</article-title><source>Genetics</source><year>2020</year><comment>Available from:<ext-link ext-link-type="uri" xlink:href="http://biorxiv.org/lookup/doi/10.1101/2020.06.15.152017">http://biorxiv.org/lookup/doi/10.1101/2020.06.15.152017</ext-link></comment></element-citation></ref><ref id="R50"><label>50</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Selle</surname><given-names>ML</given-names></name><name><surname>Steinsland</surname><given-names>I</given-names></name><name><surname>Powell</surname><given-names>O</given-names></name><name><surname>Hickey</surname><given-names>JM</given-names></name><name><surname>Gorjanc</surname><given-names>G</given-names></name></person-group><article-title>Spatial modelling improves genetic evaluation in smallholder breeding programs</article-title><source>Genetics Selection Evolution</source><year>2020</year><month>Nov</month><volume>52</volume><issue>1</issue><fpage>69</fpage><pub-id pub-id-type="pmcid">PMC7670695</pub-id><pub-id pub-id-type="pmid">33198636</pub-id><pub-id pub-id-type="doi">10.1186/s12711-020-00588-w</pub-id></element-citation></ref><ref id="R51"><label>51</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Parichehreh</surname><given-names>Shabnam</given-names></name><name><surname>Tahmasbi</surname><given-names>Gholamhosein</given-names></name><name><surname>Sarafrazi</surname><given-names>Alimorad</given-names></name><name><surname>Tajabadi</surname><given-names>Naser</given-names></name><name><surname>Fard</surname><given-names>Samaneh Solhjuyi</given-names></name><name><surname>Rezaei</surname><given-names>Hamed</given-names></name></person-group><source>Predicting distribution modeling of Apis florea F. in the world</source><publisher-loc>Turkey</publisher-loc><year>2022</year></element-citation></ref></ref-list></back><floats-group><fig id="F1" position="float"><label>Figure 1</label><caption><p>A flow chart of initialising a honeybee simulation in SIMplyBee. The first step is simulating a desired number of founder genomes and specifying the global simulation parameters in a new <monospace>SimParamBee</monospace> object. Next, we create the base virgin queens from the founder genomes. We can simulate any number (<monospace>nInd</monospace>) of virgin queens with the maximum being the number of simulated founder genomes. We choose one virgin queen as the future queen of the colony (left). On the other side (right), we select one virgin queen to provide drones for the DCA. We could select more virgin queens as future queens to create more colonies, and more virgin queen to contribute to the DCA. We next cross the virgin queen to a sample of drones from the DCA and use it to create a colony. We next build-up a colony, which adds in a desired number of workers and drones. The build-up also results in a productive colony.</p></caption><graphic xlink:href="EMS158938-f001"/></fig><fig id="F2" position="float"><label>Figure 2</label><caption><p>A flow chart of the colony swarming event in SIMplyBee. The <monospace>swarm()</monospace> function returns an R list with two colonies, <monospace>swarm</monospace> and <monospace>remnant</monospace>, both of which are non-productive. Parameter <monospace>p</monospace> represent the proportion of workers that leave with the swarm. After the swarm, the user can cross() the virgin queen of the remnant colony, or use an already mated queen from another source using reQueen(), which mimics the beekeepers’ options. Refer to the key in <xref ref-type="fig" rid="F1">Figure 1</xref>.</p></caption><graphic xlink:href="EMS158938-f002"/></fig><fig id="F3" position="float"><label>Figure 3</label><caption><p>A flow chart of the colony splitting event in SIMplyBee. The <monospace>split()</monospace> function returns an R list with two colonies, <monospace>split</monospace> and <monospace>remnant</monospace>, where the <italic>split</italic> is non-productive and the <italic>remnant</italic> is productive. Parameter <monospace>p</monospace> represents the proportion of workers that are removed in a split. After the split, the user can cross() the virgin queen of the remnant colony, or use an already mated queen from another source using reQueen(), which mimics the beekeepers’ options. Refer to the key in <xref ref-type="fig" rid="F1">Figure 1</xref>.</p></caption><graphic xlink:href="EMS158938-f003"/></fig><fig id="F4" position="float"><label>Figure 4</label><caption><p>A flow chart of the colony supersedure event in SIMplyBee. The <monospace>supersede()</monospace> function returns a queen-less colony with a virgin queen. After a supersedure, a colony remains productive since the colony is still at its full size but a cross() is required for a new queen. Refer to the key in <xref ref-type="fig" rid="F1">Figure 1</xref>.</p></caption><graphic xlink:href="EMS158938-f004"/></fig><fig id="F5" position="float"><label>Figure 5</label><caption><p>A flow chart of the colony collapse event in SIMplyBee. The <monospace>collapse</monospace> function keeps all the individuals in a colony, but turns on the <monospace>collapse</monospace> parameter, hence marking the colony as collapsed and all the individual within it as dead. Further simulation with a collapsed colony is not allowed in SIMplyBee. Refer to the key in <xref ref-type="fig" rid="F1">Figure 1</xref></p></caption><graphic xlink:href="EMS158938-f005"/></fig></floats-group></article>