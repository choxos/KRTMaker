<!DOCTYPE article
 PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">
<article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="preprint"><?all-math-mml yes?><?use-mml?><?origin ukpmcpa?><front><journal-meta><journal-id journal-id-type="nlm-ta">bioRxiv</journal-id><journal-title-group><journal-title>bioRxiv : the preprint server for biology</journal-title></journal-title-group><issn pub-type="ppub"/></journal-meta><article-meta><article-id pub-id-type="manuscript">EMS157330</article-id><article-id pub-id-type="doi">10.1101/2022.11.17.516671</article-id><article-id pub-id-type="archive">PPR573117</article-id><article-version-alternatives><article-version article-version-type="status">preprint</article-version><article-version article-version-type="number">2</article-version></article-version-alternatives><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>PhysiCOOL: A generalized framework for model Calibration and Optimization Of modeLing projects</article-title></title-group><contrib-group><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">https://orcid.org/0000-0001-9129-3416</contrib-id><name><surname>Gonçalves</surname><given-names>Inês G.</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="corresp" rid="CR1">✉</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-9643-1694</contrib-id><name><surname>Hormuth</surname><given-names>David A.</given-names><suffix>II</suffix></name><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-9537-507X</contrib-id><name><surname>Prabhakaran</surname><given-names>Sandhya</given-names></name><xref ref-type="aff" rid="A3">3</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-0984-9305</contrib-id><name><surname>Phillips</surname><given-names>Caleb M.</given-names></name><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><contrib-id contrib-id-type="orcid">https://orcid.org/0000-0002-9864-7683</contrib-id><name><surname>García-Aznar</surname><given-names>José Manuel</given-names></name><xref ref-type="aff" rid="A1">1</xref></contrib></contrib-group><aff id="A1"><label>1</label>Multiscale in Mechanical and Biological Engineering, University of Zaragoza</aff><aff id="A2"><label>2</label>Oden Institute for Computational Engineering and Sciences, The University of Texas at Austin</aff><aff id="A3"><label>3</label>Integrated Mathematical Oncology department, H.Lee Moffitt Cancer Center and Research Institute</aff><author-notes><corresp id="CR1">
<label>✉</label><bold>For correspondence:</bold> <ext-link ext-link-type="uri" xlink:href="https://github.com/IGGoncalves/PhysiCOOL/issues">https://github.com/IGGoncalves/PhysiCOOL/issues</ext-link> (IGG)</corresp></author-notes><pub-date pub-type="nihms-submitted"><day>19</day><month>11</month><year>2022</year></pub-date><pub-date pub-type="preprint"><day>18</day><month>11</month><year>2022</year></pub-date><permissions><ali:free_to_read/><license><ali:license_ref>https://creativecommons.org/licenses/by/4.0/</ali:license_ref><license-p>This work is licensed under a <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0 International license</ext-link>.</license-p></license></permissions><abstract><p id="P1"><italic>In silico</italic> models of biological systems are usually very complex and rely on several parameters describing physical and biological properties that require validation. As such, parameter space exploration is an essential component of computational model development to fully characterize and validate simulation results. Experimental data may also be used to constrain parameter space (or enable model calibration) to enhance the biological relevance of model parameters. One widely used computational platform in the mathematical biology community is <italic>PhysiCell</italic> which provides a standardized approach to agent-based models of biological phenomena at different time and spatial scales. Nonetheless, one limitation of <italic>PhysiCell</italic> is that there has not been a generalized approach for parameter space exploration and calibration that can be run without high-performance computing access. Taking this into account, we present <italic>PhysiCOOL,</italic> an open-source Python library tailored to create standardized calibration and optimization routines of <italic>PhysiCell</italic> models.</p></abstract><abstract abstract-type="graphical"><p id="P2"><fig id="F3" position="anchor"><label>Graphic abstract</label><graphic xlink:href="EMS157330-f003"/></fig>
</p></abstract></article-meta></front><body><sec id="S1" sec-type="intro"><title>Introduction</title><p id="P3">Mathematical biology is a field of study that aims to represent biological systems through the language of mathematics as a set of mathematical rules which can be used to test hypotheses and make predictions (<xref ref-type="bibr" rid="R4">Clermont and Zenker, 2015</xref>). Several types of mathematical models can be employed to simulate biological systems at varying complexity levels. Agent-based models are one of the most popular implementations to develop models that consider the cellular and sub-cellular scales. Currently, multiple computational frameworks are available to facilitate the creation of agent-based models based on previously built templates, making mathematical biology more accessible to researchers from different backgrounds (<xref ref-type="bibr" rid="R16">Metzcar et al., 2019</xref>). Among these platforms, <italic>PhysiCell</italic> (<xref ref-type="bibr" rid="R7">Ghaffarizadeh et al., 2018</xref>) is an open-source hybrid framework that is able to simulate cells as discrete agents and model the reaction-diffusion dynamics of the substances present in the surrounding microenvironment through a continuous approach. Furthermore, recent add-ons have been developed to introduce new biological processes into the <italic>PhysiCell</italic> ecosystem (<xref ref-type="bibr" rid="R13">Letort et al., 2018</xref>; <xref ref-type="bibr" rid="R3">Bergman et al., 2022</xref>; <xref ref-type="bibr" rid="R8">Gonçalves and Garcia-Aznar, 2021</xref>).</p><p id="P4">Despite the recent advances in the development of additional <italic>PhysiCell</italic> plugins, the new modules are mostly centred around model extensions. Nevertheless, model exploration can be as important as model development to validate results and evaluate whether the model predictions about the underlying biological mechanisms are plausible (<xref ref-type="bibr" rid="R9">Hasenauer et al., 2015</xref>). Furthermore, experimental data could be used to provide biological and/or physical constraints on model parameters to validate whether the model captures the range of expected biological behaviours (<xref ref-type="bibr" rid="R11">Kazerouni et al., 2020</xref>), and optimization routines could be employed to understand which model parameters maximize the similarity between the model results and a target data set. Subsequently, model developers may consider these optimal solutions to identify which biological mechanisms captured by the computational model may explain the experimental data.</p><p id="P5">We highlight that previous works have developed parameter exploration routines with <italic>Physi-Cell,</italic> namely DAPT and PhysiCell-EMEWS (<xref ref-type="bibr" rid="R6">Duggan, Metzcar, and Macklin, 2021</xref>; <xref ref-type="bibr" rid="R18">Ozik et al., 2018</xref>), but these were specifically designed for high-performance computing (HPC) and distributed systems. Hence, currently, general <italic>PhysiCell</italic> users without access to such resources, or whose needs do not require them, must develop their own scripts to process simulation results and perform model exploration studies. As well as introducing a barrier to scientific progress depending on the researchers’ programming knowledge level and computing resources, HPC workflows, in general, lack standardization that may enable widespread use in the mathematical biology community (<xref ref-type="bibr" rid="R2">Banga, 2008</xref>). In addition, DAPT and PhysiCell-EMEWS focus on parameter exploration and not optimization, and they require some level of expertise in both Python and PhysiCell.</p><p id="P6">Taking into account that there is still a need in the <italic>PhysiCell</italic> community for a standardized tool that implements calibration and optimization routines, we present <italic>PhysiCOOL</italic>, a generalized framework for model calibration and optimization of modelling projects written in <italic>PhysiCell. PhysiCOOL</italic> aims to be model agnostic. In other words, models are treated as a black box that can be executed through Python, making this approach suitable for several kinds of biological problems. Moreover, our library includes a built-in multilevel optimization routine for parameter estimation that is constrained by target output (experimental or otherwise). We also provide two practical examples of how <italic>PhysiCOOL</italic> can be used, showcasing <italic>PhysiCOOL’s</italic> optimization routine at two distinct complexity levels. Furthermore, we show how <italic>PhysiCOOL</italic> black-box models can be used to couple <italic>PhysiCell</italic> with other publicly-available Python libraries for model optimization.</p></sec><sec id="S2"><title>Implementation</title><p id="P7"><italic>PhysiCOOL</italic> is a Python library that requires Python version 3.8 or higher. This package was created to work specifically with <italic>PhysiCell</italic> models, and it fully supports <italic>PhysiCell</italic> v1.10.4 or lower (the most recent version at the time of publication). Furthermore, <italic>PhysiCOOL</italic> has been tested extensively and includes unit tests to assure that its modules are working as expected and that it can be used on different platforms.</p><sec id="S3"><title>Configuration file parser</title><p id="P8">As with many several computational modelling frameworks, <italic>PhysiCell</italic> models are initialized with values stored in a text-based configuration file, namely an Extensible Markup Language (XML) file (<xref ref-type="bibr" rid="R7">Ghaffarizadeh et al., 2018</xref>). Thus, in parameter sweeps and sensitivity analysis studies, it is necessary to open these files and modify the parameter values to be studied every time a new simulation is run. This process can be done manually, either by editing the XML file directly or using GUI tools such as <italic>xml2jupyter</italic> (<xref ref-type="bibr" rid="R10">Heiland et al., 2019</xref>). However, it becomes unfeasible to repeat this action several times in large-scale studies. Henceforth, it is crucial to automate this process to run optimization and calibration workflows. Although it is possible to create Python scripts that will edit these files automatically with a standard module such as <italic>ElementTree</italic> (<xref ref-type="bibr" rid="R20">Xml.etree.ElementTree - the elementtree XML API n.d</xref>.), doing so requires users to identify the values to be updated with long strings that reflect the structure of the XML file, as shown in the code snippet below.</p><p id="P9"><preformat preformat-type="computer code"><styled-content style="font-size:10px;color:#238000"><bold>from</bold></styled-content> <styled-content style="font-size:10px;color:#0000FF"><bold>xml.etree</bold></styled-content> <styled-content style="font-size:10px;color:#238000"><bold>import</bold></styled-content> <styled-content style="font-size:10px;color:#000000">ElementTree</styled-content></preformat></p><p id="P10"><preformat preformat-type="computer code"><styled-content style="font-size:10px;color:#3D7B85"># Read cell data</styled-content>
<styled-content style="font-size:10px;color:#000000">file_path</styled-content> <styled-content style="font-size:10px;color:#666666">=</styled-content> <styled-content style="font-size:10px;color:#BA2121">"config/PhysiCell_settings.xml"</styled-content>
<styled-content style="font-size:10px;color:#000000">tree</styled-content> <styled-content style="font-size:10px;color:#666666">=</styled-content> <styled-content style="font-size:10px;color:#000000">ElementTree</styled-content><styled-content style="font-size:10px;color:#666666">.</styled-content><styled-content style="font-size:10px;color:#000000">parse(file_path)</styled-content></preformat></p><p id="P11"><preformat preformat-type="computer code"><styled-content style="font-size:10px;color:#3D7A7A"># Define where to find the motility parameters</styled-content>
<styled-content style="font-size:10px;color:#000000">stem</styled-content> <styled-content style="font-size:10px;color:#666666">=</styled-content> <styled-content style="font-size:10px;color:#BA2121">"cell_definitions/cell_definition[@name=’default’]/phenotype/motility"</styled-content>
<styled-content style="font-size:10px;color:#3D7A7A"># Define the name and value of the parameter to be updated</styled-content>
<styled-content style="font-size:10px;color:#000000">key</styled-content> <styled-content style="font-size:10px;color:#666666">=</styled-content> <styled-content style="font-size:10px;color:#BA2121">"migration_bias"</styled-content>
<styled-content style="font-size:10px;color:#000000">value</styled-content> <styled-content style="font-size:10px;color:#666666">= 0.9</styled-content>
<styled-content style="font-size:10px;color:#3D7A7A"># Update the migration_bias value (no validation)</styled-content>
<styled-content style="font-size:10px;color:#000000">tree</styled-content><styled-content style="font-size:10px;color:#666666">.</styled-content><styled-content style="font-size:10px;color:#000000">find(</styled-content><styled-content style="font-size:10px;color:#BA2121">f"</styled-content><styled-content style="font-size:10px;color:#A35978">{</styled-content><styled-content style="font-size:10px;color:#000000">stem</styled-content><styled-content style="font-size:10px;color:#A35978">}</styled-content><styled-content style="font-size:10px;color:#BA2121">/</styled-content><styled-content style="font-size:10px;color:#A35978">{</styled-content><styled-content style="font-size:10px;color:#000000">key</styled-content><styled-content style="font-size:10px;color:#A35978">}</styled-content><styled-content style="font-size:10px;color:#BA2121">"</styled-content><styled-content style="font-size:10px;color:#000000">)</styled-content><styled-content style="font-size:10px;color:#666666">.</styled-content><styled-content style="font-size:10px;color:#000000">text</styled-content> <styled-content style="font-size:10px;color:#666666">=</styled-content> <styled-content style="font-size:10px;color:#238000">str</styled-content><styled-content style="font-size:10px;color:#000000">(value)</styled-content>
<styled-content style="font-size:10px;color:#000000">tree</styled-content><styled-content style="font-size:10px;color:#666666">.</styled-content><styled-content style="font-size:10px;color:#000000">write(file_path)</styled-content></preformat></p><p id="P12">Here, we aimed to develop a Python class that enables users to read the data from these configuration files in a more efficient manner, making this process less prone to errors. We implemented a <italic>ConfigurationFileParser</italic> class that reads the data from the configuration file into custom Python objects that follow the expected structure and data requirements defined in the XML file. Variable types and numerical constraints are validated when new instances of these data classes are created and when their values are updated. To achieve this, we implemented our classes using <italic>Pydantic,</italic> (Colvin, n.d.) which improves data validation in Python. The task described in the code snippet presented previously can be implemented in a more user-friendly way with <italic>PhysiCOOL,</italic> as shown below: <preformat preformat-type="computer code"><styled-content style="font-size:10px;color:#238000"><bold>from</bold></styled-content> <styled-content style="font-size:10px;color:#0000FF"><bold>physicool.config</bold></styled-content> <styled-content style="font-size:10px;color:#238000"><bold>import</bold></styled-content> <styled-content style="font-size:10px;color:#000000">ConfigFileParser</styled-content></preformat></p><p id="P13"><preformat preformat-type="computer code"><styled-content style="font-size:10px;color:#3D7A7A"># Read cell data into custom Python objects</styled-content>
<styled-content style="font-size:10px;color:#000000">file_path</styled-content> <styled-content style="font-size:10px;color:#666666">=</styled-content> <styled-content style="font-size:10px;color:#BA2121">"config/PhysiCell_settings.xml"</styled-content>
<styled-content style="font-size:10px;color:#000000">parser</styled-content> <styled-content style="font-size:10px;color:#666666">=</styled-content> <styled-content style="font-size:10px;color:#000000">ConfigFileParser(file_path)</styled-content>
<styled-content style="font-size:10px;color:#000000">cell_data</styled-content> <styled-content style="font-size:10px;color:#666666">=</styled-content> <styled-content style="font-size:10px;color:#000000">parser</styled-content>.<styled-content style="font-size:10px;color:#000000">read_cell_data(name</styled-content><styled-content style="font-size:10px;color:#666666">=</styled-content><styled-content style="font-size:10px;color:#BA2121">"default"</styled-content><styled-content style="font-size:10px;color:#000000">)</styled-content></preformat></p><p id="P14"><preformat preformat-type="computer code"><styled-content style="font-size:10px;color:#3D7A7A"># Update the migration_bias value (values will be validated before writing)</styled-content>
<styled-content style="font-size:10px;color:#000000">cell_data</styled-content><styled-content style="font-size:10px;color:#666666">.</styled-content><styled-content style="font-size:10px;color:#000000">motility</styled-content><styled-content style="font-size:10px;color:#666666">.</styled-content><styled-content style="font-size:10px;color:#000000">migration_bias</styled-content> <styled-content style="font-size:10px;color:#666666">= 0.9</styled-content>
<styled-content style="font-size:10px;color:#000000">parser</styled-content><styled-content style="font-size:10px;color:#666666">.</styled-content><styled-content style="font-size:10px;color:#000000">write_cell_params(cell_data)</styled-content></preformat></p></sec><sec id="S4"><title>Black-box models</title><p id="P15">In complex and large computational models, it may be challenging or even impossible to estimate the model outputs analytically. Consequently, it is common to conduct calibration and optimization studies by running several simulations and performing sensitivity analysis studies to identify how model outputs change in response to different input parameter values. This process is recognized as simulation-based optimization or black-box optimization (<xref ref-type="bibr" rid="R1">Alarie et al., 2021</xref>). <italic>PhysiCell</italic> models are written in C++ and have to be compiled to produce an executable file that can be run to produce simulation results. In order to test and characterize the response of these models, it is generally necessary to conduct three tasks: <list list-type="order" id="L1"><list-item><p id="P16">Update the <italic>PhysiCell</italic> configuration file with input parameters values;</p></list-item><list-item><p id="P17">Run the <italic>PhysiCell</italic> model;</p></list-item><list-item><p id="P18">Read the model outputs and compute a desired output metric.</p></list-item></list></p><p id="P19">These tasks can be performed manually. Nonetheless, it is not feasible or productive to do so in large computational studies, specifically when trying to characterize the model response to a large number of input parameter values that can be inside a wide range and require multiple simulation runs. Hence, PhysiCOOL allows users to create black-box models using the <italic>PhysiCellBlackBox</italic> class and automatically perform the aforementioned tasks through Python.</p><p id="P20">These black-box models are modular in the sense that the users can select what functions to use to update the configuration file (i) and to process the results (iii). For instance, users can decide to change the cells’ motility parameters and evaluate the effect on the distance travelled by cells over time. Alternatively, the cell cycling rates could be varied to analyze the evolution of the number of cells. Furthermore, (i) and (iii) do not have to be defined in the black-box model. In fact, users can also create black-box models composed only of the PhysiCell executable and use our approach to run multiple simulation replicates.</p><p id="P21">PhysiCOOL offers some built-in data quantification methods that can be used to extract and process data in step (iii). For example, functions are provided to obtain the final number of cells in a simulation, the final cell coordinates and the concentration of a given substance over the simulation domain. Furthermore, these methods can be employed by users to process simulation results and generate 2D and 3D plots of the cells and the microenvironment.</p></sec><sec id="S5"><title>Multilevel parameter sweeps</title><p id="P22">Parameter optimization studies require the definition of a search space, which defines the range of the parameter values that will be studied. There are multiple approaches to defining this space and how to explore it. For example, random search algorithms can be employed to randomly sample points within a defined bounded parameter space. Alternatively, a grid search, while a more computationally expensive option, systematically samples every point within a defined parameter grid space providing a more comprehensive overview of the model’s response than that offered by a random search. Grid-based approaches have advantages for stochastic frameworks such as Physi-Cell, as gradient-based approaches may struggle to accurately calculate the gradient and change the parameter set to minimize the error between the model and the target data.</p><p id="P23">PhysiCOOL implements a multilevel parameter sweep class (MultiLevelSweep) that is aimed at identifying the parameters that best fit a target data set through a grid search. In this example, the parameter sweep considers two PhysiCell parameters for which the user should provide initial values. At each level, <italic>MultiLevelSweep</italic> creates a search grid based on these two values, the number of points per direction and the percentage per direction. These values should be configured by the user and optimized for a given problem. Furthermore, the number of levels and grid spacing parameters are related to the precision and sensitivity of each model parameter. That is, for less sensitivity or less precise models, a single-level coarse grid search may suffice. However, for parameters that require a high level of precision and significantly affect the model outcomes, multiple levels may be beneficial.</p><p id="P24">The results for each simulation are compared to the target data and the error between both datasets is computed and stored. At the end of the level, the parameters that provided the minimum error value are selected as the centre of the parameter exploration grid for the next level and the parameter bounds are updated accordingly.</p></sec></sec><sec id="S6"><title>Examples</title><sec id="S7"><title>Simple model of logistic growth</title><p id="P25">The first example was implemented to calibrate two parameters of a simple model of logistic growth based on some target data that defines a generated growth curve. Therefore, it serves as an introduction to this <italic>PhysiCOOL</italic> feature, as users are able to fully understand the behaviour of this simple model. It must be remarked that this model was not implemented in <italic>PhysiCell.</italic> We modelled the number of agents in a population, <italic>N</italic>, over a period of time <italic>N</italic> through a logistic function given by <xref ref-type="disp-formula" rid="FD1">Eq 1</xref>: <disp-formula id="FD1"><label>(1)</label><mml:math id="M1"><mml:mrow><mml:mi>N</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>K</mml:mi><mml:msub><mml:mi>N</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mi>N</mml:mi><mml:mn>0</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mi>K</mml:mi><mml:mo>−</mml:mo><mml:msub><mml:mi>N</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mi>exp</mml:mi><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mo>−</mml:mo><mml:mi>r</mml:mi><mml:mi>t</mml:mi></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mfrac></mml:mrow></mml:math></disp-formula> where <italic>K</italic> represents the carrying capacity, i.e., the maximum population size, <italic>N</italic><sub>0</sub> represents the number of initial agents and <italic>r</italic> is the proliferation rate. In this study, we fixed the initial number of agents and evaluated how the carrying capacity and the proliferation rate regulated the growth curve of a population. An example of two growth curves obtained for different model parameters is shown in <xref ref-type="fig" rid="F1">Fig 1(a)</xref>.</p><p id="P26">We generated some target data using this model (<italic>K</italic> = 1000, <italic>r</italic> = 0.1) and, subsequently, we used <italic>PhysiCOOL</italic>’s multilevel sweep algorithm to evaluate if we could estimate these model parameters based on their resulting growth curve. To do so, we first created a search grid based on a set of user-defined values: an initial estimate for both parameters, the number of points to search in each direction of the search grid, the percentage to vary in each direction and the number of levels to search. These values can be found in <xref ref-type="table" rid="T1">Table 1</xref>.</p><p id="P27"><xref ref-type="fig" rid="F1">Fig 1(b)</xref> shows the error between the target and simulated datasets for every cell of the parameter space after one level of the multilevel search. At this point, a new point estimate was calculated based on the parameter values that minimized the error between the two datasets. Likewise, the parameter space was adjusted to the area of interest and the process was repeated in the new parameter grid. This process was repeated for each level of the search and the results are shown in <xref ref-type="fig" rid="F1">Fig 1(c)</xref>.</p></sec><sec id="S8"><title>PhysiCell chemotaxis model</title><p id="P28">The second example can be classified as a more complex problem since it was developed to calibrate a chemotaxis model written in <italic>PhysiCell.</italic> In this modelling framework, the cells’ chemotactic response, i.e., the ability to migrate along a substance gradient, is dictated by a bias value defined between 0 and 1 (<xref ref-type="bibr" rid="R7">Ghaffarizadeh et al., 2018</xref>). When cells have a migration bias of 0, they move in a random walk. Conversely, if the value is set to 1, cells follow the substance gradient in a deterministic manner. Therefore, we developed a model to estimate the cells’ speed and migration bias in response to an oxygen gradient based on their travelled distances.</p><p id="P29">We implemented a 2D simulation with an oxygen source on one of the domain walls, as defined by the model’s boundary conditions, and a group of cells placed on the opposite wall, as shown in <xref ref-type="fig" rid="F2">Fig 2(a)</xref>. We expected that the cells’ final position would be modulated by the cells’ sensitivity to the oxygen chemotactic gradient. On the one hand, if a cell population had low sensitivity and, thus, moved randomly, they would likely remain close to their initial position as they would move around without following any specific direction. On the other hand, cells that followed oxygen would move towards the opposite wall, as seen in panel 2(b).</p><p id="P30">We generated some target data by running a simulation with a migration bias of 0.9 and a speed value of 2.0 <italic>μ</italic>m/min and storing the final y coordinates of the cells. Subsequently, we ran our multilevel sweep pipeline to evaluate whether we could estimate the parameter values that originated this data with a set of initial points different from the target parameter values. The results for this study are shown in <xref ref-type="fig" rid="F2">Fig 2(c)</xref>.</p></sec><sec id="S9"><title>Connecting to third-party libraries</title><p id="P31">Given that <italic>PhysiCOOL</italic> makes it possible for users to turn their <italic>PhysiCel</italic>l models into black-box models that receive some input parameters and return an output metric, it is straightforward to couple them with third-party Python libraries that accept this kind of models. For example, <italic>psweep</italic> (<xref ref-type="bibr" rid="R19">Schmerler, 2022</xref>) is a Python library developed to run parameter studies and save the input parameters values and the returned output metrics into a database. Users must define a set of parameters and, for each of the defined values, <italic>psweep</italic> will (i) run a given user-defined function that takes these parameters as input and (ii) save the input and output values returned by this function into the database. Therefore, a PhysiCOOL black-box model could seamlessly be integrated into step (i).</p><p id="P32">In addition, more sophisticated libraries could be considered to perform advanced optimization studies such as Approximate Bayesian Computation (ABC) and Bayesian Optimization for Likelihood-Free Inference (BOLFI) to sample parameter spaces ina more efficient manner (<xref ref-type="bibr" rid="R14">Lintusaari et al., 2018</xref>; <xref ref-type="bibr" rid="R15">Merino-Casallo et al., 2018</xref>; <xref ref-type="bibr" rid="R12">Lei et al., 2021</xref>; <xref ref-type="bibr" rid="R17">Movilla et al., 2023</xref>). Henceforth, although <italic>PhysiCOOL</italic> offers built-in optimization routines, it can be used in a modular way to take advantage of other libraries that may be more appropriate to a certain study or type of research, without the need to implement these optimization algorithms from scratch.</p></sec></sec><sec id="S10"><title>Future directions</title><p id="P33">At its current state of development, we believe that <italic>PhysiCOOL</italic> will already improve <italic>PhysiCell</italic>’s accessibility as it provides an intuitive interface to run studies in Python, which is more popular among biology researchers than C++, in which <italic>PhysiCell</italic> was originally written. Additionally, this standardized approach provides a straightforward workflow for integrating target data (defined from simulations or biological observations) to constrain parameter space for agent-based models. In the future, new features can be added to <italic>PhysiCOOL</italic>, such as the ability to generate non-linear parameter spaces, stopping criteria based on iteration or tolerance for the multilevel sweep and employing alternative optimization algorithms. Although future iterations of this library may include different optimization approaches, its modular design assures that advanced users are still able to build pipelines that suit their needs.</p></sec></body><back><ack id="S11"><title>Acknowledgment</title><p>The authors would like to acknowledge Paul Macklin, Elmar Bucher and the PhysiCell team for the support and advice offered during the design process of this application. This preprint was created using the LaPreprint template (<ext-link ext-link-type="uri" xlink:href="https://github.com/roaldarbol/lapreprint">https://github.com/roaldarbol/lapreprint</ext-link>) by Mikkel Roald-Arbøl <ext-link ext-link-type="uri" xlink:href="https://orcid.org/0000-0002-9998-0058">https://orcid.org/0000-0002-9998-0058</ext-link>.</p><sec id="S12"><title>Funding</title><p>This work was supported as part of the 2021 PhysiCell Hackathon (administrative supplement to Multiscale systems biology modeling to exploit tumor-stromal metabolic crosstalk in colorectal cancer, grant no 1U01CA232137). IGG was and JMGA were supported as part of projects that have received funding from the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme (grant agreement no 101018587) and the project PRIMAGE (PRedictive In-silico Multiscale Analytics to support cancer personalized diaGnosis and prognosis, empowered by imaging biomarkers), a Horizon 2020|RIA project (Topic SC1-DTH-07-2018), grant agreement no: 826494.</p></sec></ack><sec id="S13" sec-type="data-availability"><title>Data availability</title><p id="P34">PhysiCOOL is available as a Python library distributed through PyPi. The source code is available on GitHub. All the examples presented here can be run on Gitpod through interactive Jupyter Notebooks. Documentation is available on ReadTheDocs.</p></sec><fn-group><fn id="FN1" fn-type="con"><p id="P35"><bold>Author contributions</bold> <list list-type="bullet" id="L2"><list-item><p id="P36"><bold>Conceptualization:</bold> Inês G. Gonçalves, David A. Hormuth II, Caleb M. Phillips, Sandhya Prabhakaran</p></list-item><list-item><p id="P37"><bold>Software:</bold> Inês G. Gonçalves, David A. Hormuth II, Caleb M. Phillips</p></list-item><list-item><p id="P38"><bold>Validation:</bold> Inês G. Gonçalves, David A. Hormuth II, Sandhya Prabhakaran</p></list-item><list-item><p id="P39"><bold>Writing - original draft:</bold> Inês G. Gonçalves</p></list-item><list-item><p id="P40"><bold>Writing - review &amp; editing:</bold> Inês G. Gonçalves, David A. Hormuth II, Sandhya Prabhakaran, José Manuel García-Aznar</p></list-item><list-item><p id="P41"><bold>Funding acquisition:</bold> José Manuel García-Aznar</p></list-item></list></p></fn><fn id="FN2" fn-type="conflict"><p id="P42"><bold>Competing interests:</bold> The author declare no competing interests.</p></fn></fn-group><ref-list><ref id="R1"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alarie</surname><given-names>Stéphane</given-names></name><etal/></person-group><article-title>Two decades of blackbox optimization applications</article-title><source>EURO j comput optim</source><year>2021</year><volume>9</volume><elocation-id>100011</elocation-id></element-citation></ref><ref id="R2"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Banga</surname><given-names>Julio R</given-names></name></person-group><article-title>Optimization in computational systems biology</article-title><source>BMC Systems Biology</source><year>2008</year><volume>2</volume><issue>1</issue><pub-id pub-id-type="pmcid">PMC2435524</pub-id><pub-id pub-id-type="pmid">18507829</pub-id><pub-id pub-id-type="doi">10.1186/1752-0509-2-47</pub-id></element-citation></ref><ref id="R3"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bergman</surname><given-names>Daniel</given-names></name><etal/></person-group><article-title>PhysiPKPD: A pharmacokinetics and pharmacodynamics module for PhysiCell</article-title><source>Gigabyte</source><year>2022</year><fpage>1</fpage><lpage>11</lpage><comment>2022</comment><pub-id pub-id-type="doi">10.46471/gigabyte.72</pub-id></element-citation></ref><ref id="R4"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Clermont</surname><given-names>Gilles</given-names></name><name><surname>Zenker</surname><given-names>Sven</given-names></name></person-group><article-title>The inverse problem in mathematical biology</article-title><source>Mathematical Biosciences</source><year>2015</year><volume>260</volume><fpage>11</fpage><lpage>15</lpage><pub-id pub-id-type="pmcid">PMC6657349</pub-id><pub-id pub-id-type="pmid">25445734</pub-id><pub-id pub-id-type="doi">10.1016/j.mbs.2014.09.001</pub-id></element-citation></ref><ref id="R5"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Colvin</surname><given-names>Samuel</given-names></name></person-group><source>Samuelcolvin/pydantic: Data Parsing and validation using python type hints</source><comment>(n.d.). URL: <ext-link ext-link-type="uri" xlink:href="https://github.com/samuelcolvin/pydantic">https://github.com/samuelcolvin/pydantic</ext-link></comment></element-citation></ref><ref id="R6"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Duggan</surname><given-names>Ben</given-names></name><name><surname>Metzcar</surname><given-names>John</given-names></name><name><surname>Macklin</surname><given-names>Paul</given-names></name></person-group><article-title>DAPT: A package enabling distributed automated parameter testing</article-title><source>Gigabyte</source><year>2021</year><fpage>1</fpage><lpage>10</lpage><comment>2021</comment><pub-id pub-id-type="pmcid">PMC9631979</pub-id><pub-id pub-id-type="pmid">36824329</pub-id><pub-id pub-id-type="doi">10.46471/gigabyte.22</pub-id></element-citation></ref><ref id="R7"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ghaffarizadeh</surname><given-names>Ahmadreza</given-names></name><etal/></person-group><chapter-title>PhysiCell: An open source physics-based cell simulator for 3-D multicellular systems</chapter-title><source>PLOS Computational Biology</source><year>2018</year><volume>14</volume><issue>2</issue><person-group person-group-type="editor"><name><surname>Poisot</surname><given-names>Timothée</given-names></name></person-group><elocation-id>e1005991</elocation-id><comment>ISSN: 1553-7358</comment><pub-id pub-id-type="pmcid">PMC5841829</pub-id><pub-id pub-id-type="pmid">29474446</pub-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1005991</pub-id></element-citation></ref><ref id="R8"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gonçalves</surname><given-names>Inês G</given-names></name><name><surname>Garcia-Aznar</surname><given-names>Jose Manuel</given-names></name></person-group><article-title>Extracellular matrix density regulates the formation of tumour spheroids through cell migration</article-title><source>PLoS computational biology</source><year>2021</year><volume>17</volume><issue>2</issue><elocation-id>e1008764</elocation-id><pub-id pub-id-type="pmcid">PMC7968691</pub-id><pub-id pub-id-type="pmid">33635856</pub-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1008764</pub-id></element-citation></ref><ref id="R9"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hasenauer</surname><given-names>Jan</given-names></name><etal/></person-group><article-title>Data-Driven Modelling of Biological Multi-Scale Processes</article-title><source>Journal of Coupled Systems and Multiscale Dynamics</source><year>2015</year><volume>3</volume><issue>2</issue><fpage>101</fpage><lpage>121</lpage><pub-id pub-id-type="doi">10.1166/jcsmd.2015.1069</pub-id></element-citation></ref><ref id="R10"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Heiland</surname><given-names>Randy</given-names></name><etal/></person-group><article-title>xml2jupyter: Mapping parameters between XML and Jupyter widgets</article-title><source>Journal of Open Source Software</source><year>2019</year><volume>4</volume><issue>39</issue><elocation-id>1408</elocation-id><comment>ISSN: 2475-9066</comment><pub-id pub-id-type="pmcid">PMC6656392</pub-id><pub-id pub-id-type="pmid">31342010</pub-id><pub-id pub-id-type="doi">10.21105/joss.01408</pub-id></element-citation></ref><ref id="R11"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kazerouni</surname><given-names>Anum S</given-names></name><etal/></person-group><article-title>Integrating Quantitative Assays with Biologically Based Mathematical Modeling for Predictive Oncology</article-title><source>iScience</source><year>2020</year><volume>23</volume><issue>12</issue><elocation-id>101807</elocation-id><comment>ISSN: 2589-0042</comment><pub-id pub-id-type="pmcid">PMC7704401</pub-id><pub-id pub-id-type="pmid">33299976</pub-id><pub-id pub-id-type="doi">10.1016/j.isci.2020.101807</pub-id></element-citation></ref><ref id="R12"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lei</surname><given-names>Bowen</given-names></name><etal/></person-group><article-title>Bayesian optimization with adaptive surrogate models for automated experimental design</article-title><source>Npj Computational Materials</source><year>2021</year><volume>7</volume><issue>1</issue><fpage>194</fpage></element-citation></ref><ref id="R13"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Letort</surname><given-names>Gaelle</given-names></name><etal/></person-group><chapter-title>PhysiBoSS: a multi-scale agent-based modelling framework integrating physical dimension and cell signalling</chapter-title><person-group person-group-type="editor"><name><surname>Wren</surname><given-names>Jonathan</given-names></name></person-group><source>Bioinformatics</source><year>2018</year><volume>35</volume><issue>7</issue><fpage>1188</fpage><lpage>1196</lpage><pub-id pub-id-type="pmcid">PMC6449758</pub-id><pub-id pub-id-type="pmid">30169736</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/bty766</pub-id></element-citation></ref><ref id="R14"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lintusaari</surname><given-names>Jarno</given-names></name><etal/></person-group><article-title>ELFI: Engine for Likelihood-Free Inference</article-title><source>Journal of Machine Learning Research</source><year>2018</year><volume>19</volume><issue>16</issue><fpage>1</fpage><lpage>7</lpage><comment>URL: <ext-link ext-link-type="uri" xlink:href="http://jmlr.org/papers/v19/17-374.html">http://jmlr.org/papers/v19/17-374.html</ext-link></comment></element-citation></ref><ref id="R15"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Merino-Casallo</surname><given-names>Francisco</given-names></name><etal/></person-group><article-title>Integration of in vitro and in silico models using Bayesian optimization with an application to stochastic modeling of mesenchymal 3D cell migration</article-title><source>Frontiers in physiology</source><year>2018</year><volume>9</volume><elocation-id>1246</elocation-id><pub-id pub-id-type="pmcid">PMC6142046</pub-id><pub-id pub-id-type="pmid">30271351</pub-id><pub-id pub-id-type="doi">10.3389/fphys.2018.01246</pub-id></element-citation></ref><ref id="R16"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Metzcar</surname><given-names>John</given-names></name><etal/></person-group><article-title>A Review of Cell-Based Computational Modeling in Cancer Biology</article-title><source>JCO Clinical Cancer Informatics</source><year>2019</year><volume>3</volume><fpage>1</fpage><lpage>13</lpage><pub-id pub-id-type="pmcid">PMC6584763</pub-id><pub-id pub-id-type="pmid">30715927</pub-id><pub-id pub-id-type="doi">10.1200/CCI.18.00069</pub-id></element-citation></ref><ref id="R17"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Movilla</surname><given-names>Nieves</given-names></name><etal/></person-group><article-title>A novel integrated experimental and computational approach to unravel fibroblast motility in response to chemical gradients in 3D collagen matrices</article-title><source>Integrative Biology</source><year>2023</year><pub-id pub-id-type="pmid">36756930</pub-id></element-citation></ref><ref id="R18"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ozik</surname><given-names>Jonathan</given-names></name><etal/></person-group><article-title>High-throughput cancer hypothesis testing with an integrated PhysiCell-EMEWS workflow</article-title><source>BMC Bioinformatics</source><year>2018</year><volume>19</volume><fpage>S18</fpage><pub-id pub-id-type="pmcid">PMC6302449</pub-id><pub-id pub-id-type="pmid">30577742</pub-id><pub-id pub-id-type="doi">10.1186/s12859-018-2510-x</pub-id></element-citation></ref><ref id="R19"><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schmerler</surname><given-names>Steve</given-names></name></person-group><source>elcorto/psweep: 0.9.0. Version 0.9.0</source><year>2022</year><pub-id pub-id-type="doi">10.5281/zenodo.7076330</pub-id></element-citation></ref><ref id="R20"><element-citation publication-type="web"><source>Xml.etree.ElementTree - the elementtree XML API</source><comment>(n.d.). URL: <ext-link ext-link-type="uri" xlink:href="https://docs.python.org/3/library/xml.etree.elementtree.html">https://docs.python.org/3/library/xml.etree.elementtree.html</ext-link></comment></element-citation></ref></ref-list></back><floats-group><fig id="F1" position="float"><label>Figure 1</label><caption><title>Model and optimization results for the logistic growth example.</title><p>(a) Growth curves obtained for different parameter sets (carrying capacity, <italic>K</italic>, and proliferation rate, <italic>r</italic> (b) Optimization results after the completion of the first level of the multilevel optimization algorithm. The heatmap shows the difference, as given by the summed squared error, between the target data and the data produced by each cell’s input parameters. (c) Optimization results after 7 levels of the multilevel optimization algorithm. Results converged to the parameters that originated the target data.</p></caption><graphic xlink:href="EMS157330-f001"/></fig><fig id="F2" position="float"><label>Figure 2</label><caption><title>Model and optimization results for the chemotaxis example.</title><p>(a) Initial model configuration design. Cells (represented as gre circles) were placed close to a domain wall and an oxygen source (represented by the blue arrows) was simulated on the opposite wall, creating a chemotactic gradient that cells could follow. This gradient is illustrated by the colour gradient shown in the figure. (b) Expected model results for cells with different migration bias values. High migration bias populations were expected to migrate in a deterministic manner and follow the oxygen gradient, crossing the domain and arriving at the opposite wall, as shown by their trajectories, shown as grey dashed lines. On the other hand, cells with low migration bias were expected to move randomly and, thus, present low net displacement values. (c) Optimization results after 4 levels of the multilevel optimization algorithm. Results converged to the parameters that originated the target data. The colormap was updated for each level, describing the minimum and maximum error values at the current level.</p></caption><graphic xlink:href="EMS157330-f002"/></fig><table-wrap id="T1" position="float" orientation="portrait"><label>Table 1</label><caption><title>Parameter values used in the multilevel optimization examples.</title></caption><table frame="hsides" rules="groups"><thead><tr><th valign="top" align="left">Example</th><th valign="top" align="left">Initial point</th><th valign="top" align="left">Points</th><th valign="top" align="left">%</th><th valign="top" align="left">Levels</th><th valign="top" align="left">Estimated point</th><th valign="top" align="left">Target point</th></tr></thead><tbody><tr><td valign="top" align="left">Logistic growth</td><td valign="top" align="left">(0.15,1000.0)</td><td valign="top" align="left">8</td><td valign="top" align="left">50 %</td><td valign="top" align="left">7</td><td valign="top" align="left">(0.10, 994.7)</td><td valign="top" align="left">(0.10,1000.0)</td></tr><tr><td valign="top" align="left">Chemotaxis</td><td valign="top" align="left">(2.5, 0.7)</td><td valign="top" align="left">5</td><td valign="top" align="left">30 %</td><td valign="top" align="left">4</td><td valign="top" align="left">(1.7, 0.8)</td><td valign="top" align="left">(2.0, 0.9)</td></tr></tbody></table></table-wrap></floats-group></article>