<!DOCTYPE article
 PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">
<article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="preprint"><?all-math-mml yes?><?use-mml?><?origin ukpmcpa?><front><journal-meta><journal-id journal-id-type="nlm-ta">bioRxiv</journal-id><journal-title-group><journal-title>bioRxiv : the preprint server for biology</journal-title></journal-title-group><issn pub-type="epub">2692-8205</issn></journal-meta><article-meta><article-id pub-id-type="manuscript">EMS199772</article-id><article-id pub-id-type="doi">10.1101/2024.10.23.619857</article-id><article-id pub-id-type="archive">PPR932354</article-id><article-version-alternatives><article-version article-version-type="status">preprint</article-version><article-version article-version-type="number">1</article-version></article-version-alternatives><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>Oatk: a de novo assembly tool for complex plant organelle genomes</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Zhou</surname><given-names>Chenxi</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><name><surname>Brown</surname><given-names>Max</given-names></name><xref ref-type="aff" rid="A2">2</xref><xref ref-type="aff" rid="A3">3</xref></contrib><contrib contrib-type="author"><name><surname>Blaxter</surname><given-names>Mark</given-names></name><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><collab>The Darwin Tree of Life Project Consortium</collab><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><name><surname>McCarthy</surname><given-names>Shane A.</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><name><surname>Durbin</surname><given-names>Richard</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A2">2</xref><xref ref-type="corresp" rid="CR1">*</xref></contrib></contrib-group><aff id="A1"><label>1</label>Department of Genetics, <institution-wrap><institution-id institution-id-type="ror">https://ror.org/013meh722</institution-id><institution>University of Cambridge</institution></institution-wrap>, <addr-line>Downing Street</addr-line>, <city>Cambridge</city>, <postal-code>CB2 3EH</postal-code>, <country country="GB">UK</country></aff><aff id="A2"><label>2</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/05cy4wa09</institution-id><institution>Wellcome Sanger Institute</institution></institution-wrap>, <addr-line>Wellcome Genome Campus</addr-line>, Hinxton, <city>Cambridge</city>, <postal-code>CB10 1SA</postal-code>, <country country="GB">UK</country></aff><aff id="A3"><label>3</label>Faculty of Science and Engineering, <institution-wrap><institution-id institution-id-type="ror">https://ror.org/0009t4v78</institution-id><institution>Anglia Ruskin University</institution></institution-wrap>, <addr-line>East Road</addr-line>, <city>Cambridge</city>, <postal-code>CB1 1PT</postal-code>, <country country="GB">UK</country></aff><author-notes><corresp id="CR1"><label>*</label>Correspondence: <email>rd109@cam.ac.uk</email>
</corresp></author-notes><pub-date pub-type="nihms-submitted"><day>02</day><month>11</month><year>2024</year></pub-date><pub-date pub-type="preprint"><day>28</day><month>10</month><year>2024</year></pub-date><permissions><ali:free_to_read/><license><ali:license_ref>https://creativecommons.org/licenses/by/4.0/</ali:license_ref><license-p>This work is licensed under a <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0 International license</ext-link>.</license-p></license></permissions><abstract><p id="P1">Plant organelle genomes, particularly the large mitochondrial genomes with intricate repetitive structures, present significant challenges for assembly. The advent of long-read sequencing technologies provides a transformative opportunity to generate complete genomes, but problems of resolving alternative structures remain. Here we introduce a novel tool for plant organelle genome assembly from high-accuracy long reads. Our method employs a <italic>k</italic>-mer based assembler for rapid assembly graph construction, integrates a profile HMM gene database for robust organelle sequence annotation, and leverages a new search method to find the best supported path through the assembly graph. We describe high-quality organelle assemblies for 195 plant species and demonstrate improvements over other methods. The assembled genomes provide multiple insights into structural complexity, heteroplasmy, and DNA exchange between organelles.</p></abstract></article-meta></front><body><sec id="S1" sec-type="intro"><title>Introduction</title><p id="P2">Plastids and mitochondria are integral components of plant cells, governing photosynthesis and respiration, two fundamental physiological processes vital for plant growth and development. They both possess genomes of endosymbiotic origin that have undergone significant reduction and restructuring over evolutionary time<sup><xref ref-type="bibr" rid="R1">1</xref></sup>. This includes gene losses, horizontal gene transfers<sup><xref ref-type="bibr" rid="R1">1</xref></sup>, intracellular gene transfers<sup><xref ref-type="bibr" rid="R2">2</xref></sup>, and inter- and intramolecular recombination<sup><xref ref-type="bibr" rid="R3">3</xref></sup>, reflecting a complex evolutionary process shaping their current genomic structure and function. Plastid genomes (plastomes) of land plants are typically 120-160 kb in size and form a highly conserved circular, quadripartite structure, with a large single-copy (LSC) region and a small single-copy (SSC) region separated by two identical (or nearly identical) inverted repeats (IRs)<sup><xref ref-type="bibr" rid="R4">4</xref></sup>. In contrast, plant mitochondrial genomes (mitogenomes) demonstrate more extensive size variability, spanning a 200-fold range from tens of kilobases to over 10 megabases<sup><xref ref-type="bibr" rid="R5">5</xref></sup>. They can exist in either circular or linear forms, often also contain long exact repeats, and may consist of multiple molecular components, highlighting the diversity and complexity of plant mitogenome architecture<sup><xref ref-type="bibr" rid="R6">6</xref></sup>. Beyond their direct importance in plant physiology, organelle genomes provide valuable insights into genetic diversity and evolutionary relationships among plant species. Organelle DNA markers are widely employed in phylogenetic and evolutionary analyses and DNA barcoding initiatives to enhance our understanding of plant biodiversity and taxonomy<sup><xref ref-type="bibr" rid="R7">7</xref></sup>.</p><p id="P3">Organelle genomes have been sequenced using various approaches, starting from Sanger sequencing using primer walking<sup><xref ref-type="bibr" rid="R8">8</xref></sup>, to sequencing from purified organelle DNA<sup><xref ref-type="bibr" rid="R9">9</xref></sup>, and sequencing from whole-cell DNA<sup><xref ref-type="bibr" rid="R7">7</xref></sup>. While the first two approaches are labour-intensive, costly, and sometimes species-specific, whole genome sequencing (WGS) provides a more efficient, robust and cost-effective way to reconstruct plant organelle genomes. However the long exact repeats in almost all plant organelle genomes, along with other issues discussed below, create severe difficulties for standard genome assembly tools. For this reason there has been a requirement for dedicated software. Most of the contemporary tools for organelle genome assemblies are tailored for WGS data, such as MITObim<sup><xref ref-type="bibr" rid="R10">10</xref></sup>, IOGA<sup><xref ref-type="bibr" rid="R11">11</xref></sup>, NOVOPlasty<sup><xref ref-type="bibr" rid="R12">12</xref></sup>, Organelle PBA<sup><xref ref-type="bibr" rid="R13">13</xref></sup>, and more recently GetOrganelle<sup><xref ref-type="bibr" rid="R14">14</xref></sup>, GSAT<sup><xref ref-type="bibr" rid="R15">15</xref></sup>, MitoHiFi<sup><xref ref-type="bibr" rid="R16">16</xref></sup> and PMAT<sup><xref ref-type="bibr" rid="R17">17</xref></sup>. While the specific implementations may vary, two fundamental components persist in organelle genome assembly from WGS data: (1) distinguishing between organelle-derived and nuclear-derived sequences (potentially from old organelle genome integrations), and (2) assembling reads into genome sequences. The sequence differentiation usually involves the use of a seed database, which may consist of complete organelle reference genomes or sequence fragments derived from conserved genomic regions<sup><xref ref-type="bibr" rid="R10">10</xref>,<xref ref-type="bibr" rid="R11">11</xref>,<xref ref-type="bibr" rid="R12">12</xref>,<xref ref-type="bibr" rid="R13">13</xref>,<xref ref-type="bibr" rid="R14">14</xref>,<xref ref-type="bibr" rid="R17">17</xref></sup>. Raw reads or assembled sequences are classified as organelle sequences if they overlap with these seed sequences. Given the potential divergence between seed sequences and the target genome, an ‘extension’ step is often necessary. This step extends the sequences from the conserved regions with seed hits into neighbouring divergent regions without seed hits by using sequence overlaps. The read assembly often starts with tools originally designed for nuclear genome assemblies, such as SOAPdenovo2<sup><xref ref-type="bibr" rid="R18">18</xref></sup> and SPAdes<sup><xref ref-type="bibr" rid="R19">19</xref></sup> used by MITObim, IOGA, GetOrganelle and GSAT for assembling short reads, and the Newbler assembler employed by PMAT for assembling long reads.</p><p id="P4">Despite the plethora of tools available for organelle genome assemblies, each has inherent limitations. First, most current tools rely on computationally intensive genome assemblers. Although strategies such as assembling only seeded organelle reads or only a limited subset of the WGS data are employed, the computational challenges remain substantial. Second, the ‘seed-extend’ strategy can be problematic, particularly in assembling mitogenomes. Mitogenomes exhibit greater diversity compared to plastomes, posing challenges in creating a universal seed database that accurately represents a wide range of species. Notably, most existing tools, except for GSAT and PMAT, are primarily designed for plastomes and have limited application in mitogenome assembly, tested only on a restricted number of species. Third, many existing tools are optimised for short reads and lack compatibility with long reads, thereby missing a powerful resource for spanning repeats to elucidate complex genome structures. This limitation becomes more pronounced in light of the widespread adoption of highly accurate Pacific Biosciences circular consensus sequence (CCS or HiFi) in genome assemblies<sup><xref ref-type="bibr" rid="R20">20</xref>,<xref ref-type="bibr" rid="R21">21</xref></sup>. Several tools have explored the use of long reads, but none fully capitalise on the potential of PacBio HiFi reads: Organelle PBA targets long noisy PacBio CLR reads, GSAT utilises long reads only for resolving assembly graphs constructed from short reads, MitoHiFi is only aimed at simple circular mitochondria, and PMAT employs the Newbler assembler, which is slow and less suitable for high coverage data.</p><p id="P5">Here, we present Oatk to address these challenges. Oatk is a <italic>de novo</italic> organelle genome assembly toolkit for assembling plastid and mitochondrial genomes from WGS data of high-accuracy long reads, specifically the reads used by many recent genome sequencing projects<sup><xref ref-type="bibr" rid="R22">22</xref>,<xref ref-type="bibr" rid="R23">23</xref>,<xref ref-type="bibr" rid="R24">24</xref></sup>. It features a modular design, high speed, and user-friendly interface. Specifically, (1) we have developed a highly efficient genome assembler based on a sparse <italic>k</italic>-mer graph to mitigate the intensive computational demands for read assembly; (2) we have constructed hidden Markov model (HMM) profile gene databases to cover the full breadth of land plant organelle genomes and employ them instead of seed sequences for organelle sequence identification, achieving more accurate classification, particularly for mitogenomes; and (3) we have implemented a sophisticated graph resolution algorithm to generate primary assemblies, taking into account the graph structure and repeat-spanning sequence copy numbers. While the three modules can operate collectively through a wrapper program for organelle genome assemblies, each module can also function independently as a standalone command-line tool, offering enhanced flexibility: the genome assembler can produce assemblies for nuclear genomes comparable to MBG<sup><xref ref-type="bibr" rid="R25">25</xref></sup>; the gene database facilitates gene annotation akin to MitoZ<sup><xref ref-type="bibr" rid="R26">26</xref></sup>; and the graph resolution module can be utilised in a manner similar to GetOrganelle. We used Oatk to generate organelle genome assemblies for 195 species and compared its performance in read assembly with MBG and PMAT, and in graph resolution with GetOrganelle. Our findings suggest that Oatk generally outperforms the other tools across various metrics. Furthermore, we conducted a survey of the characteristics of the assembled organelle genomes and observed substantial genome diversity both within individual species and between species, for both plastid and mitochondrial genomes.</p></sec><sec id="S2" sec-type="results"><title>Results</title><sec id="S3"><title>Oatk overview</title><p id="P6">Oatk consists of three components: (1) <italic>syncasm</italic> for genome assembly using a sparse de Bruijn graph, (2) <italic>hmmannot</italic> for sequence annotation based on a profile HMM gene database, and (3) <italic>pathfinder</italic> for graph resolution leveraging the graph structure and sequence coverage. Below we provide an overview of the key steps and concepts, with details given in the <xref ref-type="sec" rid="S9">Methods</xref>.</p><p id="P7">For genome assembly, closed syncmers<sup><xref ref-type="bibr" rid="R27">27</xref></sup> with default <italic>k</italic> = 1001, <italic>s</italic> = 31 are first collected from the HiFi sequence data (<xref ref-type="fig" rid="F1">Fig. 1a</xref>) and used to build a sparse de Bruijn graph<sup><xref ref-type="bibr" rid="R28">28</xref></sup> (<xref ref-type="fig" rid="F1">Fig. 1b</xref>). Next, the HiFi reads are mapped to the graph so as to identify low-frequency syncmers derived from sequencing errors and correct them. The graph is then reconstructed from the error-corrected syncmers, followed by graph cleaning and disentangling, and generation of a final assembly graph of unitigs (<xref ref-type="fig" rid="F1">Fig. 1c</xref>). This unitig graph is a general assembly graph including the full nuclear genome. For organelle assembly we next apply a k-mer coverage filter removing unitigs below five times the estimated nuclear haploid coverage depth to remove almost all nuclear sequence, including all but the most recent nuclear mitochondrial or nuclear plastid integration sequences (NUMTs/NUPTs) because <italic>k</italic> is large.</p><p id="P8">For sequence annotation, each unitig sequence from the assembly graph is searched against a new land plants organelle gene database, comprising 130 plastid and 81 mitochondrial HMM gene profiles (<xref ref-type="supplementary-material" rid="SD2">Supplementary Table S1, Supplementary Table S2</xref>). The resulting table of gene hits (<xref ref-type="fig" rid="F1">Fig. 1d</xref>) is used to classify each remaining graph component into designated organelle types or non-organelle units (<xref ref-type="fig" rid="F1">Fig. 1e</xref>).</p><p id="P9">Finally, graph resolution is performed on each organellar graph component to find an optimal path representing a circular or linear form sequence regarded as the primary organelle genome assembly (<xref ref-type="fig" rid="F1">Fig. 1f</xref>). This process considers the graph structure and sequence coverage, involving two major steps: estimating the copy number of each join (edge in the graph) between unitigs (vertices in the graph), and an exhaustive search through graph paths so as to maximise consistency with the edge copy number while covering all sequence. We note that in many cases there is evidence for alternate structures generated by recombination between repeats. We provide a minimal set of best supported structures that represents all sequence in the graph.</p></sec><sec id="S4"><title>Assembling organelle genomes for 195 plant species</title><p id="P10">We generated organelle genome assemblies for 195 land plants sequenced by the Tree of Life programme at the Sanger Institute, mostly from the Darwin Tree of Life (DToL) project<sup><xref ref-type="bibr" rid="R24">24</xref></sup>, including 24 monocots, 154 eudicots, 16 mosses and one liverwort (<xref ref-type="supplementary-material" rid="SD2">Supplementary Table S3</xref>). In addition to Oatk, we ran MBG<sup><xref ref-type="bibr" rid="R25">25</xref></sup> and PMAT<sup><xref ref-type="bibr" rid="R17">17</xref></sup> for genome assembly construction to compare with the Oatk genome assembler <italic>syncasm</italic>. We also ran GetOrganelle<sup><xref ref-type="bibr" rid="R14">14</xref></sup> for graph resolution to compare with the Oatk graph resolver <italic>pathfinder</italic> (see <xref ref-type="sec" rid="S9">Methods</xref>). The results are summarised in <xref rid="T1" ref-type="table">Table 1</xref>. Additional details can be found in <xref ref-type="supplementary-material" rid="SD2">Supplementary Table S4</xref>.</p><p id="P11">Oatk successfully assembled both plastome and mitogenome for all 195 species. The assembly graphs for these species are presented in <xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S1</xref> for plastomes and in <xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S2</xref> for mitogenomes. Oatk generated single-circular plastomes for 192 out of the 195 species. The three non-circular genomes belong to <italic>Hibiscus richardsonii, Hibiscus tridactylites</italic>, and <italic>Hibiscus verdcourtii</italic>, the only three Hibiscus species in the dataset. Notably, all three genome assemblies break at the same locus, suggesting either genuine linear structures or issues with the sequencing technique (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S3</xref>). For mitogenomes, Oatk generated 132 single-circular, 29 multi-circular, and 34 non-circular assemblies. Here we classified an assembly as multi-circular if it consists of multiple circular components, and as non-circular if it contains at least one linear component, regardless of whether it has a single component or multiple components.</p><p id="P12">The results for assembly graph construction using <italic>syncasm</italic> and MBG are comparable. Specifically, the outcomes of the Oatk and the MBG-<italic>pathfinder</italic> combination are similar for both plastome and mitogenome assemblies. GetOrganelle consistently performed better with <italic>syncasm</italic> graphs than with MBG graphs, indicating that <italic>syncasm</italic> outperforms MBG in certain cases. This is anticipated, as <italic>syncasm</italic> has been optimised for organelle genome assembly, particularly for disentangling mixed organelle genome assembly graphs resulting from shared sequences (see <xref ref-type="sec" rid="S9">Methods</xref>, <xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S4</xref>). While <italic>syncasm</italic> and MBG successfully generated genome assemblies for all species, PMAT failed for 32 species due to either runtime errors or reaching the 24-hour wall time limit. PMAT also shows a high error rate in organelle sequence classification. Out of the 163 species successfully assembled, we observed misclassifications in 147 species (<xref ref-type="supplementary-material" rid="SD2">Supplementary Table S5</xref>). This is likely because PMAT was initially designed for assembling mitogenomes. We therefore disregarded the classification results of PMAT and used only the assembly graphs as inputs to run <italic>pathfinder</italic> and GetOrganelle. Regarding speed performance, <italic>syncasm</italic> is slightly faster than MBG on average but has higher memory requirements. Both <italic>syncasm</italic> and MBG are significantly faster than PMAT, despite the extensive data downsampling for running PMAT (see <xref ref-type="sec" rid="S9">Methods</xref>, <xref ref-type="supplementary-material" rid="SD2">Supplementary Table S4</xref>).</p><p id="P13">For assembly graph resolution, <italic>pathfinder</italic> consistently outperforms GetOrganelle irrespective of organelle types and genome assemblers. While the performance difference is marginal for plastomes, it is notable for more complex mitogenomes. Misidentification of mitochondrial sequences is frequently observed with GetOrganelle, involving both the misidentification of plastid sequences as mitochondrial and mitochondrial sequences as non-organellar (<xref ref-type="supplementary-material" rid="SD2">Supplementary Table S4</xref>). For instance, GetOrganelle consistently misidentified the IR sequence on the plastomes of moss species as mitochondrial. This is probably because GetOrganelle uses conserved gene sequences as seeds for organelle sequence identification, which may not adequately represent certain species. GetOrganelle was generally faster than <italic>pathfinder</italic>; however the increased time is not a barrier to use of <italic>pathfinder</italic>. In most species, GetOrganelle completed within a few seconds, whereas <italic>pathfinder</italic> took up to a minute (<xref ref-type="supplementary-material" rid="SD2">Supplementary Table S4</xref>). It should be noted that, for <italic>pathfinder</italic>, the time for running <italic>hmmannot</italic> was included to ensure a fair comparison with GetOrganelle. <italic>Pathfinder</italic> alone typically completed within a second and successfully handled all assembly graphs that GetOrganelle failed to process (<xref rid="T1" ref-type="table">Table 1</xref>).</p></sec><sec id="S5"><title>The plastome structures</title><p id="P14">The majority (182/195) of the assembled plastomes represent a standard quadripartite LSC-IRa-SSC-IRb structure which is clearly revealed by the assembly graphs (<xref ref-type="fig" rid="F2">Fig. 2a-c</xref>). As described in <xref ref-type="sec" rid="S9">Methods</xref>, Oatk outputs these with the standard relative ordering of the large and small single copy regions (LSC and SSC respectively) as in the original <italic>Nicotiniana tabacum</italic> genome<sup><xref ref-type="bibr" rid="R8">8</xref></sup>. The other 13 species demonstrate a simple circular assembly graph structure due to the absence of IRs (<xref ref-type="fig" rid="F2">Fig. 2d</xref>), which all fall within the so-called “inverted repeats lacking clade” (IRLC)<sup><xref ref-type="bibr" rid="R29">29</xref></sup>. However, since these species are from several genera, their genome sizes vary considerably, ranging from 118 kb in <italic>Erodium maritimum</italic> to 149 kb in <italic>Lathyrus aphaca</italic>. We also observed a broad range of genome sizes for the species with quadripartite structures, from 122 kb in <italic>Lunularia cruciata</italic> to 233 kb in <italic>Schoenoplectus lacustris</italic> (<xref ref-type="fig" rid="F2">Fig. 2e</xref>). Among them, bryophytes have relatively small genomes: the 13 mosses from the class Bryopsida have sizes ranging from 123 kb to 126 kb; the three mosses from the class Sphagnopsida have slightly larger genomes of about 140 kb; the sole liverwort, <italic>Lunularia cruciata</italic>, possesses one of the smallest genomes among all assembled species, at approximately 122 kb, second only to <italic>Erodium maritimum</italic>. In comparison to bryophytes, grasses (Poales) generally have significantly larger genomes, with 13 out of the 19 assembled genomes larger than 180 kb, including 12 sedges (Cyperaceae) and one rush (Juncaceae). The six species smaller than 180 kb are three rushes (<italic>Juncus squarrosus</italic>: 163 kb, <italic>Juncus bufonius</italic>: 170 kb and <italic>Juncus effusus</italic>: 175 kb) and three grasses (Poaceae; <italic>Holcus mollis</italic>: 135 kb, <italic>Bromus sterilis</italic>: 137 kb and <italic>Phragmites australis</italic>: 138 kb). Most of the other species have genome sizes lying between those of bryophytes and Poales, with 136 out of 146 falling within the range of 145 kb to 170 kb, four below this range, and six above it. Specifically, <italic>Calluna vulgaris</italic> and <italic>Jasione montana</italic> have genomes exceeding 200 kb, and mistletoe <italic>Viscum album</italic> represents the smallest genome among all the angiosperms assembled in this study, approximately 129 kb. The expansion of genome size generally resulted in an increased number of protein-coding genes, while the number of unique genes remained relatively stable, with a mean of 80.6 and a standard deviation of 2.0. Bryophyte species, particularly three Sphagnopsida mosses, are exceptions, with 90, 91, and 91 unique genes respectively. In contrast, <italic>Viscum album</italic> lost almost all genes related to NADH dehydrogenase, resulting in a unique gene count of 70, which is well below the average (<xref ref-type="fig" rid="F2">Fig. 2e</xref>, <xref ref-type="supplementary-material" rid="SD2">Supplementary Table S6</xref>).</p><p id="P15">Despite having the same quadripartite structure, significant variations in the sizes of different components were observed across species (<xref ref-type="fig" rid="F2">Fig. 2a-c</xref>). Generally, genome sizes positively correlate with the sizes of the LSCs and IRs, but not with the SSCs. This is particularly evident in Poales, where we see notably expanded LSCs and IRs, accompanied by contracted SSCs (<xref ref-type="fig" rid="F2">Fig. 2e</xref>). The average SSC size of the 13 Poales species with genomes exceeding 180 kb is 9.8 kb. In contrast, the average SSC size of the 157 species with genomes smaller than 180 kb, excluding Poales, is 17.9 kb. While this may appear counterintuitive, further investigations suggest that in larger plastomes the SSCs are partially duplicated and transferred into IRs. This IR boundary shift phenomenon is not exclusive to Poales species; it was also observed in other species including <italic>Jasione montana, Calluna vulgaris, Vaccinium vitis-idaea, Inga laurina, Inga leiocalycina</italic>, and <italic>Inga oerstediana</italic>, all of which have plastomes exceeding 175 kb. Moreover, the shifting of IR boundaries in these species is asymmetrical with respect to the two IR/SSC boundaries. The boundary adjacent to the <italic>ndhF</italic> gene remains relatively stable, with duplication always occurring from the opposite end of the SSC (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S5</xref>). The proportion of the SSC that was duplicated varies across species. In extreme cases, the SSC contracted to such an extent that only the <italic>ndhF</italic> gene remains, as observed in <italic>Jasione montana</italic> (4.1 kb), <italic>Vaccinium vitis-idaea</italic> (3.1 kb), and <italic>Calluna vulgaris</italic> (2.8 kb, <xref ref-type="fig" rid="F2">Fig. 2c and Fig. 2g</xref>). The dynamics of plastomes extend beyond IR/SSC boundary shifts, encompassing a broad spectrum of phenomena. For example, in <italic>Berberis vulgaris</italic>, the IRs shift into the LSC, while in <italic>Luzula sylvatica</italic>, the IRs shift into both the LSC and SSC. In <italic>Hypericum pulchrum</italic> and <italic>Geranium rotundifolium</italic>, the LSC and SSC shift into the IRs, accompanied by intricate genome rearrangements, resulting in anomalous component sizes. In <italic>Viscum album</italic>, the SSC is highly contracted, leading to the loss of all genes related to NADH dehydrogenase (<xref ref-type="fig" rid="F2">Fig. 2e</xref>, <xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S6-Supplementary Figure S10</xref>).</p><p id="P16">In addition to the structural dynamics observed across different species, we also detected abundant heteroplasmy within individual species. From the point of view of the assembly graph, the single copy regions SSC and LSC can in principle be traversed in two distinct relative orientations, indicating that the plastome graph represents two distinct structural configurations (<xref ref-type="fig" rid="F1">Fig. 1f</xref>). It has long been reported that both forms can coexist within a single individual, a phenomenon that could be explained by flip-flop recombination between two IRs<sup><xref ref-type="bibr" rid="R30">30</xref>,<xref ref-type="bibr" rid="R31">31</xref></sup>. Recently, Wang and Lanfear <sup><xref ref-type="bibr" rid="R32">32</xref></sup> revisited this discovery using a method combining long-read mapping and statistical modelling and found that this type of heteroplasmy exists in most plants. Here we utilised assembly graphs to facilitate a more direct investigation of this topic. Since a read must map through the entire IR region in the graph to provide evidence for a specific form, we set the IR size limit to 20 kb taking into account the length restriction of PacBio HiFi reads, resulting in a selection of 23 species, including 18 bryophytes and five angiosperms. For each species, we mapped the HiFi reads to the individual assembly graph and count the number of reads supporting each form. For all species tested we see approximately the same number of reads supporting both forms (<xref ref-type="fig" rid="F2">Fig. 2f</xref>) with no significant deviation from a binomial distribution with probability 0.5 (<xref ref-type="supplementary-material" rid="SD2">Supplementary Table S7</xref>). This observation reaffirms previous findings that the two forms widely coexist in plants, with their ratio being close to 50/50 and is consistent with frequent intramolecular flip-flop recombination as a plausible explanation for this phenomenon. Besides chromosomal-scale structural variations, we also observed other types of heteroplasmy at smaller scales. <xref ref-type="fig" rid="F2">Figure 2c</xref> shows the assembly graph of <italic>Calluna vulgaris</italic> as an example. The IR region contains two nested small repeats, leading to a complex structure. By mapping the reads to this region, we identified multiple isoforms with varying molecule abundances (<xref ref-type="fig" rid="F2">Fig. 2h</xref>). Similar heteroplasmic structures were observed in several other assembled species (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S1, Supplementary Figure S11</xref>).</p></sec><sec id="S6"><title>The mitogenome structures</title><p id="P17">The assembled mitogenomes are much more variable than the plastomes, demonstrating remarkable diversity in size, structure, and gene content (<xref ref-type="fig" rid="F3">Fig. 3a-g</xref>, <xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S2</xref>). Genome sizes range from 103 kb to 2,731 kb, with the smallest genome observed in the moss <italic>Thuidium tamariscinum</italic> and the largest in the sedge <italic>Carex laevigata</italic>. A similar trend in genome sizes was observed in mitogenomes as in plastomes, with bryophytes having relatively small mitogenomes, Poales mitogenomes being notably larger on average, and other species falling between them. There is a positive correlation between gene number and mitogenome size in general (<xref ref-type="fig" rid="F3">Fig. 3g</xref>, <xref ref-type="supplementary-material" rid="SD2">Supplementary Table S8</xref>). Among the 195 mitogenomes analysed, 132 represent a single circular structure. These single circular mitogenomes exhibit various underlying structures, including simple ring structures, quadripartite structures with either an inverted or directed repeat (DR), and more complex structures involving multiple circular molecules linked by repeat sequences (<xref ref-type="fig" rid="F3">Fig. 3a-d</xref>). Twenty-nine of the assembled mitogenomes consist of multiple circular components (<xref ref-type="fig" rid="F3">Fig. 3e</xref>). Notably, the <italic>Galeopsis tetrahit</italic> mitogenome exemplifies this complexity, comprising 368.8 kb of sequence distributed across ten circular molecules, each containing protein-coding genes (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S12</xref>). The remaining 34 assembled mitogenomes are non-circular, comprising either a single linear component or multiple components, with at least one being linear. While some of these non-circular mitogenomes are probably the consequence of incomplete assembly, others can be verified through read mapping. For instance, the <italic>Alnus glutinosa</italic> mitogenome consists of two components: one circular and one linear, with the latter displaying an intriguing loop structure at each end (<xref ref-type="fig" rid="F3">Fig. 3f</xref>). Reads were found mapping through each direction of the bifurcation in the loop structure, with a smooth change in coverage, confirming the authenticity of this structure (<xref ref-type="fig" rid="F3">Fig. 3h</xref>). The loop structure is not unique to <italic>Alnus glutinosa</italic>; similar structures were observed in at least six other species assembled in this study (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S2</xref>).</p><p id="P18">Structural heteroplasmy was commonly observed in the assembled mitogenomes. The genome of <italic>Pseudognaphalium luteoalbum</italic> exhibits a standard plastid-like quadripartite structure with IRs (<xref ref-type="fig" rid="F3">Fig. 3b</xref>). Similar to observations in the plastome, this structure manifests in two coexisting forms, characterised by different orientations of the two single-copy sequences. The number of reads mapping across the IRs supporting the two forms are 299 and 301, respectively, suggesting unbiased interchange. We observed a similar phenomenon in the genome of <italic>Calluna vulgaris</italic>, which also represents a quadripartite structure but with DRs (<xref ref-type="fig" rid="F3">Fig. 3b</xref>). The number of reads supporting the two forms are 328 and 361, respectively. Unlike the IR-featured structure, in this scenario, the second form consists of two separate small circles, supported by 170 and 191 reads, respectively. We extended this analysis to all accessible bidirectionally bifurcated repeats across the assembled mitogenomes. Specifically, we examined each sequence on the assembly graphs and included it as a repeat in the analysis set if it meets the following criteria: (1) the sequence is no larger than 10 kb; (2) the sequence has two incoming edges and two outgoing edges; and (3) the size of each sequence associated with the four edges is at least 10 kb. The sequence size threshold was set to ensure the quality of read mapping. This process identified 165 repeats across 109 genomes. The read mapping results suggest that nearly all these repeats are associated with structural heteroplasmy, with many representing nearly balanced abundances (<xref ref-type="fig" rid="F3">Fig. 3i</xref>, <xref ref-type="supplementary-material" rid="SD2">Supplementary Table S9</xref>). The repeat-driven dynamics of local structures can extend globally, leading to diverse molecular forms involving various combinations of subgenomic regions. (<xref ref-type="fig" rid="F3">Fig. 3j</xref>). The coexistence of these superstructures and subgenomic structures has been noted previously, with one possible explanation being intramolecular recombination<sup><xref ref-type="bibr" rid="R6">6</xref></sup>.</p></sec><sec id="S7"><title>Sequence transfer between organelle genomes</title><p id="P19">We observed frequent sequence sharing between plastid and mitochondrial genomes within a species, reflecting historical transfer of DNA from one organelle to the other<sup><xref ref-type="bibr" rid="R34">34</xref></sup>. This usually led to a mixture of sequences from two organelle genomes in the same assembly graph forming a entangled structure. <xref ref-type="fig" rid="F4">Figure 4a</xref> demonstrates the genome assembly graph of the <italic>Alnus glutinosa</italic> as an example. It contains four identical shared sequences with sizes from 1,382 bp to 4,753 bp. The homologous sequence pair forms a bubble structure, differentiated by a few variants, including seven SNPs and three 4-7 bp small INDELs. For each species, we aligned the plastid and mitochondrial genomes to identify shared sequences. We set a minimum sequence size of 1 kb and a minimum sequence identity of 90% to eliminate noisy alignments. We identified 576 shared sequences totaling 1.57 Mb across 144 species, with individual shared sequence sizes ranging from 1 kb to 17.3 kb. Among them, 57 species contains more than 10 kb of shared sequences, with <italic>Carex laevigata</italic> having the most at 66.6 kb. This finding demonstrates the prevalence of sequence transfer between organelle genomes, although, notably, no shared sequences are found in any of the bryophyte species. No clear correlation between mitogenome size and the amount of shared sequences was observed (<xref ref-type="fig" rid="F4">Fig. 4b</xref>). For example, <italic>Erodium maritimum</italic> has a 307.7 kb mitogenome and 37.9 kb of shared sequences, whereas <italic>Juncus bufonius</italic> has a 993.7 kb mitogenome but only 3.4 kb of shared sequences. The majority of sequence transfers occurred from plastome into mitogenome, not the other way around. Out of the 1.57 Mb of shared sequences identified, 1.10 Mb were annotated as gene sequences, with 1.09 Mb (98.7%) specifically identified as plastid genes (<xref ref-type="supplementary-material" rid="SD2">Supplementary Table S10</xref>).</p><p id="P20">In terms of sequence similarity between paralogs, 287 sequences totalling 895.5 kb show greater than 98% identity, while 161 sequences totaling 223.2 kb show less than 95% identity. Although many paralogs represent high similarities, sequence identities are broadly distributed across the entire range from 90% to 100%, indicating that sequence transfer is a repeated, ongoing process (<xref ref-type="fig" rid="F4">Fig. 4c</xref>). This is supported by phylogenetic analysis of 64 paralogous sequence pairs annotated as the <italic>psaA</italic> gene - the most frequently annotated shared gene followed by <italic>psbB</italic> with 58 sequence pairs. The phylogenetic tree constructed from these 128 sequences accurately represents the clade structure and shows a stratification of shared sequences (<xref ref-type="fig" rid="F4">Fig. 4d</xref>). For many paralog pairs, two sequences were closely clustered together in the tree. Notably, sequences in 19 paralog pairs are mutually the nearest neighbour of each other and sequences in 33 paralog pairs are mutually within the three-nearest neighbours (<xref ref-type="supplementary-material" rid="SD2">Supplementary Table S11</xref>). Clades for some genera like <italic>Hypericum</italic> and <italic>Inga</italic> show separate clusters for plastid and mitochondrial sequences, suggesting that sequence transfer occurred before their speciation. In 50 out of the 64 paralog pairs, the mitochondrial sequences demonstrate greater distance to the node representing the most recent common ancestor (MRCA) compared to their plastid paralogs, such as observed in species <italic>Juncus squarrosus, Chamaenerion angustifolium</italic>, and <italic>Iris foetidissima</italic> (<xref ref-type="supplementary-material" rid="SD2">Supplementary Table S12</xref>). Statistical analysis using the Wilcoxon signed-rank test on all 64 paralog pairs indicates a significant difference in distances (<italic>p</italic>-value = 8.969e-06). This suggests that those sequences transferred into mitogenomes evolve faster than their counterparts in plastomes.</p></sec></sec><sec id="S8" sec-type="discussion"><title>Discussion</title><p id="P21">We developed Oatk for <italic>de novo</italic> assembly of plant organelle genomes using high-accuracy long reads and applied it to assemble 195 species spanning a broad range across the tree of life. Compared to other tools, Oatk produced complete assemblies for more species, particularly for mitogenomes. Oatk is distinguished from other tools by a highly efficient genome assembler utilising a sparse <italic>k</italic>-mer graph to reduce memory usage and accelerate graph construction. For <italic>k</italic>-mer selection, we use closed syncmers, which are intrinsically suitable for <italic>k</italic>-mer sparsification<sup><xref ref-type="bibr" rid="R27">27</xref></sup>. The sparsification factor is approximately (<italic>k</italic>−<italic>s</italic>+1)/2, where <italic>k</italic> and <italic>s</italic> are the <italic>k</italic>-mer and <italic>s</italic>-mer size respectively. With high-accuracy long reads, we can choose a large <italic>k</italic> and typically have <italic>k</italic> ≫ <italic>s</italic>. In this case, the average distance between adjacent <italic>k</italic>-mers is roughly <italic>k</italic>/2. For example, with <italic>k</italic> = 1,001 as used in this study, the data is compressed by a factor of about 500, thereby facilitating efficient assembly graph construction. Other techniques for <italic>k</italic>-mer sparsfication include the minimizer approach used in MBG<sup><xref ref-type="bibr" rid="R25">25</xref></sup> and the <italic>k</italic>-min-mer approach used in MDBG<sup><xref ref-type="bibr" rid="R28">28</xref></sup>. MBG features a syncmer-based implementation when integrated into Verkko<sup><xref ref-type="bibr" rid="R36">36</xref></sup>. The major difference between <italic>syncasm</italic> and the syncmer-based MBG probably lies in graph disentangling, with <italic>syncasm</italic> being better tailored for organelle genome assemblies.</p><p id="P22">Even though there are many well-designed genome assembly tools for HiFi data, such as hifiasm<sup><xref ref-type="bibr" rid="R37">37</xref></sup> and HiCanu<sup><xref ref-type="bibr" rid="R38">38</xref></sup>, they have not been effectively used for organelle genome assemblies. These assemblers are not optimized for extremely high coverage data, such as organelle genomes, where coverage can reach thousands or tens of thousands of times, leading to problems with sequence error correction. Additionally, the highly unbalanced data coverage between organelle genomes and nuclear genomes presents another challenge. Finally, these tools generally rely on string graphs, which suffer from inaccurate sequence coverage estimation - a critical factor for graph resolution in plant organelle genome assemblies. In contrast, <italic>k</italic>-mer based assembly graphs provide better sequence coverage estimates.</p><p id="P23">Another distinctive characteristic of Oatk is its use of a profile HMM gene database for organelle sequence identification, rather than relying on seed sequences. For a given gene, a profile HMM was constructed considering all related sequences available in the NCBI repository to ensure a broad species representation. This approach provides a more sensitive method for sequence identification, particularly useful for divergent mitogenomes. Oatk is not the first tool to use profile HMMs for genome annotations. They have been employed by MitoZ to identify target sequences in animal mitogenome assembly<sup><xref ref-type="bibr" rid="R26">26</xref></sup>, and by GeSeq as an essential component for protein and rRNA coding gene annotation in plant organelle genomes<sup><xref ref-type="bibr" rid="R39">39</xref></sup>. Although our focus has been on plant organelle genome assemblies, Oatk extends its utility to other species with the corresponding gene database. We have created HMM profile gene databases for various clades and developed a tool to facilitate the creation of gene databases given an NCBI taxonomy ID (<xref ref-type="sec" rid="S9">Methods</xref>). As an example, we applied Oatk to assemble complete mitogenomes for five animal species, including a mammal, a fish, a bird, a lizard and an insect (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S13</xref>). This demonstrates the broader applicability of Oatk beyond plants.</p><p id="P24">We observed extensive diversity in the assembled genomes, both within and across species. Intriguingly, analyses combining long reads and assembly graphs offered significant insights into the structural heteroplasmy of these genomes, highlighting their potential as powerful tools for understanding complex organelle genome structure. However, this poses an important question regarding the appropriate representation of plant organelle genomes. Traditionally, genomes are stored as linear sequences and labelled as circular if applicable, as required by public sequence repositories in the International Nucleotide Sequence Database Consortium (INSDC: NCBI GenBank, ENA and DDBJ), whereas the structural heteroplasmy information present in organelle genomes is overlooked. Some tools, such as GetOrganelle and GSAT, opt to output sequences of all possible conformations<sup><xref ref-type="bibr" rid="R14">14</xref>,<xref ref-type="bibr" rid="R15">15</xref></sup>, a practice Oatk could potentially adopt. However, this approach introduces additional challenges such as sequence redundancy and combinatorial complexity, especially in the case of complex mitogenomes where the number of conformations may escalate to an unmanageable level. We suggest that it might be more useful to provide a primary assembly that includes all sequences together with the assembly graph, allowing flexibility depending on the research question. This underscores the need for tools that can directly analyse assembly graphs, such as for gene annotation, where considering graph structure may change annotation outcomes.</p></sec><sec id="S9" sec-type="methods"><title>Methods</title><sec id="S10"><title>Collecting closed syncmers and representing reads by syncmer vectors</title><p id="P25">Closed syncmers<sup><xref ref-type="bibr" rid="R27">27</xref></sup> are parameterised by two positive integers <italic>s</italic> and <italic>k</italic> (<italic>s &lt; k</italic>) and a hash function <italic>φ</italic> of strings of length <italic>s</italic> that returns the same value for a string and its reverse complement. Given a string <italic>κ</italic> of length <italic>k</italic>, also called a <italic>k</italic>-mer, to determine if <italic>κ</italic> is a closed syncmer, <italic>φ</italic> is first used to compute the hashes for all <italic>s</italic>-long substrings (<italic>s</italic>-mers) from <italic>κ</italic>. The <italic>k</italic>-mer <italic>κ</italic> is a closed syncmer if and only if the hash of the first or last <italic>s</italic>-mer of <italic>κ</italic> is minimal, i.e. it is not larger than all other hashes from <italic>κ</italic>. We use <italic>k</italic> = 1,001 and <italic>s</italic> = 31 in this study.</p><p id="P26">Given a set <italic>R</italic> of HiFi sequencing reads, we build a <italic>k</italic>-mer table <italic>T</italic> containing all the distinct closed syncmers present at least once in the reads. Since most HiFi sequencing errors are homopolymer run length errors<sup><xref ref-type="bibr" rid="R20">20</xref></sup>, the reads are homopolymer compressed (hoco) before collecting syncmers, where homopolymer runs are collapsed into a single nucleotide. In <italic>T</italic>, each <italic>k</italic>-mer is assigned a unique sequential index. The table also maintains the the <italic>k</italic>-mer frequency (coverage), its hoco sequence, and the its full length consensus sequence. To generate the consensus sequence of a hoco <italic>k</italic>-mer, the homopolymer run lengths for each base of the <italic>k</italic>-mer are recorded during the <italic>k</italic>-mer table construction. The run length consensus of a base is computed as the closest integer to the average of all run lengths at its respective positions, mirroring the approach used in MBG<sup><xref ref-type="bibr" rid="R25">25</xref></sup>. We use a hash function, denoted by <italic>ψ</italic>, to map <italic>k</italic>-mer sequences to 64-bit integers for faster comparisons during the table construction. It is similar to <italic>φ</italic> for <italic>s</italic>-mers, excepting that while <italic>φ</italic> is designed to be a perfect hash function eliminating hash collisions, hash collisions for <italic>ψ</italic> are inevitable, owing to the values of <italic>s</italic> and <italic>k</italic>. The hash collisions are checked, and distinct table entries are created for <italic>k</italic>-mers with collided hashes. To allow for both directions of double-stranded DNA, <italic>ψ</italic> is applied to compute hash values for both the original <italic>k</italic>-mer and its reverse complement, and only the sequence with the smaller value constitutes a <italic>k</italic>-mer entry in the table.</p><p id="P27">Given the <italic>k</italic>-mer table <italic>T</italic>, each read in the read set <italic>R</italic> can be rewritten as a vector of syncmers accompanied by the respective positions on the read and orientations concerning the DNA strands. Let <italic>r</italic> ∈ <italic>R</italic> be a HiFi read harbouring <italic>m</italic> closed syncmers, denoted by <italic>κ</italic><sub>1</sub>,<italic>κ</italic><sub>2</sub>, …,<italic>κ<sub>m</sub></italic> sequentially. The respective positions of these syncmers on <italic>r</italic> are <italic>p</italic><sub>1</sub>, <italic>p</italic><sub>2</sub>, …, <italic>p<sub>m</sub></italic> in ascending order. Let <italic>π</italic> be a function mapping a <italic>k</italic>-mer to its index in the table. Let <italic>ρ</italic> be a function calculating the relative orientation of a <italic>k</italic>-mer compared to the corresponding entry in the table, with 0 being the same strand and 1 being the reverse complement. The read <italic>r</italic> can then be rewritten as <italic>ζ</italic> (<italic>r,T</italic>) = [⟨<italic>π</italic>(<italic>κ</italic><sub>1</sub>), <italic>p</italic><sub>1</sub>,<italic>ρ</italic>(<italic>κ</italic><sub>1</sub>)⟩, ⟨<italic>π</italic>(<italic>κ</italic><sub>2</sub>), <italic>p</italic><sub>2</sub>,<italic>ρ</italic>(<italic>κ</italic><sub>2</sub>)⟩, …, ⟨<italic>π</italic>(<italic>κ<sub>m</sub></italic>), <italic>p<sub>m</sub>,ρ</italic>(<italic>κ<sub>m</sub></italic>)⟩], where <italic>ζ</italic> is the transformation function. Let <italic>Z</italic> = <italic>ζ</italic> (<italic>R,T</italic>) be the transformed read set after applying <italic>ζ</italic> to each read in <italic>R</italic>. The inherent characteristic of assured overlap between consecutive closed syncmers<sup><xref ref-type="bibr" rid="R27">27</xref></sup>, i.e., <italic>p</italic><sub><italic>i</italic>+1</sub>− <italic>p<sub>i</sub></italic> &lt; <italic>k</italic> for all <italic>i</italic> ∈ [1,<italic>m</italic>), guarantees that the whole read apart from material before the first syncmer and after the last syncmer can be restored from its respective syncmer vector.</p></sec><sec id="S11"><title>Constructing a sparse <italic>k</italic>-mer graph from closed syncmers</title><p id="P28">The <italic>k</italic>-mer table <italic>T</italic> and the transformed read set <italic>Z</italic> are used to construct a sparse <italic>k</italic>-mer graph. For each <italic>k</italic>-mer entry <italic>κ</italic> in the table <italic>T</italic>, two vertices are established, one for the <italic>k</italic>-mer itself and the other for its reverse complement <inline-formula><mml:math id="M1"><mml:mover accent="true"><mml:mi>κ</mml:mi><mml:mo>¯</mml:mo></mml:mover></mml:math></inline-formula>; denote these as <italic>v</italic> and <inline-formula><mml:math id="M2"><mml:mover accent="true"><mml:mi>ν</mml:mi><mml:mo>¯</mml:mo></mml:mover></mml:math></inline-formula> respectively as an example. Vertices <italic>v</italic> and <inline-formula><mml:math id="M3"><mml:mover accent="true"><mml:mi>ν</mml:mi><mml:mo>¯</mml:mo></mml:mover></mml:math></inline-formula> are called complement vertices to each other, and <inline-formula><mml:math id="M4"><mml:mover accent="true"><mml:mover accent="true"><mml:mi>v</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mo stretchy="true">¯</mml:mo></mml:mover><mml:mspace width="0.2em"/><mml:mo>=</mml:mo><mml:mspace width="0.2em"/><mml:mi>v</mml:mi></mml:math></inline-formula> holds. Vertices maintain references to the <italic>k</italic>-mer indices, allowing for retrieval of <italic>k</italic>-mer information from the table, including details such as the sequence and the coverage. Two complement vertices refer to the same <italic>k</italic>-mer entry in the table. However, it is necessary to calculate the reverse complements when retrieving the underlying <italic>k</italic>-mer sequence and <italic>k</italic>-mer consensus sequence for the one not present in the table.</p><p id="P29">Directed edges are introduced between vertex pairs when the corresponding <italic>k</italic>-mers are adjacent on a transformed read. For any edge, a complement edge is also added. Consider the example of the read <italic>ζ</italic> (<italic>r,T</italic>). Let <italic>v</italic> and <italic>w</italic> be the associated vertices of the first two <italic>k</italic>-mers ⟨<italic>π</italic>(<italic>κ</italic><sub>1</sub>), <italic>p</italic><sub>1</sub>,<italic>ρ</italic>(<italic>κ</italic><sub>1</sub>)⟩ and ⟨<italic>π</italic>(<italic>κ</italic><sub>2</sub>), <italic>p</italic><sub>2</sub>,<italic>ρ</italic>(<italic>κ</italic><sub>2</sub>)⟩, respectively. Given the read <italic>r</italic>, a directed edge <italic>v</italic>→<italic>w</italic> will be added to the graph, pointing from vertex <italic>v</italic> to <italic>w</italic>, and simultaneously its complement edge <inline-formula><mml:math id="M5"><mml:mover accent="true"><mml:mi>w</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mspace width="0.2em"/><mml:mo>→</mml:mo><mml:mspace width="0.2em"/><mml:mover accent="true"><mml:mi>v</mml:mi><mml:mo>¯</mml:mo></mml:mover></mml:math></inline-formula> is added, where <inline-formula><mml:math id="M6"><mml:mover accent="true"><mml:mi>v</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mspace width="0.2em"/><mml:mo>=</mml:mo><mml:mo>&lt;</mml:mo><mml:mspace width="0.2em"/><mml:mi>π</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>κ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>,</mml:mo><mml:mspace width="0.2em"/><mml:msub><mml:mi>p</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo>−</mml:mo><mml:mi>ρ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>κ</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mspace width="0.2em"/><mml:mo>&gt;</mml:mo></mml:math></inline-formula> is the respective complement vertex of <italic>v</italic>. Edges record their coverage representing the count of positions on the transformed reads supporting the adjacency of the two vertices. In the example, the read <italic>ζ</italic> (<italic>r,T</italic>) contributes coverage of one unit to both the edges <italic>v</italic>→<italic>w</italic> and <inline-formula><mml:math id="M7"><mml:mover accent="true"><mml:mi>w</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mspace width="0.2em"/><mml:mo>→</mml:mo><mml:mspace width="0.2em"/><mml:mover accent="true"><mml:mi>v</mml:mi><mml:mo>¯</mml:mo></mml:mover></mml:math></inline-formula>. In addition, edges retain the length of the sequence overlap between the <italic>k</italic>-mers represented by the two vertices. For a given edge, the sequence overlap is determined by consolidating all overlap distances calculated from the positions of the two corresponding adjacent <italic>k</italic>-mers on the transformed reads. Typically, all the overlaps for a particular <italic>k</italic>-mer pair edge will be identical, and this uniform distance will be utilised to calculate the overlap length. However, in rare cases, it is possible to observe multiple overlap lengths due to complex repeat structures; when this happens the largest distance will be employed to calculate the overlap length. The complement edges <italic>v</italic>→<italic>w</italic> and <inline-formula><mml:math id="M8"><mml:mover accent="true"><mml:mi>w</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mspace width="0.2em"/><mml:mo>→</mml:mo><mml:mspace width="0.2em"/><mml:mover accent="true"><mml:mi>v</mml:mi><mml:mo>¯</mml:mo></mml:mover></mml:math></inline-formula> exhibit identical edge coverage and sequence overlap length by definition.</p><p id="P30">Let <italic>G</italic> = (<italic>V,E</italic>) be the <italic>k</italic>-mer graph, where <italic>V</italic> is the vertex set and <italic>E</italic> is the edge set. The above construction procedure guarantees <italic>G</italic> is Watson-Crick complete<sup><xref ref-type="bibr" rid="R40">40</xref></sup>: (i) <inline-formula><mml:math id="M9"><mml:mo>∀</mml:mo><mml:mi>v</mml:mi><mml:mspace width="0.2em"/><mml:mo>∈</mml:mo><mml:mspace width="0.2em"/><mml:mi>V</mml:mi><mml:mo>,</mml:mo><mml:mspace width="0.2em"/><mml:mover accent="true"><mml:mi>v</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mspace width="0.2em"/><mml:mo>∈</mml:mo><mml:mspace width="0.2em"/><mml:mi>V</mml:mi></mml:math></inline-formula>; and (ii) <inline-formula><mml:math id="M10"><mml:mo>∀</mml:mo><mml:mi>v</mml:mi><mml:mspace width="0.2em"/><mml:mo>→</mml:mo><mml:mspace width="0.2em"/><mml:mi>w</mml:mi><mml:mspace width="0.2em"/><mml:mo>∈</mml:mo><mml:mspace width="0.2em"/><mml:mi>E</mml:mi><mml:mo>,</mml:mo><mml:mover accent="true"><mml:mi>w</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mspace width="0.2em"/><mml:mo>→</mml:mo><mml:mspace width="0.2em"/><mml:mover accent="true"><mml:mi>v</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mspace width="0.2em"/><mml:mo>∈</mml:mo><mml:mspace width="0.2em"/><mml:mi>E</mml:mi></mml:math></inline-formula>, where <inline-formula><mml:math id="M11"><mml:mover accent="true"><mml:mi>v</mml:mi><mml:mo>¯</mml:mo></mml:mover></mml:math></inline-formula> and <inline-formula><mml:math id="M12"><mml:mover accent="true"><mml:mi>w</mml:mi><mml:mo>¯</mml:mo></mml:mover></mml:math></inline-formula> are the complement vertices of <italic>v</italic> and <italic>w</italic>, respectively. For all <italic>v</italic> ∈ <italic>V</italic>, let <italic>δ</italic><sup>+</sup>(<italic>v</italic>) be the outdegree of <italic>v</italic> and <italic>δ</italic><sup>−</sup>(<italic>v</italic>) be the indegree. It follows that <inline-formula><mml:math id="M13"><mml:msup><mml:mi>δ</mml:mi><mml:mo>−</mml:mo></mml:msup><mml:mo stretchy="false">(</mml:mo><mml:mi>v</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mspace width="0.2em"/><mml:mo>=</mml:mo><mml:mspace width="0.2em"/><mml:msup><mml:mi>δ</mml:mi><mml:mo>+</mml:mo></mml:msup><mml:mo stretchy="false">(</mml:mo><mml:mover accent="true"><mml:mi>v</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mo stretchy="false">)</mml:mo></mml:math></inline-formula>.</p></sec><sec id="S12"><title>Correcting syncmer errors</title><p id="P31">The <italic>k</italic>-mers in the table <italic>T</italic> with coverage below a predefined threshold <italic>ϑ</italic> are identified as potential error syncmers. Let Θ be the set of potential error syncmers. Firstly, the vertices corresponding to the <italic>k</italic>-mers in Θ are deleted in the <italic>k</italic>-mer graph <italic>G</italic>. Denote by <italic>G</italic><sup>′</sup> the trimmed <italic>k</italic>-mer graph, assumed to be free of syncmer errors. Then, for each read in <italic>Z</italic>, error blocks, defined as consecutive blocks of error syncmers, are identified and mapped to <italic>G</italic><sup>′</sup> for error correction. Consider the example of the read <italic>ζ</italic> (<italic>r,T</italic>), let <italic>β</italic> = [<italic>κ</italic><sub><italic>a</italic>+1</sub>,<italic>κ</italic><sub><italic>a</italic>+2</sub>, …,<italic>κ</italic><sub><italic>a</italic>+<italic>b</italic></sub>] be an error block of <italic>b</italic> syncmers, where 0 ≤ <italic>a</italic> &lt; <italic>a</italic>+<italic>b</italic> ≤ <italic>m</italic>. By definition of the error block, (i) ∀<italic>i</italic> ∈ [1,<italic>b</italic>], <italic>κ</italic><sub><italic>a</italic>+<italic>i</italic></sub> ∈ Θ; (ii) <italic>κ</italic><sub><italic>a</italic></sub> ∉ Θ if <italic>a</italic> &gt; 0; and (iii) <italic>κ</italic><sub><italic>a</italic>+<italic>b</italic>+1</sub> ∉ Θ if <italic>a</italic>+<italic>b</italic> &lt; <italic>m</italic>. For simplicity, we have omitted the mapping functions <italic>π</italic> and <italic>ρ</italic> here for converting actual <italic>k</italic>-mers to <italic>k</italic>-mer table entries. We call <italic>κ</italic><sub><italic>a</italic></sub> the left boundary of the error block and <italic>κ</italic><sub><italic>a</italic>+<italic>b</italic>+1</sub> the right boundary. If both the left and right boundaries are absent, the entire read constitutes an error block and will be excluded from error correction. Without loss of generality, we assume the existence of the left boundary; otherwise, we can establish the left boundary by converting the read to its reverse complement. The syncmer vector <italic>κ</italic><sub><italic>a</italic></sub> ∪<italic>β</italic> delineates a subsequence of the read <italic>r</italic> harbouring sequencing errors, starting from the position <italic>p<sub>a</sub></italic> and concluding at the position <italic>p</italic><sub><italic>a</italic>+<italic>b</italic></sub>+<italic>k</italic>. Let <italic>ξ</italic> be the subsequence, and <italic>l</italic> = |<italic>ξ</italic> | = <italic>p</italic><sub><italic>a</italic>+<italic>b</italic></sub>− <italic>p</italic><sub><italic>a</italic></sub>+<italic>k</italic> be the length in base pairs of the subsequence. In broad terms, the error correction aims to find an unambiguous syncmer path over <italic>G</italic><sup>′</sup> starting with the vertex corresponding to the left boundary <italic>κ</italic><sub><italic>a</italic></sub> outlining a sequence with a sufficiently small Levenshtein edit distance to <italic>ξ</italic> . If the right boundary <italic>κ</italic><sub><italic>a</italic>+<italic>b</italic>+1</sub> exists, the syncmer path must end with the vertex corresponding to it. The upper limit of the Levenshtein distance is parameterised by <italic>ε</italic> and calculated as <italic>εl</italic> for a subsequence of length <italic>l</italic>. The parameter <italic>ε</italic> should reflect the overall base accuracy of the sequencing data. In this study, we set <italic>ϑ</italic> = 3 and <italic>ε</italic> = 0.01.</p><p id="P32">To find the error-correcting syncmer path for an error block, we perform a depth-first search (DFS) on <italic>G</italic><sup>′</sup> starting from the vertex corresponding to the left boundary, denoted by <italic>v</italic><sub>0</sub>. Let <italic>v<sub>0</sub>,v</italic><sub>1</sub>, …,<italic>v<sub>n</sub></italic> be the current search path of the DFS at depth <italic>n</italic>. Let <italic>ξ</italic><sub><italic>n</italic></sub> be the corresponding sequence delineated by the search path, and <italic>l</italic><sub><italic>n</italic></sub> = |<italic>ξ</italic><sub><italic>n</italic></sub>| be the sequence length. A dynamic programming (DP) table is first constructed for calculating the Levenshtein distance between <italic>ξ</italic> and <italic>ξ<sub>n</sub></italic>. Let <italic>d<sub>n</sub></italic> = <italic>η</italic>(<italic>ξ, ξ</italic><sub><italic>n</italic></sub>) be the edit distance of the prefix alignment between two sequences, i.e., the edit distance ignoring the trailing indels in the DP table. Let <italic>g</italic><sub><italic>n</italic></sub> = <italic>γ</italic>(<italic>ξ, ξ</italic><sub><italic>n</italic></sub>) be the length of the overhang sequence of <italic>ξ</italic>, i.e., the number of trailing insertions of <italic>ξ</italic> in the DP table. The actual edit distance between <italic>ξ</italic> and <italic>ξ</italic><sub><italic>n</italic></sub> is computed as <italic>e</italic><sub><italic>n</italic></sub> = <italic>d</italic><sub><italic>n</italic></sub>+<italic>g</italic><sub><italic>n</italic></sub>. The ‘depth search’ along the path is concluded at <italic>v</italic><sub><italic>n</italic></sub> under the following conditions: (i) <italic>d</italic><sub><italic>n</italic></sub> ≥ <italic>εl</italic>, or (ii) <italic>l</italic><sub><italic>n</italic></sub> ≥ (1+<italic>ε</italic>)<italic>l</italic>, or (iii) there is no succeeding vertex from <italic>v</italic><sub><italic>n</italic></sub>. When a ‘depth search’ is completed, the subpaths along the search path are examined to update the global minimum and the second minimum edit distances, denoted by <italic>ê</italic> and <inline-formula><mml:math id="M14"><mml:mover accent="true"><mml:mi>e</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:math></inline-formula>, respectively. The path with the minimum edit distance is also updated. The DFS search routine then proceeds to the next search path. A constraint on the total number of ‘depth searches’, parameterised by <italic>τ</italic>, is set to prevent excessive path exploration in complex graph regions arising from highly repetitive sequences. The error correction is considered unsuccessful if the number of searched paths exceeds the constraint. Upon the successful completion of the DFS, the values of <italic>ê</italic> and <inline-formula><mml:math id="M15"><mml:mover accent="true"><mml:mi>e</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:math></inline-formula> are examined. The error correction is considered valid if <italic>ê</italic> ≤ <italic>εl</italic> and <inline-formula><mml:math id="M16"><mml:mover accent="true"><mml:mi>e</mml:mi><mml:mo>^</mml:mo></mml:mover><mml:mspace width="0.2em"/><mml:mo>&lt;</mml:mo><mml:mspace width="0.2em"/><mml:mi>ω</mml:mi><mml:mover accent="true"><mml:mi>e</mml:mi><mml:mo>˜</mml:mo></mml:mover></mml:math></inline-formula>, where <italic>ω</italic> is a parameter to control path ambiguities, with lower values indicating higher confidence of the optimum path. For a valid error correction, the path with the minimum edit distance is used to update the syncmer vector of the read. In this study, we set <italic>τ</italic> = 10,000 and <italic>ω</italic> = 0.7.</p><p id="P33">The bottleneck in error correction arises from the computation of Levenshtein distance. We implemented two strategies to address this issue. Firstly, we employ Ukkonen’s <italic>O</italic>(<italic>ND</italic>) algorithm<sup><xref ref-type="bibr" rid="R41">41</xref></sup>, where <italic>N</italic> is the minimum length of two sequences and <italic>D</italic> is the edit distance between them. The fundamental idea involves constraining the DP matrix computation to a band along the diagonal that is 2<italic>D</italic> wide. This implementation is intrinsically suitable for our needs, considering we set an upper limit of <italic>εl</italic> for the Levenshtein distance given a sequence of length <italic>l</italic>. Secondly, we reuse the DP matrix during the DFS. When visiting a vertex at each DFS step, the target sequence is extended by appending the sequence encoded in the current vertex, and the computation of the DP matrix is confined to only the part relevant to the newly added bases.</p></sec><sec id="S13"><title>Cleaning a <italic>k</italic>-mer graph and generating a unitig graph</title><p id="P34">Given that organelle genomes typically exhibit significantly greater coverage than the nuclear genome in the sequence data, we set a lower threshold for <italic>k</italic>-mer coverage, denoted by <italic>c</italic>, to exclude <italic>k</italic>-mers derived from the nuclear genome. After filtering the low-copy <italic>k</italic>-mers, we apply a strategy similar to Miniasm<sup><xref ref-type="bibr" rid="R40">40</xref></sup> to remove tipping sequences shorter than ten kilobase pairs and pop bubbles shorter than 100 kilobase pairs. A unitig is defined by a ‘maximal unambiguous path’ in the <italic>k</italic>-mer graph. More precisely, a vertex path <italic>v</italic><sub>0</sub> →<italic>v</italic><sub>1</sub> → …→<italic>v<sub>n</sub></italic> forms a unitig if <italic>δ</italic><sup>+</sup>(<italic>v</italic><sub><italic>i</italic></sub>) = <italic>δ</italic><sup>−</sup>(<italic>v</italic><sub><italic>i</italic>+1</sub>) = 1 for ∀<italic>i</italic> ∈ [0,<italic>n</italic>) and (i) <italic>v</italic><sub>0</sub> = <italic>v</italic><sub><italic>n</italic></sub> or (ii) <italic>δ</italic><sup>−</sup>(<italic>v</italic><sub>0</sub>) ≠ 1 and <italic>δ</italic><sup>+</sup>(<italic>v</italic><sub><italic>n</italic></sub>) ≠ 1. Since each vertex in the <italic>k</italic>-mer graph corresponds to a <italic>k</italic>-mer entry in the <italic>k</italic>-mer table, a unitig can be written as a syncmer vector, similar to a read. Let <italic>U</italic> be the set of unitigs. For ∀<italic>u</italic> ∈ <italic>U</italic>, let <italic>ζ</italic> (<italic>u,T</italic>) be the syncmer vector for <italic>u</italic>, using the same notations for reads. A unitig graph is derived using <italic>U</italic> as vertices, and for ∀<italic>u</italic><sub>0</sub>,<italic>u</italic><sub>1</sub>∈<italic>U</italic>, adding a directed edge <italic>u</italic><sub>0</sub> → <italic>u</italic><sub>1</sub> pointing from <italic>u</italic><sub>0</sub> to <italic>u</italic><sub>1</sub> if the last <italic>k</italic>-mer of <italic>u</italic><sub>0</sub> is identical to the first <italic>k</italic>-mer of <italic>u</italic><sub>1</sub>. The structure and characteristics of the <italic>k</italic>-mer graph persist in the unitig graph. Specifically, the unitig graph remains Watson-Crick complete. To generate the sequence for a unitig, the <italic>k</italic>-mer sequences along the <italic>k</italic>-mer vector are concatenated, eliminating the overlapping sequences between each pair of adjacent <italic>k</italic>-mers. The final genome assembly comprises the sequences of all unitigs. For a complement unitig pair, only one copy is retained in the assembly to avoid redundancy.</p></sec><sec id="S14"><title>Resolving complex assembly structures</title><p id="P35">Horizontal transfers of DNA between organellar genomes can result in an entangled assembly graph for the two organelle genomes owing to the presence of shared sequences longer than the <italic>k</italic>-mer used for graph construction. To tackle this problem, we leverage the phase information of <italic>k</italic>-mers obtained from reads represented by vectors of <italic>k</italic>-mers. Firstly, the reads are mapped to the unitig graph at the k-mer level employing a seed-and-extension approach: the first <italic>k</italic>-mer of the read presented in the unitig graph is used as the seed to initiate a DFS; the DFS path is then extended based on the order of <italic>k</italic>-mers on the read. Then, for each unitig node, the number of reads supporting each spanning triplet are counted and used to resolve the local graph structure around the node. A spanning triplet of a node (the centre node) is a graph path consisting of three nodes with an incoming and an outgoing node connecting the centre node. For example, node <italic>u</italic> has <italic>m</italic> = <italic>δ</italic><sup>−</sup>(<italic>u</italic>) incoming nodes, written as <inline-formula><mml:math id="M17"><mml:msubsup><mml:mi>u</mml:mi><mml:mn>1</mml:mn><mml:mo>−</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mn>2</mml:mn><mml:mo>−</mml:mo></mml:msubsup><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mi>m</mml:mi><mml:mo>−</mml:mo></mml:msubsup></mml:math></inline-formula>, and <italic>n</italic> = <italic>δ</italic><sup>+</sup>(<italic>u</italic>) outgoing nodes, written as <inline-formula><mml:math id="M18"><mml:msubsup><mml:mi>u</mml:mi><mml:mn>1</mml:mn><mml:mo>+</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mn>2</mml:mn><mml:mo>+</mml:mo></mml:msubsup><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mi>n</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:math></inline-formula>, then there are <italic>m</italic> × <italic>n</italic> spanning triplets for <italic>u</italic>. Write <inline-formula><mml:math id="M19"><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:msub><mml:mo>,</mml:mo><mml:mo>∀</mml:mo><mml:mi>i</mml:mi><mml:mo>∈</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:mo>∀</mml:mo><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo></mml:math></inline-formula>, as the number of reads supporting the triplet path <inline-formula><mml:math id="M20"><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup><mml:mo>→</mml:mo><mml:mi>u</mml:mi><mml:mo>→</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:math></inline-formula>. The triplet path <inline-formula><mml:math id="M21"><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup><mml:mo>→</mml:mo><mml:mi>u</mml:mi><mml:mo>→</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:math></inline-formula> is called dominated if <inline-formula><mml:math id="M22"><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:msub><mml:mo>/</mml:mo><mml:mi>max</mml:mi><mml:mo>{</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:msubsup><mml:mi>u</mml:mi><mml:mi>z</mml:mi><mml:mo>−</mml:mo></mml:msubsup><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mi>z</mml:mi><mml:mo>∈</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>m</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>}</mml:mo><mml:mo>&lt;</mml:mo><mml:mi>λ</mml:mi></mml:math></inline-formula> and <inline-formula><mml:math id="M23"><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:msub><mml:mo>/</mml:mo><mml:mi>max</mml:mi><mml:mo>{</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mrow><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup><mml:msubsup><mml:mi>u</mml:mi><mml:mi>z</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:msub><mml:mo>:</mml:mo><mml:mi>z</mml:mi><mml:mo>∈</mml:mo><mml:mo stretchy="false">[</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mi>n</mml:mi><mml:mo stretchy="false">]</mml:mo><mml:mo>}</mml:mo><mml:mo>&lt;</mml:mo><mml:mi>λ</mml:mi></mml:math></inline-formula>, where 0 &lt; <italic>λ</italic> ≤ 1 is a predefined threshold and set as 0.1 in this study; otherwise it is non-dominated. A unitig node is called resolvable if there exists at least one dominated spanning triplet. If a node is resolvable, we update the unitig graph by introducing a compound node for each non-dominated triplet. Precisely, for a non-dominated triplet <inline-formula><mml:math id="M24"><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup><mml:mspace width="0.2em"/><mml:mo>→</mml:mo><mml:mspace width="0.2em"/><mml:mi>u</mml:mi><mml:mspace width="0.2em"/><mml:mo>→</mml:mo><mml:mspace width="0.2em"/><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:math></inline-formula>, the compound node, denoted by <italic>υ</italic>, is constructed by concatenating the <italic>k</italic>-mer vectors of <inline-formula><mml:math id="M25"><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:mi>u</mml:mi></mml:math></inline-formula> and <inline-formula><mml:math id="M26"><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:math></inline-formula> i.e., <inline-formula><mml:math id="M27"><mml:mrow><mml:mi>ζ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>v</mml:mi><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>=</mml:mo><mml:mi>ζ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∨</mml:mo><mml:mi>ζ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:mi>u</mml:mi><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">)</mml:mo><mml:mo>∨</mml:mo><mml:mi>ζ</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:mi>T</mml:mi><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:math></inline-formula> all the incoming edges pointing to <inline-formula><mml:math id="M28"><mml:mrow><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> will be copied and point to <italic>υ</italic>; all the outgoing edges pointing from <inline-formula><mml:math id="M29"><mml:mrow><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> will be copied and point from <italic>υ</italic>. The resolved node <italic>u</italic> is finally removed from the unitig graph. This resolution process is repeated for multiple rounds until the graph structure converges.</p></sec><sec id="S15"><title>Constructing a profile HMM gene database</title><p id="P36">We construct the profile HMM gene databases separately for plastid and mitochondrial genomes. Given the species and organelle genome type, we download all related sequences from the NCBI repository in Genbank format using the Entrez Direct command tools<sup><xref ref-type="bibr" rid="R42">42</xref></sup>. Specifically, we use the <italic>esearch</italic> tool with the query string “TAXID [Organism] AND OTYPE [Filter]” to search against the nucleotide database for a list of target sequences and the <italic>efetch</italic> tool to download those sequences, with ‘TAXID’ being ‘txid3193’ for Embryophyta, ‘txid40674’ for Mammalia, ‘txid7898’ for Actinopterygii, ‘txid8782’ for Aves, ‘txid8504’ for Lepidosauria and ‘txid50557’ for Insecta, and with ‘OTYPE’ being ‘chloroplast’ or ‘mitochondrion’. A sequence set is created for each gene, including protein-coding genes, tRNA genes, and rRNA genes, after parsing the Genbank file and used to construct a profile HMM. For profile HMM construction, we first perform an initial sequence clean by removing sequences with invalid characters and those shorter than one-third or longer than three times the average length. If the number of sequences is more than 10,000 after the initial clean, a second-round clean is performed to retain the top 10,000 most representative sequences, determined by 12-mer completeness: a 12-mer table is first generated for all sequences, excluding the 1% most and 1% least frequent ones; a score is then computed for each sequence as the sum of counts for all unique 12-mers; the 10,000 sequences with the highest scores are finally chosen. With the cleaned sequences, the multiple sequence alignment is constructed using MAFFT<sup><xref ref-type="bibr" rid="R43">43</xref></sup> (version 7.505) with the ‘--auto’ option and the profile HMM is built using HMMER’s ‘hmmbuild’ tool<sup><xref ref-type="bibr" rid="R44">44</xref></sup> (version 3.4) with default parameters. All gene profile HMMs are concatenated into a single file and compressed with HMMER’s ‘hmmpress’ tool (version 3.4) to make a binary database.</p></sec><sec id="S16"><title>Annotating organelle genome sequences with the gene database</title><p id="P37">The assembled sequences are searched against the profile HMM database with HMMER’s ‘nhmmscan’ tool (version 3.4) to build a table for protein-coding genes. Gene hits with <italic>e</italic>-values greater than 1×10<sup>−6</sup> or scores less than 300 are considered insignificant and omitted in the further analysis. The gene annotations are used to determine the organelle type for each assembly graph component. We construct two gene tables for each graph component, one for plastid genes and one for mitochondrial genes, containing only the best hit of each gene on the sequences belonging to the component. We could simply assign the organelle type of a component by comparing the sum of scores to plastid and mitochondrial genes. However, this sometimes leads to misassignments of mitochondrial sequences into plastid due to the frequent insertion of plastid sequences into mitochondrial DNA. Since plastid genes are well conserved, they have higher annotation scores than mitochondrial genes on average. As a result, a few inserted plastid genes can become dominant. To mitigate this problem, we use a progressive assignment approach rather than a simple comparison of the sum of scores. The graph components are sorted by sum of scores in descending order and processed progressively: (1) if the component has not been processed, assign it the corresponding organelle type; (2) if the component has been processed and classified as plastid, reassign it to mitochondrial if (i) there has already been a component assigned to plastid, and (ii) the mitochondrial score is no smaller than one-third of the plastid score. The above process could incorrectly identify some junk sequences as organelle sequences, including those originating from NUMT/NUPT or resulting from sequencing errors. To address this issue, we track the highest score for each gene in sequences already assigned to an organelle type. When we need to assign an organelle type to a new component, we compare the gene scores in sequences from this component to the current highest scores. A component is assigned only if it has a sufficient number of gene hits with higher scores than the current best. We set this threshold at three for plastid and one for mitochondrion. The highest scores for the genes are updated each time a new component is added.</p></sec><sec id="S17"><title>Constructing a primary sequence assembly from the unitig graph</title><p id="P38">The genomes of plant organelles frequently cannot be assembled into a single contiguous sequence because of large repeats or alternative isoforms. We examine all possible path conformations within the assembly graph, selecting the longest path as the primary genome assembly. If multiple paths are of equal length, we choose the one most strongly supported by the read data, determined by the total number of reads spanning the node junctions along the path.</p><p id="P39">We start by estimating the copy number of each sequence in the graph. Consider an assembly graph of <italic>n</italic> nodes, denoted by <italic>u</italic><sub>1</sub>,…,<italic>u<sub>n</sub></italic>. The length of <italic>u<sub>z</sub></italic> is <italic>l<sub>z</sub></italic> and the sequence depth of coverage of <italic>u<sub>z</sub></italic> is <italic>d<sub>z</sub></italic>, <italic>z</italic> = 1, …, <italic>n</italic>. We estimate the average base sequence coverage, denoted by <inline-formula><mml:math id="M30"><mml:mover accent="true"><mml:mi>d</mml:mi><mml:mo>¯</mml:mo></mml:mover></mml:math></inline-formula>, and determine the copy number of <italic>u</italic><sub><italic>z</italic></sub> as <inline-formula><mml:math id="M31"><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mo>⌊</mml:mo><mml:mrow><mml:msub><mml:mi>d</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:mo>/</mml:mo><mml:mover accent="true"><mml:mi>d</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mo>⌋</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>. This estimation is performed using an EM algorithm. In the E-Step, we calculate <inline-formula><mml:math id="M32"><mml:mrow><mml:mover accent="true"><mml:mi>d</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mo>=</mml:mo><mml:msub><mml:mi>∑</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:msub><mml:mi>l</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:msub><mml:mi>d</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:mo>/</mml:mo><mml:msub><mml:mi>∑</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:msub><mml:mi>l</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:msub><mml:mi>c</mml:mi><mml:mi>z</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula>, and in the M-Step, we calculate <inline-formula><mml:math id="M33"><mml:mrow><mml:msub><mml:mi>c</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:mo>=</mml:mo><mml:mo>⌊</mml:mo><mml:mrow><mml:msub><mml:mi>d</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:mo>/</mml:mo><mml:mover accent="true"><mml:mi>d</mml:mi><mml:mo>¯</mml:mo></mml:mover><mml:mo>⌋</mml:mo></mml:mrow></mml:mrow></mml:math></inline-formula>. With the copy number information for each sequence, we aim to traverse the entire graph while ensuring each node is visited according to its copy number. To achieve this, we expand the graph by creating additional copies of multi-copy nodes and their corresponding edge connections. In the expanded graph, each node only needs to be visited once. We implemented the path exploration algorithm to ensure that: (1) all paths are examined; (2) equivalent paths due to rotation and reversal are examined only once; and (3) equivalent paths resulting from permutations of different copies of the same nodes are examined only once. During the path exploration, the circular and linear paths encompassing the longest sequences are added to the candidate set for the ultimate selection. For the final choice of the optimal path, a circular path is preferable over a linear path when the circular one covers no less than a predefined portion (90% in this study) of the sequences covered by the linear one in length; among the paths of the same length, the path with the most read support (designated as the graph edge coverage) is preferable over the others.</p><p id="P40">In plastome assemblies, there are typically two possible path conformations due to IRs. We select the one that shows better gene order consistency with the <italic>Arabidopsis thaliana</italic> reference plastome<sup><xref ref-type="bibr" rid="R45">45</xref></sup>, which has the same relative order as the original published <italic>Nicotiniana tabacum</italic> plastome<sup><xref ref-type="bibr" rid="R8">8</xref></sup>. Specifically, we use the order of the 71 protein-coding genes from the <italic>A. thaliana</italic> assembly as a reference. We compute Spearman’s rank correlation coefficients between the reference and each of the path conformations and select the one with the higher correlation coefficient. Additionally, we rotate the assembled sequence so that it begins with the start codon of the <italic>psbA</italic> gene as a convention.</p><p id="P41">If the primary sequence assembly resulting from the above process is non-circular, we adjust the sequence copy number estimates using the graph topology and undertake a second round of path exploration. Consider a node <italic>u</italic><sub><italic>z</italic></sub> with <italic>p</italic> = <italic>δ</italic><sup>−</sup>(<italic>u<sub>z</sub></italic>) incoming nodes, written as <inline-formula><mml:math id="M34"><mml:mrow><mml:msubsup><mml:mi>u</mml:mi><mml:mn>1</mml:mn><mml:mo>−</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mn>2</mml:mn><mml:mo>−</mml:mo></mml:msubsup><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mi>p</mml:mi><mml:mo>−</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula>, and <italic>q</italic> = <italic>δ</italic><sup>+</sup>(<italic>u</italic><sub><italic>z</italic></sub>) outgoing nodes, written as <inline-formula><mml:math id="M35"><mml:mrow><mml:msubsup><mml:mi>u</mml:mi><mml:mn>1</mml:mn><mml:mo>+</mml:mo></mml:msubsup><mml:mo>,</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mn>2</mml:mn><mml:mo>+</mml:mo></mml:msubsup><mml:mo>…</mml:mo><mml:mo>,</mml:mo><mml:msubsup><mml:mi>u</mml:mi><mml:mi>q</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula>. Write <inline-formula><mml:math id="M36"><mml:mrow><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup><mml:msub><mml:mi>u</mml:mi><mml:mi>z</mml:mi></mml:msub></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="M37"><mml:mrow><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msub><mml:mi>u</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> the number of visits to the respective edges connecting <italic>u</italic><sub><italic>z</italic></sub> in the path, where <italic>i</italic> = 1, …, <italic>p</italic> and <italic>j</italic> = 1, …, <italic>q</italic>. Write <inline-formula><mml:math id="M38"><mml:mrow><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msup><mml:mi>z</mml:mi><mml:mo>−</mml:mo></mml:msup></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>∑</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msubsup><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>−</mml:mo></mml:msubsup></mml:mrow></mml:msub><mml:msub><mml:mi>u</mml:mi><mml:mi>z</mml:mi></mml:msub></mml:mrow></mml:math></inline-formula> and <inline-formula><mml:math id="M39"><mml:mrow><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msup><mml:mi>z</mml:mi><mml:mo>+</mml:mo></mml:msup></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>∑</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msub><mml:mi>u</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:msubsup><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula> the real indegree and outdegree of the node <italic>u</italic><sub><italic>z</italic></sub>. If the entire graph can be traversed with a Hamiltonian cycle, then for any node <italic>u</italic><sub><italic>z</italic></sub> in the graph, <inline-formula><mml:math id="M40"><mml:mrow><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msup><mml:mi>z</mml:mi><mml:mo>−</mml:mo></mml:msup></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msup><mml:mi>z</mml:mi><mml:mo>+</mml:mo></mml:msup></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, holds. It is important to note the difference between <italic>δ</italic><sup>−/+</sup>(<italic>u</italic><sub><italic>z</italic></sub>) and <inline-formula><mml:math id="M41"><mml:mrow><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msup><mml:mi>z</mml:mi><mml:mrow><mml:mo>−</mml:mo><mml:mo>/</mml:mo><mml:mo>+</mml:mo></mml:mrow></mml:msup></mml:mrow></mml:msub></mml:mrow></mml:math></inline-formula>, while the former considers only the graph structure, the latter also considers the copy number of nodes. We minimise the objective function: <inline-formula><mml:math id="M42"><mml:mrow><mml:msub><mml:mi>argmin</mml:mi><mml:mrow><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msub><mml:mi>u</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mi>u</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mspace width="0.2em"/><mml:mo>,</mml:mo><mml:mi>u</mml:mi><mml:mi>i</mml:mi><mml:mo>→</mml:mo><mml:mi>u</mml:mi><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:mi>E</mml:mi></mml:mrow></mml:msub><mml:mstyle displaystyle="true"><mml:msubsup><mml:mi>∑</mml:mi><mml:mrow><mml:mi>z</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>n</mml:mi></mml:msubsup><mml:mrow><mml:mo stretchy="false">(</mml:mo><mml:mo>|</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:mspace width="0.2em"/><mml:mo>−</mml:mo><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msup><mml:mi>z</mml:mi><mml:mo>−</mml:mo></mml:msup></mml:mrow></mml:msub><mml:mo>|</mml:mo><mml:mo>/</mml:mo><mml:mn>2</mml:mn><mml:mo>+</mml:mo><mml:mo>|</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:mo>−</mml:mo><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msup><mml:mi>z</mml:mi><mml:mo>+</mml:mo></mml:msup></mml:mrow></mml:msub><mml:mo>|</mml:mo><mml:mo>/</mml:mo><mml:mn>2</mml:mn><mml:mo>+</mml:mo><mml:mo>|</mml:mo><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msup><mml:mi>z</mml:mi><mml:mo>−</mml:mo></mml:msup></mml:mrow></mml:msub><mml:mspace width="0.2em"/><mml:mo>−</mml:mo><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msup><mml:mi>z</mml:mi><mml:mo>+</mml:mo></mml:msup></mml:mrow></mml:msub><mml:mo>|</mml:mo><mml:mo stretchy="false">)</mml:mo><mml:mi>log</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>l</mml:mi><mml:mi>z</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:mrow></mml:math></inline-formula>. Intuitively, we minimise the sum of the differences between the indegrees and outdegrees, as well as the discrepancies between the expected node copy number and the observed degree. In the objective function, the term for each node is weighted by the logarithm of the corresponding sequence length to assign greater importance to longer sequences. The variables <inline-formula><mml:math id="M43"><mml:mrow><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msub><mml:mi>u</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mi>u</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mspace width="0.2em"/><mml:mo>,</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mspace width="0.2em"/><mml:mo>→</mml:mo><mml:msub><mml:mi>u</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mspace width="0.2em"/><mml:mo>∈</mml:mo><mml:mspace width="0.2em"/><mml:mi>E</mml:mi></mml:mrow></mml:math></inline-formula> take discrete values and are bounded by <inline-formula><mml:math id="M44"><mml:mrow><mml:msub><mml:mi>t</mml:mi><mml:mrow><mml:msub><mml:mi>u</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:msub><mml:mi>u</mml:mi><mml:mi>j</mml:mi></mml:msub></mml:mrow></mml:msub><mml:mspace width="0.2em"/><mml:mo>∈</mml:mo><mml:mspace width="0.2em"/><mml:mo stretchy="false">[</mml:mo><mml:mi>min</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>−</mml:mo><mml:mn>3</mml:mn><mml:mo>,</mml:mo><mml:mi>max</mml:mi><mml:mo stretchy="false">(</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mi>i</mml:mi></mml:msub><mml:mo>,</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mi>j</mml:mi></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>+</mml:mo><mml:mn>3</mml:mn><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula>. If the solution space is no greater than 100 million, we perform a brute force search; otherwise, we use simulated annealing.</p></sec><sec id="S18"><title>Assembling plant organelle genomes</title><p id="P42">We ran Oatk to generate organelle genome assemblies for 195 land plant species sequenced by the Tree of Life programme<sup><xref ref-type="bibr" rid="R24">24</xref></sup>. For organellar sequence identification, the Embryophyta plastid and mitochondrial profile HMM gene databases were specified using the ‘-p’ and ‘-m’ parameters, respectively. GenomeScope<sup><xref ref-type="bibr" rid="R46">46</xref></sup> (version 2.0) was employed to estimate the haplotype data coverage of the nuclear genome. The coverage threshold (‘-c’) was set to five times the estimated haplotype coverage, and the number of threads (‘-t’) was set to 6 for running Oatk, with all other parameters left at their default settings.</p><p id="P43">We ran MBG<sup><xref ref-type="bibr" rid="R25">25</xref></sup> (version 1.0.16) and PMAT<sup><xref ref-type="bibr" rid="R17">17</xref></sup> (version 1.5.3) for genome assembly graph construction to compare with the Oatk assembler <italic>syncasm</italic>. For MBG, we used the same <italic>k</italic>-mer size and coverage threshold as <italic>syncasm</italic>, i.e., ‘-k’ 1,001 and ‘-c’ five times the haplotype coverage, and set ‘-t’ to 6 to use six threads. All other parameters were left at their default settings. For PMAT, we configured the genome size parameter (‘-g’) to the estimated value from GenomeScope, set the sequence type parameter (‘-st’) to ‘hifi’, and adjusted the sampling ratio factor parameter (‘-fc’) based on the GenomeScope haplotype coverage estimation to use 3× data. Additionally, we set the ‘-cpu’ parameter to 6 to use six threads and enable the ‘-m’ option to retain sequence data in memory for faster processing. PMAT generates separate assembly graphs for plastid and mitochondrial genomes. However, sequence misclassification often results in a significant proportion of shared sequences between the two assembly graphs. To address this issue, we merged the two graphs to create a unified assembly graph for both organelle genomes, removing redundant sequences and edges while preserving the overall graph structure.</p><p id="P44">We ran GetOrganelle<sup><xref ref-type="bibr" rid="R14">14</xref></sup> (version 1.7.7.1) to generate organelle genomes from assembly graphs constructed by <italic>syncasm</italic>, MBG, and PMAT. We set ‘-F’ to ‘embplant pt’ and ‘embplant mt’ respectively for assembling plastid and mitochondrial genomes, and set ‘-t’ to 6 to use six threads. We ran the Oatk <italic>hmmannot</italic>-<italic>pathfinder</italic> pipeline to compare with GetOrganelle. This was achieved by using the ‘-G’ parameter in Oatk, which allows it to take an existing assembly graph as input. By specifying this parameter, Oatk bypasses the assembly graph construction from the raw sequence data.</p></sec><sec id="S19"><title>Calculating SC and IR component sizes for plastomes</title><p id="P45">We ran NUCmer<sup><xref ref-type="bibr" rid="R47">47</xref></sup> (version 4.0.0rc1) with the parameter ‘--maxmatch’ to generate a self-alignment for the genome sequence. Alignments with sequence identity below 95% and those not in the reverse-complement orientation were filtered out. Alignments within a distance smaller than 50 bp were merged, where the distance between two alignments is defined as the Manhattan distance between their closest endpoints. Following merging, the two largest aligned segments are identified as IRs. The regions flanking these IRs are identified as LSC and SSC based on their respective sizes. The genome sequence is finally rotated so that it starts at the beginning of the <italic>psbA</italic> gene, which is at the start of the LSC, and ends with an IR.</p></sec><sec id="S20"><title>Mapping reads to assembly graphs</title><p id="P46">We ran GraphAligner<sup><xref ref-type="bibr" rid="R48">48</xref></sup> (version 1.0.19) to map reads to the assembly graphs with the parameters ‘--precise-clipping 0.9 --min-alignment-score 5000 -x vg’. Alignments were filtered out if less than 95% of the read was aligned to a unique position. GraphAligner outputs a path on the graph for each alignment. For any given graph path of interest, we examine the alignment path of each read and count it as a supporting read if the alignment path fully covers the target graph path. Alignments in both directions are considered, and the sum is taken as the total number of supporting reads.</p></sec><sec id="S21"><title>Identifying shared sequences between plastid and mitochondrial genomes</title><p id="P47">We ran NUCmer<sup><xref ref-type="bibr" rid="R47">47</xref></sup> (version 4.0.0rc1) with the parameter ‘--maxmatch’ to map the plastome to the mitogenome. We then ran <italic>delta-filter</italic> <sup><xref ref-type="bibr" rid="R47">47</xref></sup> (version 4.0.0rc1) with the ‘-l 1000’ parameter to remove short alignments, the ‘-i 90’ parameter to retain only alignments of at least 90% sequence identity, and the ‘-r’ parameter to keep only the best mitogenome match to each region of plastome sequence. The sequences corresponding to the resulting alignments are considered the shared sequences between the two organelle genomes.</p></sec><sec id="S22"><title>Constructing the phylogenetic tree for the <italic>psaA</italic> gene from shared gene sequences</title><p id="P48">We ran <italic>hmmannot</italic> to generate gene annotations of the shared sequences and extracted sequences annotated as <italic>psaA</italic> genes. We ran MAFFT<sup><xref ref-type="bibr" rid="R43">43</xref></sup> (version 7.505) with the parameters ‘--localpair --maxiterate 1000’ to generate a multiple alignment of these gene sequences and ran IQ-TREE<sup><xref ref-type="bibr" rid="R49">49</xref></sup> (version 2.3.4) with default parameters to generate a phylogenetic tree. The calculations of distances between tree nodes and identification of internal MRCA nodes were performed using Bio.Phylo functions<sup><xref ref-type="bibr" rid="R50">50</xref></sup> in Biopython (version 1.83).</p></sec></sec><sec sec-type="supplementary-material" id="SM"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="SD1"><label>supplementary_figures</label><media xlink:href="EMS199772-supplement-supplementary_figures.pdf" mimetype="application" mime-subtype="pdf" id="d14aAcEbB" position="anchor"/></supplementary-material><supplementary-material content-type="local-data" id="SD2"><label>supplementary_tables</label><media xlink:href="EMS199772-supplement-supplementary_tables.xlsx" mimetype="application" mime-subtype="vnd.openxmlformats-officedocument.spreadsheetml.sheet" id="d14aAcEcB" position="anchor"/></supplementary-material></sec></body><back><ack id="S23"><title>Acknowledgements</title><p>We thank Sergey Nurk and Alex Twyford for discussions, Yaqi Su for exploration and feedback on early Oatk results, Ksenia Krasheninnikova for the Nextflow implementation, and Lia Obinu for the Bioconda implementation. For the purpose of open access, the author has applied a CC BY public copyright licence to any Author Accepted Manuscript version arising from this submission.</p><sec id="S24"><title>Funding</title><p>CZ and the DToL Consortium were supported by Wellcome grants 218328 and 226458, MBr, MBl and SM by Wellome core funding to the Sanger Institute grant 220540, SM and RD by Wellcome grant 207492.</p></sec></ack><sec id="S25" sec-type="data-availability"><title>Data availability</title><p id="P49">The source code for Oatk is available in the GitHub repository <ext-link ext-link-type="uri" xlink:href="https://github.com/c-zhou/oatk">https://github.com/c-zhou/oatk</ext-link>. The source code for OatkDB and the profile HMM gene database are available in the GitHub repository <ext-link ext-link-type="uri" xlink:href="https://github.com/c-zhou/OatkDB">https://github.com/c-zhou/OatkDB</ext-link>. Raw sequence data are available in public data repositories, with accession numbers listed in the <xref ref-type="supplementary-material" rid="SD2">Supplementary Table S3</xref>. The organelle genome assembly data for all species are available in the Zenodo repository <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.13952353">https://doi.org/10.5281/zenodo.13952353</ext-link></p></sec><fn-group><fn id="FN1" fn-type="con"><p id="P50"><bold>Authors’ contributions</bold></p><p id="P51">All authors contributed ideas. CZ implemented Oatk and obtained the assembly results. MBr provided initial computational solutions to some aspects. CZ drafted the paper with RD. All authors commented on and approved the final manuscript.</p></fn><fn id="FN2" fn-type="conflict"><p id="P52"><bold>Competing interests</bold></p><p id="P53">The authors declare that they have no competing interests.</p></fn></fn-group><ref-list><ref id="R1"><label>1</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zimorski</surname><given-names>Verena</given-names></name><name><surname>Ku</surname><given-names>Chuan</given-names></name><name><surname>Martin</surname><given-names>William F</given-names></name><name><surname>Gould</surname><given-names>Sven B</given-names></name></person-group><article-title>Endosymbiotic theory for organelle origins</article-title><source>Current Opinion in Microbiology</source><year>2014</year><volume>22</volume><fpage>38</fpage><lpage>48</lpage><pub-id pub-id-type="pmid">25306530</pub-id></element-citation></ref><ref id="R2"><label>2</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kleine</surname><given-names>Tatjana</given-names></name><name><surname>Maier</surname><given-names>Uwe G</given-names></name><name><surname>Leister</surname><given-names>Dario</given-names></name></person-group><article-title>DNA transfer from organelles to the nucleus: the idiosyncratic genetics of endosymbiosis</article-title><source>Annual Review of Plant Biology</source><year>2009</year><volume>60</volume><issue>1</issue><fpage>115</fpage><lpage>138</lpage><pub-id pub-id-type="pmid">19014347</pub-id></element-citation></ref><ref id="R3"><label>3</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Marèchal</surname><given-names>Alexandre</given-names></name><name><surname>Brisson</surname><given-names>Normand</given-names></name></person-group><article-title>Recombination and the maintenance of plant organelle genome stability</article-title><source>New Phytologist</source><year>2010</year><volume>186</volume><issue>2</issue><fpage>299</fpage><lpage>317</lpage><pub-id pub-id-type="pmid">20180912</pub-id></element-citation></ref><ref id="R4"><label>4</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mower</surname><given-names>Jeffrey P</given-names></name><name><surname>Vickrey</surname><given-names>Trisha L</given-names></name></person-group><article-title>Structural diversity among plastid genomes of land plants</article-title><source>Advances in Botanical Research</source><year>2018</year><volume>85</volume><fpage>263</fpage><lpage>292</lpage></element-citation></ref><ref id="R5"><label>5</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wang</surname><given-names>Jie</given-names></name><name><surname>Kan</surname><given-names>Shenglong</given-names></name><name><surname>Liao</surname><given-names>Xuezhu</given-names></name><name><surname>Zhou</surname><given-names>Jiawei</given-names></name><name><surname>Tembrock</surname><given-names>Luke R</given-names></name><name><surname>Daniell</surname><given-names>Henry</given-names></name><name><surname>Jin</surname><given-names>Shuangxia</given-names></name><name><surname>Wu</surname><given-names>Zhiqiang</given-names></name></person-group><article-title>Plant organellar genomes: Much done, much more to do</article-title><source>Trends in Plant Science</source><year>2024</year><pub-id pub-id-type="pmid">38220520</pub-id></element-citation></ref><ref id="R6"><label>6</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kozik</surname><given-names>Alexander</given-names></name><name><surname>Rowan</surname><given-names>Beth A</given-names></name><name><surname>Lavelle</surname><given-names>Dean</given-names></name><name><surname>Berke</surname><given-names>Lidija</given-names></name><name><surname>Schranz</surname><given-names>M Eric</given-names></name><name><surname>Michelmore</surname><given-names>Richard W</given-names></name><name><surname>Christensen</surname><given-names>Alan C</given-names></name></person-group><article-title>The alternative reality of plant mitochondrial DNA: One ring does not rule them all</article-title><source>PLoS Genetics</source><year>2019</year><volume>15</volume><issue>8</issue><elocation-id>e1008373</elocation-id><pub-id pub-id-type="pmcid">PMC6742443</pub-id><pub-id pub-id-type="pmid">31469821</pub-id><pub-id pub-id-type="doi">10.1371/journal.pgen.1008373</pub-id></element-citation></ref><ref id="R7"><label>7</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>Hong-Tao</given-names></name><name><surname>Luo</surname><given-names>Yang</given-names></name><name><surname>Gan</surname><given-names>Lu</given-names></name><name><surname>Ma</surname><given-names>Peng-Fei</given-names></name><name><surname>Gao</surname><given-names>Lian-Ming</given-names></name><name><surname>Yang</surname><given-names>Jun-Bo</given-names></name><name><surname>Cai</surname><given-names>Jie</given-names></name><name><surname>Gitzendanner</surname><given-names>Matthew A</given-names></name><name><surname>Fritsch</surname><given-names>Peter W</given-names></name><name><surname>Zhang</surname><given-names>Ting</given-names></name><etal/></person-group><article-title>Plastid phylogenomic insights into relationships of all flowering plant families</article-title><source>BMC Biology</source><year>2021</year><volume>19</volume><fpage>1</fpage><lpage>13</lpage><pub-id pub-id-type="pmcid">PMC8555322</pub-id><pub-id pub-id-type="pmid">34711223</pub-id><pub-id pub-id-type="doi">10.1186/s12915-021-01166-2</pub-id></element-citation></ref><ref id="R8"><label>8</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Shinozaki</surname><given-names>K</given-names></name><name><surname>Ohme</surname><given-names>M</given-names></name><name><surname>Tanaka</surname><given-names>M</given-names></name><name><surname>Wakasugi</surname><given-names>T</given-names></name><name><surname>Hayashida</surname><given-names>N</given-names></name><name><surname>Matsubayashi</surname><given-names>T</given-names></name><name><surname>Zaita</surname><given-names>N</given-names></name><name><surname>Chunwongse</surname><given-names>J</given-names></name><name><surname>Obokata</surname><given-names>J</given-names></name><name><surname>Yamaguchi-Shinozaki</surname><given-names>KJTEJ</given-names></name><etal/></person-group><article-title>The complete nucleotide sequence of the tobacco chloroplast genome: its gene organization and expression</article-title><source>EMBO Journal</source><year>1986</year><volume>5</volume><issue>9</issue><fpage>2043</fpage><lpage>2049</lpage><pub-id pub-id-type="pmcid">PMC1167080</pub-id><pub-id pub-id-type="pmid">16453699</pub-id><pub-id pub-id-type="doi">10.1002/j.1460-2075.1986.tb04464.x</pub-id></element-citation></ref><ref id="R9"><label>9</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wang</surname><given-names>Shuaibin</given-names></name><name><surname>Li</surname><given-names>Dawei</given-names></name><name><surname>Yao</surname><given-names>Xiaohong</given-names></name><name><surname>Song</surname><given-names>Qingwei</given-names></name><name><surname>Wang</surname><given-names>Zupeng</given-names></name><name><surname>Zhang</surname><given-names>Qiong</given-names></name><name><surname>Zhong</surname><given-names>Caihong</given-names></name><name><surname>Liu</surname><given-names>Yifei</given-names></name><name><surname>Huang</surname><given-names>Hongwen</given-names></name></person-group><article-title>Evolution and diversification of kiwifruit mitogenomes through extensive whole-genome rearrangement and mosaic loss of intergenic sequences in a highly variable region</article-title><source>Genome Biology and Evolution</source><year>2019</year><volume>11</volume><issue>4</issue><fpage>1192</fpage><lpage>1206</lpage><pub-id pub-id-type="pmcid">PMC6482417</pub-id><pub-id pub-id-type="pmid">30895302</pub-id><pub-id pub-id-type="doi">10.1093/gbe/evz063</pub-id></element-citation></ref><ref id="R10"><label>10</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hahn</surname><given-names>Christoph</given-names></name><name><surname>Bachmann</surname><given-names>Lutz</given-names></name><name><surname>Chevreux</surname><given-names>Bastien</given-names></name></person-group><article-title>Reconstructing mitochondrial genomes directly from genomic next-generation sequencing reads - a baiting and iterative mapping approach</article-title><source>Nucleic Acids Research</source><year>2013</year><volume>41</volume><issue>13</issue><fpage>e129</fpage><pub-id pub-id-type="pmcid">PMC3711436</pub-id><pub-id pub-id-type="pmid">23661685</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkt371</pub-id></element-citation></ref><ref id="R11"><label>11</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bakker</surname><given-names>Freek T</given-names></name><name><surname>Lei</surname><given-names>Di</given-names></name><name><surname>Yu</surname><given-names>Jiaying</given-names></name><name><surname>Mohammadin</surname><given-names>Setareh</given-names></name><name><surname>Wei</surname><given-names>Zhen</given-names></name><name><surname>van de Kerke</surname><given-names>Sara</given-names></name><name><surname>Gravendeel</surname><given-names>Barbara</given-names></name><name><surname>Nieuwenhuis</surname><given-names>Mathijs</given-names></name><name><surname>Staats</surname><given-names>Martijn</given-names></name><name><surname>Alquezar-Planas</surname><given-names>David E</given-names></name><etal/></person-group><article-title>Herbarium genomics: plastome sequence assembly from a range of herbarium specimens using an Iterative Organelle Genome Assembly pipeline</article-title><source>Biological Journal of the Linnean Society</source><year>2016</year><volume>117</volume><issue>1</issue><fpage>33</fpage><lpage>43</lpage></element-citation></ref><ref id="R12"><label>12</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dierckxsens</surname><given-names>Nicolas</given-names></name><name><surname>Mardulyn</surname><given-names>Patrick</given-names></name><name><surname>Smits</surname><given-names>Guillaume</given-names></name></person-group><article-title>NOVOPlasty: de novo assembly of organelle genomes from whole genome data</article-title><source>Nucleic Acids Research</source><year>2017</year><volume>45</volume><issue>4</issue><fpage>e18</fpage><pub-id pub-id-type="pmcid">PMC5389512</pub-id><pub-id pub-id-type="pmid">28204566</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkw955</pub-id></element-citation></ref><ref id="R13"><label>13</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Soorni</surname><given-names>Aboozar</given-names></name><name><surname>Haak</surname><given-names>David</given-names></name><name><surname>Zaitlin</surname><given-names>David</given-names></name><name><surname>Bombarely</surname><given-names>Aureliano</given-names></name></person-group><article-title>Organelle PBA, a pipeline for assembling chloroplast and mitochondrial genomes from PacBio DNA sequencing data</article-title><source>BMC Genomics</source><year>2017</year><volume>18</volume><fpage>1</fpage><lpage>8</lpage><pub-id pub-id-type="pmcid">PMC5219736</pub-id><pub-id pub-id-type="pmid">28061749</pub-id><pub-id pub-id-type="doi">10.1186/s12864-016-3412-9</pub-id></element-citation></ref><ref id="R14"><label>14</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jin</surname><given-names>Jian-Jun</given-names></name><name><surname>Yu</surname><given-names>Wen-Bin</given-names></name><name><surname>Yang</surname><given-names>Jun-Bo</given-names></name><name><surname>Song</surname><given-names>Yu</given-names></name><name><surname>DePamphilis</surname><given-names>Claude W</given-names></name><name><surname>Yi</surname><given-names>Ting-Shuang</given-names></name><name><surname>Li</surname><given-names>De-Zhu</given-names></name></person-group><article-title>GetOrganelle: a fast and versatile toolkit for accurate de novo assembly of organelle genomes</article-title><source>Genome Biology</source><year>2020</year><volume>21</volume><fpage>1</fpage><lpage>31</lpage><pub-id pub-id-type="pmcid">PMC7488116</pub-id><pub-id pub-id-type="pmid">32912315</pub-id><pub-id pub-id-type="doi">10.1186/s13059-020-02154-5</pub-id></element-citation></ref><ref id="R15"><label>15</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>He</surname><given-names>Wenchuang</given-names></name><name><surname>Xiang</surname><given-names>Kunli</given-names></name><name><surname>Chen</surname><given-names>Caijin</given-names></name><name><surname>Wang</surname><given-names>Jie</given-names></name><name><surname>Wu</surname><given-names>Zhiqiang</given-names></name></person-group><article-title>Master graph: an essential integrated assembly model for the plant mitogenome based on a graph-based framework</article-title><source>Briefings in Bioinformatics</source><year>2023</year><volume>24</volume><issue>1</issue><elocation-id>bbac522</elocation-id><pub-id pub-id-type="pmid">36644898</pub-id></element-citation></ref><ref id="R16"><label>16</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Uliano-Silva</surname><given-names>Marcela</given-names></name><name><surname>Ferreira</surname><given-names>João Gabriel RN</given-names></name><name><surname>Krasheninnikova</surname><given-names>Ksenia</given-names></name><name><surname>Formenti</surname><given-names>Giulio</given-names></name><name><surname>Abueg</surname><given-names>Linelle</given-names></name><name><surname>Torrance</surname><given-names>James</given-names></name><name><surname>Myers</surname><given-names>Eugene W</given-names></name><name><surname>Durbin</surname><given-names>Richard</given-names></name><name><surname>Blaxter</surname><given-names>Mark</given-names></name><etal/></person-group><article-title>MitoHiFi: a python pipeline for mitochondrial genome assembly from PacBio high fidelity reads</article-title><source>BMC Bioinformatics</source><year>2023</year><volume>24</volume><issue>1</issue><fpage>288</fpage><pub-id pub-id-type="pmcid">PMC10354987</pub-id><pub-id pub-id-type="pmid">37464285</pub-id><pub-id pub-id-type="doi">10.1186/s12859-023-05385-y</pub-id></element-citation></ref><ref id="R17"><label>17</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bi</surname><given-names>Changwei</given-names></name><name><surname>Shen</surname><given-names>Fei</given-names></name><name><surname>Han</surname><given-names>Fuchuan</given-names></name><name><surname>Qu</surname><given-names>Yanshu</given-names></name><name><surname>Hou</surname><given-names>Jing</given-names></name><name><surname>Xu</surname><given-names>Kewang</given-names></name><name><surname>Xu</surname><given-names>Li-an</given-names></name><name><surname>He</surname><given-names>Wenchuang</given-names></name><name><surname>Wu</surname><given-names>Zhiqiang</given-names></name><name><surname>Yin</surname><given-names>Tongming</given-names></name></person-group><article-title>PMAT: an efficient plant mitogenome assembly toolkit using low coverage HiFi sequencing data</article-title><source>Horticulture Research</source><year>2024</year><elocation-id>uhae023</elocation-id><pub-id pub-id-type="pmcid">PMC10925850</pub-id><pub-id pub-id-type="pmid">38469379</pub-id><pub-id pub-id-type="doi">10.1093/hr/uhae023</pub-id></element-citation></ref><ref id="R18"><label>18</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Luo</surname><given-names>Ruibang</given-names></name><name><surname>Liu</surname><given-names>Binghang</given-names></name><name><surname>Xie</surname><given-names>Yinlong</given-names></name><name><surname>Li</surname><given-names>Zhenyu</given-names></name><name><surname>Huang</surname><given-names>Weihua</given-names></name><name><surname>Yuan</surname><given-names>Jianying</given-names></name><name><surname>He</surname><given-names>Guangzhu</given-names></name><name><surname>Chen</surname><given-names>Yanxiang</given-names></name><name><surname>Pan</surname><given-names>Qi</given-names></name><name><surname>Liu</surname><given-names>Yunjie</given-names></name><etal/></person-group><article-title>SOAPdenovo2: an empirically improved memory-efficient short-read de novo assembler</article-title><source>Gigascience</source><year>2012</year><volume>1</volume><issue>1</issue><fpage>2047</fpage><lpage>217X</lpage><pub-id pub-id-type="pmcid">PMC3626529</pub-id><pub-id pub-id-type="pmid">23587118</pub-id><pub-id pub-id-type="doi">10.1186/2047-217X-1-18</pub-id></element-citation></ref><ref id="R19"><label>19</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bankevich</surname><given-names>Anton</given-names></name><name><surname>Nurk</surname><given-names>Sergey</given-names></name><name><surname>Antipov</surname><given-names>Dmitry</given-names></name><name><surname>Gurevich</surname><given-names>Alexey A</given-names></name><name><surname>Dvorkin</surname><given-names>Mikhail</given-names></name><name><surname>Kulikov</surname><given-names>Alexander S</given-names></name><name><surname>Lesin</surname><given-names>Valery M</given-names></name><name><surname>Nikolenko</surname><given-names>Sergey I</given-names></name><name><surname>Pham</surname><given-names>Son</given-names></name><name><surname>Prjibelski</surname><given-names>Andrey D</given-names></name><etal/></person-group><article-title>SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing</article-title><source>Journal of computational biology</source><year>2012</year><volume>19</volume><issue>5</issue><fpage>455</fpage><lpage>477</lpage><pub-id pub-id-type="pmcid">PMC3342519</pub-id><pub-id pub-id-type="pmid">22506599</pub-id><pub-id pub-id-type="doi">10.1089/cmb.2012.0021</pub-id></element-citation></ref><ref id="R20"><label>20</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wenger</surname><given-names>Aaron M</given-names></name><name><surname>Peluso</surname><given-names>Paul</given-names></name><name><surname>Rowell</surname><given-names>William J</given-names></name><name><surname>Chang</surname><given-names>Pi-Chuan</given-names></name><name><surname>Hall</surname><given-names>Richard J</given-names></name><name><surname>Concepcion</surname><given-names>Gregory T</given-names></name><name><surname>Ebler</surname><given-names>Jana</given-names></name><name><surname>Fungtammasan</surname><given-names>Arkarachai</given-names></name><name><surname>Kolesnikov</surname><given-names>Alexey</given-names></name><name><surname>Olson</surname><given-names>Nathan D</given-names></name><etal/></person-group><article-title>Accurate circular consensus long-read sequencing improves variant detection and assembly of a human genome</article-title><source>Nature Biotechnology</source><year>2019</year><volume>37</volume><issue>10</issue><fpage>1155</fpage><lpage>1162</lpage><pub-id pub-id-type="pmcid">PMC6776680</pub-id><pub-id pub-id-type="pmid">31406327</pub-id><pub-id pub-id-type="doi">10.1038/s41587-019-0217-9</pub-id></element-citation></ref><ref id="R21"><label>21</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>Heng</given-names></name><name><surname>Durbin</surname><given-names>Richard</given-names></name></person-group><article-title>Genome assembly in the telomere-to-telomere era</article-title><source>Nature Reviews Genetics</source><year>2024</year><fpage>1</fpage><lpage>13</lpage><pub-id pub-id-type="pmid">38649458</pub-id></element-citation></ref><ref id="R22"><label>22</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lewin</surname><given-names>Harris A</given-names></name><name><surname>Robinson</surname><given-names>Gene E</given-names></name><name><surname>Kress</surname><given-names>W John</given-names></name><name><surname>Baker</surname><given-names>William J</given-names></name><name><surname>Coddington</surname><given-names>Jonathan</given-names></name><name><surname>Crandall</surname><given-names>Keith A</given-names></name><name><surname>Durbin</surname><given-names>Richard</given-names></name><name><surname>Edwards</surname><given-names>Scott V</given-names></name><name><surname>Forest</surname><given-names>Fèlix</given-names></name><name><surname>Gilbert</surname><given-names>M Thomas P</given-names></name><etal/></person-group><article-title>Earth BioGenome Project: Sequencing life for the future of life</article-title><source>Proceedings of the National Academy of Sciences</source><year>2018</year><volume>115</volume><issue>17</issue><fpage>4325</fpage><lpage>4333</lpage><pub-id pub-id-type="pmcid">PMC5924910</pub-id><pub-id pub-id-type="pmid">29686065</pub-id><pub-id pub-id-type="doi">10.1073/pnas.1720115115</pub-id></element-citation></ref><ref id="R23"><label>23</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rhie</surname><given-names>Arang</given-names></name><name><surname>McCarthy</surname><given-names>Shane A</given-names></name><name><surname>Fedrigo</surname><given-names>Olivier</given-names></name><name><surname>Damas</surname><given-names>Joana</given-names></name><name><surname>Formenti</surname><given-names>Giulio</given-names></name><name><surname>Koren</surname><given-names>Sergey</given-names></name><name><surname>Uliano-Silva</surname><given-names>Marcela</given-names></name><name><surname>Chow</surname><given-names>William</given-names></name><name><surname>Fungtammasan</surname><given-names>Arkarachai</given-names></name><name><surname>Kim</surname><given-names>Juwan</given-names></name><etal/></person-group><article-title>Towards complete and error-free genome assemblies of all vertebrate species</article-title><source>Nature</source><year>2021</year><volume>592</volume><issue>7856</issue><fpage>737</fpage><lpage>746</lpage><pub-id pub-id-type="pmcid">PMC8081667</pub-id><pub-id pub-id-type="pmid">33911273</pub-id><pub-id pub-id-type="doi">10.1038/s41586-021-03451-0</pub-id></element-citation></ref><ref id="R24"><label>24</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Blaxter</surname><given-names>Mark</given-names></name><name><surname>Mieszkowska</surname><given-names>Nova</given-names></name><name><surname>Di Palma</surname><given-names>Federica</given-names></name><name><surname>Holland</surname><given-names>Peter</given-names></name><name><surname>Durbin</surname><given-names>Richard</given-names></name><name><surname>Richards</surname><given-names>Thomas</given-names></name><name><surname>Berriman</surname><given-names>Matthew</given-names></name><name><surname>Kersey</surname><given-names>Paul</given-names></name><name><surname>Hollingsworth</surname><given-names>Peter</given-names></name><name><surname>Wilson</surname><given-names>Willie</given-names></name><name><surname>Twyford</surname><given-names>Alex</given-names></name><etal/></person-group><article-title>Sequence locally, think globally: The Darwin Tree of Life Project</article-title><source>Proceedings of the National Academy of Sciences</source><year>2022</year><volume>119</volume><issue>4</issue><comment>ISSN 0027-8424</comment><pub-id pub-id-type="pmcid">PMC8797607</pub-id><pub-id pub-id-type="pmid">35042805</pub-id><pub-id pub-id-type="doi">10.1073/pnas.2115642118</pub-id></element-citation></ref><ref id="R25"><label>25</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rautiainen</surname><given-names>Mikko</given-names></name><name><surname>Marschall</surname><given-names>Tobias</given-names></name></person-group><article-title>MBG: Minimizer-based sparse de Bruijn graph construction</article-title><source>Bioinformatics</source><year>2021</year><volume>37</volume><issue>16</issue><fpage>2476</fpage><lpage>2478</lpage><pub-id pub-id-type="pmcid">PMC8521641</pub-id><pub-id pub-id-type="pmid">33475133</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btab004</pub-id></element-citation></ref><ref id="R26"><label>26</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Meng</surname><given-names>Guanliang</given-names></name><name><surname>Li</surname><given-names>Yiyuan</given-names></name><name><surname>Yang</surname><given-names>Chentao</given-names></name><name><surname>Liu</surname><given-names>Shanlin</given-names></name></person-group><article-title>MitoZ: a toolkit for animal mitochondrial genome assembly, annotation and visualization</article-title><source>Nucleic Acids Research</source><year>2019</year><volume>47</volume><issue>11</issue><fpage>e63</fpage><pub-id pub-id-type="pmcid">PMC6582343</pub-id><pub-id pub-id-type="pmid">30864657</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkz173</pub-id></element-citation></ref><ref id="R27"><label>27</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Edgar</surname><given-names>Robert</given-names></name></person-group><article-title>Syncmers are more sensitive than minimizers for selecting conserved k-mers in biological sequences</article-title><source>PeerJ</source><year>2021</year><volume>9</volume><elocation-id>e10805</elocation-id><pub-id pub-id-type="pmcid">PMC7869670</pub-id><pub-id pub-id-type="pmid">33604186</pub-id><pub-id pub-id-type="doi">10.7717/peerj.10805</pub-id></element-citation></ref><ref id="R28"><label>28</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ekim</surname><given-names>Bariş</given-names></name><name><surname>Berger</surname><given-names>Bonnie</given-names></name><name><surname>Chikhi</surname><given-names>Rayan</given-names></name></person-group><article-title>Minimizer-space de Bruijn graphs: Whole-genome assembly of long reads in minutes on a personal computer</article-title><source>Cell Systems</source><year>2021</year><volume>12</volume><issue>10</issue><fpage>958</fpage><lpage>968</lpage><pub-id pub-id-type="pmcid">PMC8562525</pub-id><pub-id pub-id-type="pmid">34525345</pub-id><pub-id pub-id-type="doi">10.1016/j.cels.2021.08.009</pub-id></element-citation></ref><ref id="R29"><label>29</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wojciechowski</surname><given-names>Martin F</given-names></name></person-group><article-title>Towards a new classification of Leguminosae: Naming clades using non-Linnaean phylogenetic nomenclature</article-title><source>South African Journal of Botany</source><year>2013</year><volume>89</volume><fpage>85</fpage><lpage>93</lpage></element-citation></ref><ref id="R30"><label>30</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Palmer</surname><given-names>Jeffrey D</given-names></name></person-group><article-title>Chloroplast DNA exists in two orientations</article-title><source>Nature</source><year>1983</year><volume>301</volume><issue>5895</issue><fpage>92</fpage><lpage>93</lpage></element-citation></ref><ref id="R31"><label>31</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Stein</surname><given-names>Diana B</given-names></name><name><surname>Palmer</surname><given-names>Jeffrey D</given-names></name><name><surname>Thompson</surname><given-names>William F</given-names></name></person-group><article-title>Structural evolution and flip-flop recombination of chloroplast DNA in the fern genus Osmunda</article-title><source>Current Genetics</source><year>1986</year><volume>10</volume><fpage>835</fpage><lpage>841</lpage></element-citation></ref><ref id="R32"><label>32</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wang</surname><given-names>Weiwen</given-names></name><name><surname>Lanfear</surname><given-names>Robert</given-names></name></person-group><article-title>Long-reads reveal that the chloroplast genome exists in two distinct versions in most plants</article-title><source>Genome Biology and Evolution</source><year>2019</year><volume>11</volume><issue>12</issue><fpage>3372</fpage><lpage>3381</lpage><pub-id pub-id-type="pmcid">PMC7145664</pub-id><pub-id pub-id-type="pmid">31750905</pub-id><pub-id pub-id-type="doi">10.1093/gbe/evz256</pub-id></element-citation></ref><ref id="R33"><label>33</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wick</surname><given-names>Ryan R</given-names></name><name><surname>Schultz</surname><given-names>Mark B</given-names></name><name><surname>Zobel</surname><given-names>Justin</given-names></name><name><surname>Holt</surname><given-names>Kathryn E</given-names></name></person-group><article-title>Bandage: interactive visualization of de novo genome assemblies</article-title><source>Bioinformatics</source><year>2015</year><volume>31</volume><issue>20</issue><fpage>3350</fpage><lpage>3352</lpage><pub-id pub-id-type="pmcid">PMC4595904</pub-id><pub-id pub-id-type="pmid">26099265</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btv383</pub-id></element-citation></ref><ref id="R34"><label>34</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Wang</surname><given-names>Daryi</given-names></name><name><surname>Wu</surname><given-names>Yu-Wei</given-names></name><name><surname>Shih</surname><given-names>Arthur Chun-Chieh</given-names></name><name><surname>Wu</surname><given-names>Chung-Shien</given-names></name><name><surname>Wang</surname><given-names>Ya-Nan</given-names></name><name><surname>Chaw</surname><given-names>Shu-Miaw</given-names></name></person-group><article-title>Transfer of chloroplast genomic DNA to mitochondrial genome occurred at least 300 MYA</article-title><source>Molecular Biology and Evolution</source><year>2007</year><volume>24</volume><issue>9</issue><fpage>2040</fpage><lpage>2048</lpage><pub-id pub-id-type="pmid">17609537</pub-id></element-citation></ref><ref id="R35"><label>35</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Letunic</surname><given-names>Ivica</given-names></name><name><surname>Bork</surname><given-names>Peer</given-names></name></person-group><article-title>Interactive Tree of Life (iTOL) v6: recent updates to the phylogenetic tree display and annotation tool</article-title><source>Nucleic Acids Research</source><year>2024</year><elocation-id>gkae268</elocation-id><pub-id pub-id-type="pmcid">PMC11223838</pub-id><pub-id pub-id-type="pmid">38613393</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkae268</pub-id></element-citation></ref><ref id="R36"><label>36</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rautiainen</surname><given-names>Mikko</given-names></name><name><surname>Nurk</surname><given-names>Sergey</given-names></name><name><surname>Walenz</surname><given-names>Brian P</given-names></name><name><surname>Logsdon</surname><given-names>Glennis A</given-names></name><name><surname>Porubsky</surname><given-names>David</given-names></name><name><surname>Rhie</surname><given-names>Arang</given-names></name><name><surname>Eichler</surname><given-names>Evan E</given-names></name><name><surname>Phillippy</surname><given-names>Adam M</given-names></name><name><surname>Koren</surname><given-names>Sergey</given-names></name></person-group><article-title>Telomere-to-telomere assembly of diploid chromosomes with Verkko</article-title><source>Nature Biotechnology</source><year>2023</year><volume>41</volume><issue>10</issue><fpage>1474</fpage><lpage>1482</lpage><pub-id pub-id-type="pmcid">PMC10427740</pub-id><pub-id pub-id-type="pmid">36797493</pub-id><pub-id pub-id-type="doi">10.1038/s41587-023-01662-6</pub-id></element-citation></ref><ref id="R37"><label>37</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cheng</surname><given-names>Haoyu</given-names></name><name><surname>Concepcion</surname><given-names>Gregory T</given-names></name><name><surname>Feng</surname><given-names>Xiaowen</given-names></name><name><surname>Zhang</surname><given-names>Haowen</given-names></name><name><surname>Li</surname><given-names>Heng</given-names></name></person-group><article-title>Haplotype-resolved de novo assembly using phased assembly graphs with hifiasm</article-title><source>Nature Methods</source><year>2021</year><volume>18</volume><issue>2</issue><fpage>170</fpage><lpage>175</lpage><pub-id pub-id-type="pmcid">PMC7961889</pub-id><pub-id pub-id-type="pmid">33526886</pub-id><pub-id pub-id-type="doi">10.1038/s41592-020-01056-5</pub-id></element-citation></ref><ref id="R38"><label>38</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nurk</surname><given-names>Sergey</given-names></name><name><surname>Walenz</surname><given-names>Brian P</given-names></name><name><surname>Rhie</surname><given-names>Arang</given-names></name><name><surname>Vollger</surname><given-names>Mitchell R</given-names></name><name><surname>Logsdon</surname><given-names>Glennis A</given-names></name><name><surname>Grothe</surname><given-names>Robert</given-names></name><name><surname>Miga</surname><given-names>Karen H</given-names></name><name><surname>Eichler</surname><given-names>Evan E</given-names></name><name><surname>Phillippy</surname><given-names>Adam M</given-names></name><name><surname>Koren</surname><given-names>Sergey</given-names></name></person-group><article-title>HiCanu: accurate assembly of segmental duplications, satellites, and allelic variants from high-fidelity long reads</article-title><source>Genome Research</source><year>2020</year><volume>30</volume><issue>9</issue><fpage>1291</fpage><lpage>1305</lpage><pub-id pub-id-type="pmcid">PMC7545148</pub-id><pub-id pub-id-type="pmid">32801147</pub-id><pub-id pub-id-type="doi">10.1101/gr.263566.120</pub-id></element-citation></ref><ref id="R39"><label>39</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tillich</surname><given-names>Michael</given-names></name><name><surname>Lehwark</surname><given-names>Pascal</given-names></name><name><surname>Pellizzer</surname><given-names>Tommaso</given-names></name><name><surname>Ulbricht-Jones</surname><given-names>Elena S</given-names></name><name><surname>Fischer</surname><given-names>Axel</given-names></name><name><surname>Bock</surname><given-names>Ralph</given-names></name><name><surname>Greiner</surname><given-names>Stephan</given-names></name></person-group><article-title>GeSeq - versatile and accurate annotation of organelle genomes</article-title><source>Nucleic Acids Research</source><year>2017</year><volume>45</volume><issue>W1</issue><fpage>W6</fpage><lpage>W11</lpage><pub-id pub-id-type="pmcid">PMC5570176</pub-id><pub-id pub-id-type="pmid">28486635</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkx391</pub-id></element-citation></ref><ref id="R40"><label>40</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>Heng</given-names></name></person-group><article-title>Minimap and miniasm: fast mapping and de novo assembly for noisy long sequences</article-title><source>Bioinformatics</source><year>2016</year><volume>32</volume><issue>14</issue><fpage>2103</fpage><lpage>2110</lpage><pub-id pub-id-type="pmcid">PMC4937194</pub-id><pub-id pub-id-type="pmid">27153593</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btw152</pub-id></element-citation></ref><ref id="R41"><label>41</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ukkonen</surname><given-names>Esko</given-names></name></person-group><article-title>Algorithms for approximate string matching</article-title><source>Information and Control</source><year>1985</year><volume>64</volume><issue>1-3</issue><fpage>100</fpage><lpage>118</lpage></element-citation></ref><ref id="R42"><label>42</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Kans</surname><given-names>Jonathan</given-names></name></person-group><chapter-title>Entrez Direct: E-utilities on the UNIX command line</chapter-title><source>Entrez programming utilities help</source><publisher-name>National Center for Biotechnology Information</publisher-name><publisher-loc>USA</publisher-loc><year>2023</year><comment>[Internet]</comment></element-citation></ref><ref id="R43"><label>43</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Katoh</surname><given-names>Kazutaka</given-names></name><name><surname>Misawa</surname><given-names>Kazuharu</given-names></name><name><surname>Kuma</surname><given-names>Kei-ichi</given-names></name><name><surname>Miyata</surname><given-names>Takashi</given-names></name></person-group><article-title>MAFFT: a novel method for rapid multiple sequence alignment based on fast Fourier transform</article-title><source>Nucleic Acids Research</source><year>2002</year><volume>30</volume><issue>14</issue><fpage>3059</fpage><lpage>3066</lpage><pub-id pub-id-type="pmcid">PMC135756</pub-id><pub-id pub-id-type="pmid">12136088</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkf436</pub-id></element-citation></ref><ref id="R44"><label>44</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Eddy</surname><given-names>Sean R</given-names></name></person-group><article-title>Accelerated profile HMM searches</article-title><source>PLoS Computational Biology</source><year>2011</year><volume>7</volume><issue>10</issue><elocation-id>e1002195</elocation-id><pub-id pub-id-type="pmcid">PMC3197634</pub-id><pub-id pub-id-type="pmid">22039361</pub-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1002195</pub-id></element-citation></ref><ref id="R45"><label>45</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sato</surname><given-names>Shusei</given-names></name><name><surname>Nakamura</surname><given-names>Yasukazu</given-names></name><name><surname>Kaneko</surname><given-names>Takakazu</given-names></name><name><surname>Asamizu</surname><given-names>Erika</given-names></name><name><surname>Tabata</surname><given-names>Satoshi</given-names></name></person-group><article-title>Complete structure of the chloroplast genome of Arabidopsis thaliana</article-title><source>DNA research</source><year>1999</year><volume>6</volume><issue>5</issue><fpage>283</fpage><lpage>290</lpage><pub-id pub-id-type="pmid">10574454</pub-id></element-citation></ref><ref id="R46"><label>46</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ranallo-Benavidez</surname><given-names>T Rhyker</given-names></name><name><surname>Jaron</surname><given-names>Kamil S</given-names></name><name><surname>Schatz</surname><given-names>Michael C</given-names></name></person-group><article-title>GenomeScope 2.0 and Smudgeplot for reference-free profiling of polyploid genomes</article-title><source>Nature Communications</source><year>2020</year><volume>11</volume><issue>1</issue><elocation-id>1432</elocation-id><pub-id pub-id-type="pmcid">PMC7080791</pub-id><pub-id pub-id-type="pmid">32188846</pub-id><pub-id pub-id-type="doi">10.1038/s41467-020-14998-3</pub-id></element-citation></ref><ref id="R47"><label>47</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kurtz</surname><given-names>Stefan</given-names></name><name><surname>Phillippy</surname><given-names>Adam</given-names></name><name><surname>Delcher</surname><given-names>Arthur L</given-names></name><name><surname>Smoot</surname><given-names>Michael</given-names></name><name><surname>Shumway</surname><given-names>Martin</given-names></name><name><surname>Antonescu</surname><given-names>Corina</given-names></name><name><surname>Salzberg</surname><given-names>Steven L</given-names></name></person-group><article-title>Versatile and open software for comparing large genomes</article-title><source>Genome Biology</source><year>2004</year><volume>5</volume><fpage>1</fpage><lpage>9</lpage><pub-id pub-id-type="pmcid">PMC395750</pub-id><pub-id pub-id-type="pmid">14759262</pub-id><pub-id pub-id-type="doi">10.1186/gb-2004-5-2-r12</pub-id></element-citation></ref><ref id="R48"><label>48</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rautiainen</surname><given-names>Mikko</given-names></name><name><surname>Marschall</surname><given-names>Tobias</given-names></name></person-group><article-title>GraphAligner: rapid and versatile sequence-to-graph alignment</article-title><source>Genome Biology</source><year>2020</year><volume>21</volume><issue>1</issue><fpage>253</fpage><pub-id pub-id-type="pmcid">PMC7513500</pub-id><pub-id pub-id-type="pmid">32972461</pub-id><pub-id pub-id-type="doi">10.1186/s13059-020-02157-2</pub-id></element-citation></ref><ref id="R49"><label>49</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Minh</surname><given-names>Bui Quang</given-names></name><name><surname>Schmidt</surname><given-names>Heiko A</given-names></name><name><surname>Chernomor</surname><given-names>Olga</given-names></name><name><surname>Schrempf</surname><given-names>Dominik</given-names></name><name><surname>Woodhams</surname><given-names>Michael D</given-names></name><name><surname>Von Haeseler</surname><given-names>Arndt</given-names></name><name><surname>Lanfear</surname><given-names>Robert</given-names></name></person-group><article-title>IQ-TREE 2: new models and efficient methods for phylogenetic inference in the genomic era</article-title><source>Molecular Biology and Evolution</source><year>2020</year><volume>37</volume><issue>5</issue><fpage>1530</fpage><lpage>1534</lpage><pub-id pub-id-type="pmcid">PMC7182206</pub-id><pub-id pub-id-type="pmid">32011700</pub-id><pub-id pub-id-type="doi">10.1093/molbev/msaa015</pub-id></element-citation></ref><ref id="R50"><label>50</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Talevich</surname><given-names>Eric</given-names></name><name><surname>Invergo</surname><given-names>Brandon M</given-names></name><name><surname>Cock</surname><given-names>Peter JA</given-names></name><name><surname>Chapman</surname><given-names>Brad A</given-names></name></person-group><article-title>Bio.Phylo: a unified toolkit for processing, analyzing and visualizing phylogenetic trees in Biopython</article-title><source>BMC Bioinformatics</source><year>2012</year><volume>13</volume><fpage>1</fpage><lpage>9</lpage><pub-id pub-id-type="pmcid">PMC3468381</pub-id><pub-id pub-id-type="pmid">22909249</pub-id><pub-id pub-id-type="doi">10.1186/1471-2105-13-209</pub-id></element-citation></ref></ref-list></back><floats-group><fig id="F1" position="float"><label>Figure 1</label><caption><title>Overview of the Oatk workflow.</title><p><bold>a</bold> Collecting closed syncmers from the HiFi sequence data. The top bar with a solid border represents the sequenced genome, with different sequence blocks depicted by colours. The green regions are two IRs, with orientations indicated by the arrows. The bars with dashed grey borders represent HiFi reads, and those without borders represent closed syncmers collected from the reads, with grey solid bars at their ends representing minimal <italic>s</italic>-mers. The red solid bars represent sequencing errors. The syncmer with the red star represents a non-shared terminal syncmer found at the start of a read. Almost all syncmers harbouring sequencing errors or sequence terminals exhibit low frequencies and can be targeted for error-correcting. <bold>b</bold> Constructing a sparse de Bruijn graph from the closed syncmers. Syncmers from (<bold>a</bold>) are connected if they follow in any read. Figures in blue show the copy number of each syncmer, and in orange the copy number of each connection. <bold>c</bold> Assembly graph of high-copy unitigs from moss <italic>Exsertotheca crispa</italic>. In addition to the organelle genomes, a few repeat fragments and ribosomal DNA remain. <bold>d</bold> Generating the gene annotation table by searching the unitig sequences against the gene profile database. <bold>e</bold> Classifying the graph components by organelle types utilising the gene annotations. The blue, orange and grey components are plastid, mitochondrial and non-organelle units. <bold>f</bold> Resolving each organelle graph component to generate individual genome sequences. There are two candidate optimal paths for the plastid graph component, distinguished by the relative orientation of the two single-copy sequences depicted by the red arrows. The gene orders of the two forms are compared to the gene order of the <italic>Arabidopsis thaliana</italic> reference plastome, and the more similar one is selected as the final sequence.</p></caption><graphic xlink:href="EMS199772-f001"/></fig><fig id="F2" position="float"><label>Figure 2</label><caption><title>Plastome structures.</title><p><bold>a-d</bold> Assembly graphs for four representative structures from the 195 assembled plastomes. The curved bars represent sequences, with the numbers indicating the sequence length and coverage estimated from the syncmer coverage, with the arrow-shaped end indicating the sequence orientation. The thin black lines show the connections between sequences. The assembly graphs were produced using Bandage<sup><xref ref-type="bibr" rid="R33">33</xref></sup> with additional manual adjustments. <bold>a</bold> The <italic>Arabidopsis thaliana</italic> plastome with the regular LSC-IRa-SSC-IRb structure. <bold>b</bold> The <italic>Climacium dendroides</italic> plastome with contracted IRs. <bold>c</bold> The <italic>Calluna vulgaris</italic> plastome with contracted SSC and expanded LSC and IRs, leading to a large genome size of 208 kb. The IR region contains two nested short repeats (C and F) forming a complex structure. <bold>d</bold> The <italic>Medicago arabica</italic> plastome with no IRs. <bold>e</bold> Scatter plots to illustrate the general characteristics of the assembled plastomes as a function of genome size. From top to bottom, the y-axis represents the number of unique protein-coding genes, the total number of protein-coding genes, and the IR, LSC and SSC sizes. The species from the IRLC group are eliminated for the SSC and LSC panels and plotted with value zeros for the IR panel. <bold>f</bold> The number of reads supporting the two differently oriented forms of the plastomes as depicted in <xref ref-type="fig" rid="F1">Fig. 1f</xref>. The 21 species with IRs smaller than 20 kb excluding those from the IRLC group are included in the plot. Each dot represents a species. The black diagonal line indicates identity. <bold>g</bold> The self-alignment of a 15.4 kb HiFi read mapping through the SSC of the <italic>Calluna vulgaris</italic> plastome. The orange and blue lines represent forward and reverse complementary alignments respectively. Referring to <bold>c</bold>, the read maps to the end of IRa (G) for 5.4 kb, then SSC (H) for 2.8 kb, and finally the start of IRb (G from the opposite direction) for 7.2 kb. It should be noted that the SSC size of <italic>Calluna vulgaris</italic> is actually 2,769 bp instead of 5,813 bp as the number depicted in <bold>c</bold> for H. This is because H carries at each end a 1,522 bp sequence belonging to the IRs that forms part of two different syncmers used in the assembly graph construction. <bold>h</bold> Read mapping results in the complex <italic>Calluna vulgaris</italic> IR region grouped by the alignment path. Each block with a label represents a sequence corresponding to those in <bold>c</bold>. Each row represents an alignment path. Each alignment path is followed by a figure indicating the number of reads supporting it. Only reads mapping through this region are counted. Forward mappings (from B to G) and reverse complementary mappings (from G to B) are put into the same group.</p></caption><graphic xlink:href="EMS199772-f002"/></fig><fig id="F3" position="float"><label>Figure 3</label><caption><title>Mitogenome structures.</title><p><bold>a-f</bold> Assembly graphs for five representative structures from the 195 assembled mitogenomes. The assembly graphs were produced and notated as described in <xref ref-type="fig" rid="F2">Fig. 2</xref>. <bold>a</bold> The <italic>Climacium dendroides</italic> mitogenome with a single circular structure. <bold>b</bold> The <italic>Pseudognaphalium luteoalbum</italic> mitogenome with a quadripartite structure featuring an IR. <bold>c</bold> The <italic>Calluna vulgaris</italic> mitocgenome with a quadripartite structure featuring a direct repeat. <bold>d</bold> The <italic>Quercus robur</italic> mitogenome with a complex structure featuring multiple repeats. The genome can be resolved into a single circular structure. <bold>e</bold> The <italic>Erodium maritimum</italic> mitogenome with three components that all can be resolved into circular structures. <bold>f</bold> The <italic>Alnus glutinosa</italic> mitogenome with two components that can be resolved into a circular and a linear structure. <bold>g</bold> Scatter plots to illustrate the unique protein-coding gene number (top panel) and the total protein-coding gene number (bottom panel) in the assembled mitogenomes as a function of genome size. <bold>h</bold> A heat map to illustrate the results of read mapping across the graph junctions O-P (lower triangular) and O-Q (upper triangular) as depicted in <bold>f</bold>. The axes represent the distances to the junction point up to 20 kb, divided into 20 intervals, each spanning 1 kb. Each cell denotes the count of reads covering the respective intervals in two sequences. For instance, the cell at coordinates (3,5) indicates the number of reads spanning the O-P junction and covering both the 3 kb interval on sequence O and 5 kb interval on sequence P. <bold>i</bold> A scatter plot to illustrate the read mapping results on the 165 repeats identified in the assembled genomes that bifurcate bidirectionally. Sequences A to H in panels <bold>b</bold> to <bold>e</bold> exemplify such repeats. It should be noted that the sequences connected to the repeat may originate from the same sequence approached from two directions, as seen in cases A, B, F and H. Let <bold>R</bold> denote the repeat sequence, <bold>IA, IB</bold> two incoming sequences, and <bold>OA, OB</bold> two outgoing sequences. Each grey-shaded rectangle in the plot corresponds to a repeat sequence, with left, right, bottom and top boundaries indicating the number of reads supporting <bold>IA</bold>-<bold>R</bold>-<bold>OA, IB</bold>-<bold>R</bold>-<bold>OB, IA</bold>-<bold>R</bold>-<bold>OB</bold> and <bold>IB</bold>-<bold>R</bold>-<bold>OA</bold>, respectively. <bold>j</bold> A bar chart to illustrate the read mapping results supporting structural heteroplasmy for the graph depicted in <bold>e</bold>. The x-axis categorizes different heteroplasmic subgraph structures: C1 to C4 correspond to four minicircles featured respectively by non-repeat sequences I, J and K, L and M, and N; ‘S’ categories represent supercircles formed by multiple minicircles. For instance, S24 denotes the double-circle structure comprising C2 and C4. A read is considered to support a minicircle if its mapping path covers at least two non-repeat sequences, including covering the same sequence twice (e.g., I-F-I for C1). A read is considered to support a supercircle if it covers at least one non-repeat sequence from each constituent minicircle. A read mapping is classified as linear if it starts and ends with different sequences, and circular if with the same sequence.</p></caption><graphic xlink:href="EMS199772-f003"/></fig><fig id="F4" position="float"><label>Figure 4</label><caption><title>Sequence transfer between organelle genomes.</title><p><bold>a</bold> The <italic>Alnus glutinosa</italic> organelle genome assembly graph before disentangling. The circular component of the mitogenome is omitted from the plot for clarity (<xref ref-type="fig" rid="F3">Fig. 3f</xref>). Plastid sequences are coloured in blue, mitochondrial sequences in orange, and shared sequences in green. The assembly graph was produced and notated as described in <xref ref-type="fig" rid="F2">Fig. 2</xref>. <bold>b</bold> A scatter plot to illustrate the total size of the shared sequences between the plastid and mitochondrial genomes for each species as a function of the mitogenome size. <bold>c</bold> A scatter plot to illustrate the sequence identity for each homologous sequence pair as a function of the size of the shared sequence segment. <bold>d</bold> A phylogenetic tree to illustrate the relationship among 128 homologous <italic>psaA</italic> gene sequences. Each leaf node denotes a sequence, coloured blue or orange to indicate plastid or mitochondrial genomes, respectively. The ToLID group prefix (<ext-link ext-link-type="uri" xlink:href="https://id.tol.sanger.ac.uk">https://id.tol.sanger.ac.uk</ext-link>) is employed to delineate clades. The tree plot was produced using iTOL<sup><xref ref-type="bibr" rid="R35">35</xref></sup> with additional manual adjustments.</p></caption><graphic xlink:href="EMS199772-f004"/></fig><table-wrap id="T1" position="float" orientation="portrait"><label>Table 1</label><caption><title>Organelle genome assembly results of 195 plants.</title></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" valign="bottom" rowspan="2">Plastome</th><th align="center" valign="middle" rowspan="2">Oatk</th><th align="center" valign="middle">Syncasm</th><th align="center" valign="middle" colspan="2">MBG</th><th align="center" valign="middle" colspan="2">PMAT<sup><xref ref-type="table-fn" rid="TFN1">1</xref></sup></th></tr><tr><th align="center" valign="middle" style="border-top: solid thin">GetOrganelle<sup><xref ref-type="table-fn" rid="TFN2">2</xref></sup></th><th align="center" valign="middle" style="border-top: solid thin">Pathfinder<sup><xref ref-type="table-fn" rid="TFN3">3</xref></sup></th><th align="center" valign="middle" style="border-top: solid thin">GetOrganelle<sup><xref ref-type="table-fn" rid="TFN2">2</xref></sup></th><th align="center" valign="middle" style="border-top: solid thin">Pathfinder<sup><xref ref-type="table-fn" rid="TFN3">3</xref></sup></th><th align="center" valign="middle" style="border-top: solid thin">GetOrganelle<sup><xref ref-type="table-fn" rid="TFN2">2</xref></sup></th></tr></thead><tbody><tr><td align="left" valign="middle">Single-circular</td><td align="center" valign="middle">192</td><td align="center" valign="middle">188</td><td align="center" valign="middle">190</td><td align="center" valign="middle">185</td><td align="center" valign="middle">147</td><td align="center" valign="middle">142</td></tr><tr><td align="left" valign="middle">Non-circular</td><td align="center" valign="middle">3</td><td align="center" valign="middle">6</td><td align="center" valign="middle">5</td><td align="center" valign="middle">10</td><td align="center" valign="middle">16</td><td align="center" valign="middle">17</td></tr><tr><td align="left" valign="middle">Failed<sup><xref ref-type="table-fn" rid="TFN4">4</xref></sup></td><td align="center" valign="middle">0</td><td align="center" valign="middle">1</td><td align="center" valign="middle">0</td><td align="center" valign="middle">0</td><td align="center" valign="middle">32</td><td align="center" valign="middle">36</td></tr><tr><td colspan="7" align="left" valign="middle" rowspan="1"><hr/></td></tr><tr><td align="left" valign="middle" colspan="7"><bold>Mitogenome</bold></td></tr><tr><td colspan="7" align="left" valign="middle" rowspan="1"><hr/></td></tr><tr><td align="left" valign="middle">Single-circular</td><td align="center" valign="middle">132</td><td align="center" valign="middle">98</td><td align="center" valign="middle">130</td><td align="center" valign="middle">83</td><td align="center" valign="middle">98</td><td align="center" valign="middle">37</td></tr><tr><td align="left" valign="middle">Multi-circular</td><td align="center" valign="middle">29</td><td align="center" valign="middle">21</td><td align="center" valign="middle">25</td><td align="center" valign="middle">17</td><td align="center" valign="middle">6</td><td align="center" valign="middle">4</td></tr><tr><td align="left" valign="middle">Non-circular<sup><xref ref-type="table-fn" rid="TFN5">5</xref></sup></td><td align="center" valign="middle">34</td><td align="center" valign="middle">67</td><td align="center" valign="middle">40</td><td align="center" valign="middle">90</td><td align="center" valign="middle">59</td><td align="center" valign="middle">110</td></tr><tr><td align="left" valign="middle">Failed<sup><xref ref-type="table-fn" rid="TFN4">4</xref></sup></td><td align="center" valign="middle">0</td><td align="center" valign="middle">9</td><td align="center" valign="middle">0</td><td align="center" valign="middle">5</td><td align="center" valign="middle">32</td><td align="center" valign="middle">44</td></tr></tbody></table><table-wrap-foot><fn id="TFN1"><label>1</label><p id="P54">Only used to generate assembly graphs.</p></fn><fn id="TFN2"><label>2</label><p id="P55">Only used for graph resolution from an input assembly graph.</p></fn><fn id="TFN3"><label>3</label><p id="P56">First ran <italic>hmmannot</italic> to generate annotation results as an input.</p></fn><fn id="TFN4"><label>4</label><p id="P57">Runtime error or reached the 24-hour wall time limit.</p></fn><fn id="TFN5"><label>5</label><p id="P58">Assemblies with multiple components were included if any component was non-circular.</p></fn></table-wrap-foot></table-wrap></floats-group></article>