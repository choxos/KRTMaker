<!DOCTYPE article
 PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">
<article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="preprint"><?all-math-mml yes?><?use-mml?><?origin ukpmcpa?><front><journal-meta><journal-id journal-id-type="nlm-ta">bioRxiv</journal-id><journal-title-group><journal-title>bioRxiv : the preprint server for biology</journal-title></journal-title-group><issn pub-type="epub">2692-8205</issn></journal-meta><article-meta><article-id pub-id-type="manuscript">EMS201589</article-id><article-id pub-id-type="doi">10.1101/2024.11.25.625328</article-id><article-id pub-id-type="archive">PPR947785</article-id><article-version-alternatives><article-version article-version-type="status">preprint</article-version><article-version article-version-type="number">1</article-version></article-version-alternatives><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>Accelerating whole-genome alignment in the age of complete genome assemblies</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Chandra</surname><given-names>Ghanshyam</given-names></name><email>ghanshyamc@iisc.ac.in</email><xref ref-type="aff" rid="A1">1</xref></contrib><contrib contrib-type="author"><name><surname>Vasimuddin</surname><given-names>Md.</given-names></name><email>vasimuddin.md@intel.com</email><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><name><surname>Misra</surname><given-names>Sanchit</given-names></name><email>sanchit.misra@intel.com</email><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><name><surname>Jain</surname><given-names>Chirag</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="corresp" rid="CR1">*</xref></contrib></contrib-group><aff id="A1"><label>1</label>Department of Computational and Data Sciences, <institution-wrap><institution-id institution-id-type="ror">https://ror.org/04dese585</institution-id><institution>Indian Institute of Science</institution></institution-wrap>, <city>Bangalore</city>, <state>KA</state><postal-code>560012</postal-code>, <country country="IN">India</country></aff><aff id="A2"><label>2</label>Parallel Computing Lab, <institution-wrap><institution-id institution-id-type="ror">https://ror.org/04f2n1245</institution-id><institution>Intel Corporation</institution></institution-wrap>, <city>Bangalore</city>, <state>KA</state><postal-code>560103</postal-code>, <country country="IN">India</country></aff><author-notes><corresp id="CR1">
<label>*</label>Corresponding author <email>chirag@iisc.ac.in</email></corresp></author-notes><pub-date pub-type="nihms-submitted"><day>01</day><month>12</month><year>2024</year></pub-date><pub-date pub-type="preprint"><day>28</day><month>11</month><year>2024</year></pub-date><permissions><ali:free_to_read/><license><ali:license_ref>https://creativecommons.org/licenses/by-nc-nd/4.0/</ali:license_ref><license-p>This work is licensed under a <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by-nc-nd/4.0/">CC BY-NC-ND 4.0 International license</ext-link>.</license-p></license></permissions><abstract><p id="P1">Recent advancements in long-read sequencing and assembly methods have ushered in an era of high-quality genome assemblies. Modern assemblies commonly feature megabase-long sequences frequently spanning entire chromosomes. The increase in the assembly contiguity and the reduced number of assembly contigs also implies that whole-genome alignment is no longer an embarrassingly parallel problem. The conventional method of aligning sequences of the query genome in parallel is to utilize a single thread per sequence. This results in poor CPU utilization and long runtimes. In this work, we designed optimizations to accelerate whole-genome alignment on multi-core processors and implemented them in a commonly used aligner, minimap2. Our improvements include a fine-grained parallel chaining method and a fast mechanism for differentiating primary and secondary chains. Our approach accelerates alignment of human, plant, and primate genomes by 1.6× to 7.2× without compromising accuracy.</p></abstract></article-meta></front><body><sec id="S1" sec-type="intro"><label>1</label><title>Introduction</title><p id="P2">Improvements in long-read sequencing technologies have enabled routine assembly of high-quality near-complete genome sequences at affordable costs. Several genome assembly projects, including the Vertebrate Genomes Project [<xref ref-type="bibr" rid="R34">34</xref>], Darwin Tree of Life project [<xref ref-type="bibr" rid="R33">33</xref>], Bat 1K [<xref ref-type="bibr" rid="R40">40</xref>], Human Pangenome Reference Consortium [<xref ref-type="bibr" rid="R24">24</xref>], and the Earth Biogenome Project [<xref ref-type="bibr" rid="R20">20</xref>], have accelerated the rate at which new assemblies are generated and deposited into public databases. Such efforts also underscore the need for fast and automated solutions to facilitate comparison of these sequences at scale and gather new insights into evolution and inter- and intra-species variation.</p><p id="P3">Whole-genome alignment has been a fundamental problem in bioinformatics for over two decades, ever since the initial reconstruction of the first animal and plant genomes [<xref ref-type="bibr" rid="R3">3</xref>, <xref ref-type="bibr" rid="R4">4</xref>, <xref ref-type="bibr" rid="R28">28</xref>]. Commonly used whole-genome alignment tools feature fast algorithms to compute local alignments while accounting for the presence of complex rearrangements, including inversions, transpositions, and duplications [<xref ref-type="bibr" rid="R2">2</xref>]. The classical dynamic programming algorithm requires <italic>O</italic>(<italic>mn</italic>) time, where <italic>m</italic> and <italic>n</italic> are the lengths of two sequences [<xref ref-type="bibr" rid="R38">38</xref>]. As <italic>m</italic> and <italic>n</italic> approach the lengths of entire genomes, the exact algorithm becomes too slow in practice. Accordingly, modern whole-genome alignment tools use different heuristic techniques [<xref ref-type="bibr" rid="R13">13</xref>, <xref ref-type="bibr" rid="R18">18</xref>, <xref ref-type="bibr" rid="R21">21</xref>, <xref ref-type="bibr" rid="R25">25</xref>, <xref ref-type="bibr" rid="R39">39</xref>]. These heuristic techniques are effective in practice; for example, a systematic benchmarking effort of whole-genome aligners on simulated data showed that the available methods exhibit good accuracy when aligning genomes over close evolutionary distances [<xref ref-type="bibr" rid="R8">8</xref>].</p><p id="P4">Over the last few years, the contig lengths of genome assemblies have dramatically increased. Complete or near-complete assemblies of large genomes are now common [<xref ref-type="bibr" rid="R6">6</xref>, <xref ref-type="bibr" rid="R24">24</xref>, <xref ref-type="bibr" rid="R27">27</xref>, <xref ref-type="bibr" rid="R30">30</xref>, <xref ref-type="bibr" rid="R31">31</xref>, <xref ref-type="bibr" rid="R32">32</xref>, <xref ref-type="bibr" rid="R41">41</xref>, <xref ref-type="bibr" rid="R42">42</xref>]. These advancements motivate the need for whole-genome aligners that scale to large, repetitive genomes. Recent efforts on improving the speed of whole-genome alignment involve optimization of data structures [<xref ref-type="bibr" rid="R22">22</xref>, <xref ref-type="bibr" rid="R28">28</xref>] and the use of GPU hardware accelerators [<xref ref-type="bibr" rid="R10">10</xref>, <xref ref-type="bibr" rid="R11">11</xref>, <xref ref-type="bibr" rid="R12">12</xref>].</p><p id="P5">Modern processors feature a large number of cores to enable parallel processing. An efficient use of these cores for parallel processing makes a significant difference to the overall runtime. The input to a whole-genome alignment program is a query genome and a reference genome. Each genome can be assumed to be a collection of DNA sequences, e.g., contigs or scaffolds, with non-uniform sequence lengths. The common way of implementing multi-threading in alignment tools, e.g., in minimap2 [<xref ref-type="bibr" rid="R21">21</xref>, <xref ref-type="bibr" rid="R22">22</xref>], Mummer4 [<xref ref-type="bibr" rid="R28">28</xref>], is to distribute the query sequences across the CPU threads. In this approach, each thread aligns the query sequences assigned to it to the entire reference genome. This approach is simple and efficient for aligning a fragmented genome assembly comprising thousands of contigs, or for aligning a large set of reads. However, the efficiency of this approach drops if the query genome contains a small number of long sequences. For instance, the telomere-to-telomere (T2T) complete genomes contain one sequence per chromosome [<xref ref-type="bibr" rid="R32">32</xref>, <xref ref-type="bibr" rid="R42">42</xref>]. As a result, the current approach results in poor work balance among threads. While using minimap2 to align high-quality genome assemblies of various species, we find an average CPU utilization of less than 7% on a 48-core processor, indicating a wide gap between the actual performance and the theoretical peak performance.</p><p id="P6">In this work, we propose optimizations to accelerate whole-genome aligners on multi-core processors. Our optimizations are applicable to any genome alignment tools which follow <italic>seed-chain-extend</italic> heuristic method [<xref ref-type="bibr" rid="R4">4</xref>, <xref ref-type="bibr" rid="R17">17</xref>, <xref ref-type="bibr" rid="R21">21</xref>, <xref ref-type="bibr" rid="R28">28</xref>]. Seed-chain-extend is a widely used heuristic method that involves (i) computing short exact matches between two genomes called <italic>anchors</italic>, (ii) combining groups of anchors into longer, high-scoring <italic>chains</italic> based on their proximity and relative ordering to one another [<xref ref-type="bibr" rid="R1">1</xref>, <xref ref-type="bibr" rid="R15">15</xref>], (iii) classifying a chain as either <italic>primary</italic> or <italic>secondary</italic> when the same region of the query genome aligns to two regions in the reference [<xref ref-type="bibr" rid="R37">37</xref>], and (iv) computing base-to-base alignments by extending the anchors of each chain. See <xref ref-type="fig" rid="F1">Figure 1</xref> for an illustration. We implemented our optimizations by modifying the minimap2 source code [<xref ref-type="bibr" rid="R21">21</xref>]. We chose minimap2 for implementing and testing the optimizations because (a) minimap2 is among the most widely used whole-genome alignment tools, (b) minimap2 code is well maintained and constantly updated, and (c) it exhibits a good balance between alignment accuracy and computational speed [<xref ref-type="bibr" rid="R36">36</xref>].</p><p id="P7">We profiled the percentage contribution of each step in minimap2 to the total runtime of whole-genome alignment. Our results show that all four steps of the seed-chain-extend workflow contribute significantly to the overall runtime. We implemented multiple optimizations to accelerate these steps. First, we developed a fine-grained parallel algorithm for chaining. Our algorithm enables parallel chaining of a single query sequence using multiple threads. Second, we implemented a fast interval tree-based algorithm for classifying chains as primary or secondary. Third, we replaced sequential sorting routines with parallel sorting to accelerate the seeding stage. Fourth, we optimized the extension stage by using the SIMD (single instruction multiple data)-parallel alignment library based on AVX (advanced vector extensions) intrinsics from our previous work [<xref ref-type="bibr" rid="R16">16</xref>]. Together, these optimizations result in 1.6 −7.2 × speedup for whole-genome alignment while preserving the output accuracy. For example, the original minimap2 implementation requires about 12 hours wall-clock time to align barley genome assembly to the barley reference genome using 48 threads, whereas our implementation, called mm2-plus, takes less than two hours. Accordingly, mm2-plus can offer significant advantage to the users doing genome analysis by reducing genome alignment time and cloud computing costs.</p></sec><sec id="S2" sec-type="results"><label>2</label><title>Results</title><sec id="S3"><title>Experimental setup</title><p id="P8">We developed mm2-plus (<ext-link ext-link-type="uri" xlink:href="https://github.com/at-cg/mm2-plus">https://github.com/at-cg/mm2-plus</ext-link>) on top of minimap2 (v2.28) [<xref ref-type="bibr" rid="R21">21</xref>]. In order to demonstrate the portability of our improvements, we conducted our experiments on four different CPU architectures: Intel<sup>®</sup> Xeon<sup>®</sup> Platinum <monospace>8592+</monospace> (Emerald Rapids), Intel<sup>®</sup> Xeon<sup>®</sup> Platinum <monospace>8480L</monospace> (Sapphire Rapids), Intel<sup>®</sup> Xeon<sup>®</sup> Platinum <monospace>6248R</monospace> (Cascade Lake), and AMD EPYC™ <monospace>7763</monospace> (Milan). The hardware specifications of these systems are provided in <xref ref-type="supplementary-material" rid="SD1">Supplementary Table S1</xref>. We used the following datasets in our evaluation: (a) Barley-Barley, (b) Maize-Maize, (c) Human-Bonobo, and (d) Human-Human. For instance, the Barley-Barley dataset involves aligning a barley genome to another barley genome. Details of these datasets are available in <xref ref-type="table" rid="T1">Table 1</xref> and <xref ref-type="supplementary-material" rid="SD1">Supplementary Table S2</xref>. The contiguity of these genomes is consistent with the quality of the latest genome assemblies, with N50 scaffold lengths exceeding 100 Mbp (<xref ref-type="table" rid="T1">Table 1</xref>). N50 statistic implies half of the genome bases are represented in sequences of this length or greater. One of these datasets (Human-Bonobo) corresponds to an inter-species genome comparison. The remaining are intra-species genome comparisons. We used the default alignment parameters from minimap2 documentation. The commands are also available in <xref ref-type="supplementary-material" rid="SD1">Supplementary Table S3</xref>.</p></sec><sec id="S4"><title>Runtime profile of minimap2</title><p id="P9">We profiled the runtime contribution of various steps that are part of the seed-chain-extend workflow of minimap2. We conducted this experiment using three datasets (a) Barley-Barley, (b) Human-Human, and (c) Human-Bonobo. Minimap2 has four key steps: (1) Seeding step for <italic>computing anchors</italic>, (2) Anchor <italic>chaining</italic>, (3) <italic>Marking primary chains</italic>, and (4) Extension step, i.e., <italic>base-to-base alignment</italic>. In the profile, the remaining time apart from these steps is presented as <italic>miscellaneous</italic>. In the step (1), minimap2 identifies common minimizer <italic>k</italic>-mers [<xref ref-type="bibr" rid="R35">35</xref>] between the reference and query genomes as anchors. This step is followed by the chaining and the extension steps (<xref ref-type="fig" rid="F2">Figure 2A</xref>). In our experiments done using 48 threads of a Cascade Lake CPU, we profiled runtimes of these steps. The steps consuming more than 5% of the total time in Barley-Barley, Human-Human, and Human-Bonobo genome alignments are shown in <xref ref-type="fig" rid="F3">Figure 3</xref>. The profiling results suggest that the algorithms used in all the four steps must be improved to achieve a significant reduction in the overall runtime. Another important observation is that the CPU utilization ranges from 2.27% to 6.62%, suggesting that most processor cores predominantly remain idle during the program execution due to poor load balance among threads. Total runtime (wall clock time) varies from 11.84 hours (Barley-Barley) to 0.33 hours (Human-Human). Barley genome comparisons require significantly more time because barley genomes are longer and more repetitive compared to human genomes [<xref ref-type="bibr" rid="R29">29</xref>].</p></sec><sec id="S5"><title>Overview of our optimizations</title><p id="P10">In the following, we present a summary of the optimizations which we implemented in mm2-plus. More details of these optimizations are provided in Methods. <list list-type="bullet" id="L1"><list-item><p id="P11"><italic>Parallel chaining:</italic> The input to the chaining algorithm is the set of anchors indicating exact matches between the query genome and the reference genome. For a given query sequence, this step is processed sequentially by a single thread in minimap2. We parallelized chaining by partitioning the input set of anchors based on the sequence of the reference genome they lie on. This approach allows independent processing of each partition because a single chain cannot span more than one reference sequence. We use the default chaining algorithm of minimap2 on all partitions, and aggregate the chains identified across all the partitions.</p></list-item><list-item><p id="P12"><italic>Faster algorithm for marking primary chains:</italic> When a segment of a query sequence exhibits multiple alignments to the reference genome, it results in multiple chains overlapping with each other on the coordinates in the query sequence. Minimap2 classifies these chains as either primary or secondary [<xref ref-type="bibr" rid="R21">21</xref>]. Among the overlapping chains, the chain with the highest score is marked as the primary chain and the remaining chains are marked secondary chains. The default algorithm in minimap2 to identify primary chains requires quadratic time in the number of chains. This algorithm takes significant time when the number of chains is large, which commonly happens with large plant genomes that have several repeats and mobile elements. To address this limitation, we implemented a faster algorithm that uses sub-quadratic time in practice by utilizing an interval tree data structure.</p></list-item><list-item><p id="P13"><italic>Faster base-to-base alignment using AVX instructions</italic>: Base-to-base alignment also consumes a significant portion of the total runtime because aligning two sequences requires quadratic time in the length of sequences. By default, minimap2 uses SSE2 (128 bit) instructions for parallel processing using SIMD. We leveraged faster alignment code from our previous work [<xref ref-type="bibr" rid="R16">16</xref>] that uses AVX2 (256 bit) and AVX512 (512 bit) instructions to increase the parallelism. The AVX instructions are commonly supported in modern AMD and Intel CPU architectures.</p></list-item><list-item><p id="P14"><italic>Parallel sorting</italic> : Sorting is frequently used for various tasks in minimap2, for example, to maintain the ordering of anchors based on their coordinates in the reference genome. Minimap2 uses its own sequential algorithm for sorting. In mm2-plus, we replaced sequencing sorting with a parallel sorting algorithm [<xref ref-type="bibr" rid="R5">5</xref>].</p></list-item></list></p><p id="P15">We will discuss the runtime advantage of each optimization in the next section. We also checked the accuracy of alignments using variant calling (<xref ref-type="sec" rid="S10">Methods</xref>). Implementing the above optimizations caused a negligible change to the alignment output (<xref ref-type="supplementary-material" rid="SD1">Supplementary Table S4</xref>). These differences are introduced by subtle changes in the mm2-plus implementation; for example, the sorting algorithm in minimap2 is not stable, whereas the sorting algorithm in mm2-plus is stable.</p></sec><sec id="S6"><title>Performance evaluation</title><p id="P16">We compared the runtime of mm2-plus with minimap2 using four datasets: (A) Barley-Barley, (B) Maize-Maize, (C) Human-Human, and (D) Human-Bonobo. We measured the impact of each optimization, labeled as <italic>O</italic><sub>1</sub> (faster base-to-base alignment using AVX), <italic>O</italic><sub>2</sub> (faster algorithm for marking primary chains), <italic>O</italic><sub>3</sub> (parallel chaining), and <italic>O</italic><sub>4</sub> (parallel sorting). We compared minimap2 baseline method with different versions of mm2-plus in which we enabled the optimizations progressively. In other words, we compared minimap2, mm2-plus (<italic>O</italic><sub>1</sub> enabled), mm2-plus (<italic>O</italic><sub>1</sub> + <italic>O</italic><sub>2</sub> enabled), mm2-plus (<italic>O</italic><sub>1</sub> + <italic>O</italic><sub>2</sub> + <italic>O</italic><sub>3</sub> enabled), and mm2-plus (<italic>O</italic><sub>1</sub> + <italic>O</italic><sub>2</sub> + <italic>O</italic><sub>3</sub> + <italic>O</italic><sub>4</sub> enabled). This experiment is useful to evaluate the advantage of each optimization as well as measure their combined impact. We conducted this experiment using 48 threads on a Cascade Lake CPU. The runtimes are shown in <xref ref-type="fig" rid="F4">Figure 4</xref>.</p><p id="P17">We draw the following conclusions from the results. When all optimizations are enabled, mm2-plus is 1.6 −7.2 × faster than minimap2. In particular, we achieved higher speedups using the plant genomes. Our optimizations <italic>O</italic><sub>2</sub> and <italic>O</italic><sub>3</sub> work better on barley and maize plant genomes because (i) the number of chains computed by minimap2 in these genomes is significantly higher (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S1</xref>) making the interval tree-based implementation for marking primary chains more effective, and (ii) our parallel chaining algorithm based on anchor partitioning works better on these genomes because the anchor positions are scattered across multiple sequences of the corresponding reference genome (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S2</xref>) leading to better thread utilization. Notably, the results highlight that all the optimizations in mm2-plus consistently contribute to reducing runtime across all datasets. The memory-usage of mm2-plus (with all optimizations enabled) and minimap2 are comparable (<xref ref-type="supplementary-material" rid="SD1">Supplementary Figure S3</xref>).</p><p id="P18">We also evaluated the performance of mm2-plus when fewer than 48 threads were used (<xref ref-type="fig" rid="F5">Figure 5</xref>). The results indicate that mm2-plus is consistently faster than minimap2, with the highest speedup achieved using ≥ 16 threads. When we use a single thread only, mm2-plus requires much less time for Barley-Barley and Maize-Maize datasets due to the faster method for marking primary chains. As we increase the thread count, we also see the benefit of parallel chaining. Beyond 16 threads, the runtime of mm2-plus nearly saturates across all datasets. The parallel efficiency of mm2-plus chaining algorithm is affected by the number of sequences in the query and reference genomes, and the distributions of partition size when we split the anchors.</p></sec><sec id="S7"><title>Cross-platform performance and compatibility</title><p id="P19">Our optimizations in mm2-plus are compatible with a range of Intel and AMD CPUs. To demonstrate this, we benchmarked mm2-plus on four architectures: Intel Emerald Rapids, Intel Sapphire Rapids, Intel Cascade Lake, and AMD Milan. These architectures differ in terms of their core counts, SIMD register widths, CPU frequency, cache size, etc. (<xref ref-type="supplementary-material" rid="SD1">Supplementary Table S1</xref>). We carried out this experiment using a single socket of each processor. We achieved similar trend of speedups on all architectures (<xref ref-type="fig" rid="F6">Figure 6</xref>), that is, we find a similar trend of higher speedups on plant genomes compared to animal genomes. Our optimizations of parallel chaining, parallel sorting, and the use of faster algorithm for marking primary chains are hardware-agnostic, that is, they generalize to any multi-core processor. The performance of base-to-base alignment using SIMD is affected by the SIMD register width. For example, Intel supports AVX2 (256 bit) and AVX512 (512 bit) instructions, whereas AMD supports only AVX2 instructions. With all the optimizations combined, we achieved higher speedup on Intel processors compared to AMD. On Intel processors, the speedup numbers improved with the newer generations of architecture, that is, from Cascade Lake to Emerald Rapids.</p></sec><sec id="S8"><title>Support for accelerated execution of other use-cases of minimap2</title><p id="P20">Minimap2 supports a variety of alignment applications besides whole-genome alignment, including long-read mapping for genome resequencing and all-vs-all read alignments for <italic>de novo</italic> assembly. We have ensured that mm2-plus can be useful for faster execution of these applications too. Accordingly, we ported all optimizations from our earlier work, mm2-fast [<xref ref-type="bibr" rid="R16">16</xref>], to mm2-plus as well. These included SIMD-parallel chaining and SIMD-parallel base-to-base alignment [<xref ref-type="bibr" rid="R16">16</xref>]. We further added dynamic load balancing to account for non-uniform lengths of long reads. Therefore, mm2-plus delivers significant speedup over minimap2 across a range of alignment use cases. We benchmarked mm2-plus, mm2-fast [<xref ref-type="bibr" rid="R16">16</xref>], and minimap2 [<xref ref-type="bibr" rid="R21">21</xref>] for long-read mapping and all-vs-all read alignment tasks by using PacBio Hifi, Nanopore simplex, Nanopore duplex, and Nanopore ultra-long datasets from HG002 human genome (<xref ref-type="supplementary-material" rid="SD1">Supplementary Table S5</xref>). We used 48 threads of Cascade Lake CPU in this experiment. We demonstrate that mm2-fast and mm2-plus are faster than minimap2 across all use cases (<xref ref-type="fig" rid="F7">Figure 7</xref>). The speedup of mm2-plus over minimap2 ranges from 1.32 × to 1.95 ×. We occasionally see small improvements in mm2-plus over mm2-fast due to our addition of dynamic load balancing.</p></sec></sec><sec id="S9" sec-type="discussion"><label>3</label><title>Discussion</title><p id="P21">Alignment of genome sequences is a routine computational task to study genome evolution across the tree of life. Within a species, alignments of fully phased genome assemblies enable discovery of the full spectrum of genetic variation [<xref ref-type="bibr" rid="R9">9</xref>, <xref ref-type="bibr" rid="R26">26</xref>]. Improvements in per-base sequencing cost and accuracy are driving the increased adoption of long-read sequencing technologies in genomics. The number of genome assemblies to be analyzed is expected to increase proportionally. Furthermore, the assemblies generated using the latest long-read technologies comprise longer and fewer sequences, when compared to the assemblies generated from short-reads or noisy long reads [<xref ref-type="bibr" rid="R19">19</xref>]. In this work, we highlighted that the common approach for parallelizing genome alignment on multi-core processors is sub-optimal for aligning complete and near-complete assemblies. The parallelism available at the level of query sequences is limited, raising a need for an alternative approach.</p><p id="P22">We exclusively focused on improving one of the widely used genome aligners, minimap2 [<xref ref-type="bibr" rid="R21">21</xref>]. Our results revealed that the CPU utilization of minimap2 is consistently low across multiple datasets. To alleviate this, we developed mm2-plus by improving the various time consuming components of minimap2. We implemented several optimizations in mm2-plus that helped us achieve faster runtime without affecting the quality of alignments. These included faster algorithms for chaining, marking of primary chains, sorting and base-to-base alignment. Implementing these optimizations required a thorough understanding of the minimap2 source code, which was particularly challenging given that minimap2 consists of over 10,000 lines of C code. This paper also complements our earlier work on accelerating long-read mapping [<xref ref-type="bibr" rid="R16">16</xref>]. To make it convenient for users, we have ported the optimizations from [<xref ref-type="bibr" rid="R16">16</xref>] into mm2-plus. Therefore, mm2-plus can be utilized not only for whole-genome alignment but also for fast long-read mapping and all-vs-all read alignment. We have ensured that the output accuracy matches the accuracy of minimap2 (v2.28). Therefore, in any genomics workflow wherever alignment tasks are a bottleneck, users may benefit from using mm2-plus.</p><p id="P23">We expect our improvements to have a wider applicability beyond minimap2. Importantly, our optimiza-tions can be adapted for any alignment method that employs seed-chain-extend heuristics. The proposed ideas could also be useful for accelerating pangenome graph construction because the graph construction requires progressive alignment of high-quality genome assemblies to intermediate pangenome graphs [<xref ref-type="bibr" rid="R14">14</xref>, <xref ref-type="bibr" rid="R23">23</xref>].</p></sec><sec id="S10" sec-type="methods"><label>4</label><title>Methods</title><sec id="S11"><title>Faster parallel algorithm for chaining</title><p id="P24">The input to the chaining algorithm is a set of anchors, that is, short exact matches, between query sequences and the reference genome. The output of this step is a set of chains, where each chain comprises multiple anchors that can be combined to obtain a high-scoring alignment. In minimap2, sequences of the query genome are processed in batches. The query sequences in a batch are processed independently in parallel by utilizing one thread per sequence. The count of the query sequences in a batch depends on the batch size. The default batch size in minimap2 is 500 million bases. Processing a query genome in multiple batches rather than all the sequences at once helps in controlling the memory-usage.</p><p id="P25">Chaining of anchors is done using a dynamic programming algorithm, requiring <italic>O</italic>(<italic>N</italic> log <italic>N</italic>) time, where <italic>N</italic> denotes the number of anchors [<xref ref-type="bibr" rid="R1">1</xref>, <xref ref-type="bibr" rid="R15">15</xref>]. Minimap2 uses a range-tree-based implementation for chaining [<xref ref-type="bibr" rid="R22">22</xref>]. The chaining step consumes a significant fraction of the overall time, as indicated by the profiling results (<xref ref-type="fig" rid="F3">Figure 3</xref>). In mm2-plus, we ensured that the processing of each query sequence is parallelized across threads to achieve better CPU utilization and runtime. Note that each anchor is denoted by its (i) position on the query genome, (ii) position on the reference genome, and (iii) length of the match. Given the set of anchors from a query sequence, our parallel algorithm works by partitioning the anchors according to the reference genome sequence they match with. The number of partitions created equals the number of sequences in the reference genome. Subsequently, we perform independent chaining on each partition. This procedure does not affect the correctness because a chain cannot span over more than one reference sequence. We distribute the partitions across threads to perform chaining. We use dynamic assignment of the threads to each partition to handle non-uniform distribution of anchors across the reference sequences. We implemented this strategy to accelerate both the recursion and traceback phases of dynamic programming.</p></sec><sec id="S12"><title>Marking primary chains</title><p id="P26">The distinction between primary and secondary chains is required when a segment of a query genome aligns to two or more positions in the reference genome (<xref ref-type="fig" rid="F1">Figure 1B</xref>). The output of the chaining algorithm is an array of anchor chains, denoted as <italic>C</italic>. Array <italic>C</italic> is ordered in descending order of the chain scores. Suppose the number of chains in <italic>C</italic> is <italic>n</italic>. We can identify the start and end coordinates of a chain over the query genome using the query start coordinate of the first anchor and the query end coordinate of the last anchor in the chain, respectively. For a chain <italic>c</italic>, let us denote <italic>c</italic>.<italic>s</italic> and <italic>c</italic>.<italic>e</italic> as its query start and query end coordinates, respectively. If there exist two or more chains having significant overlaps with each other, then the chain with the highest score is considered primary in minimap2, and the others are considered secondary. Before discussing our interval tree-based implementation, we review the quadratic-time algorithm used in minimap2.</p><p id="P27">For two chains <italic>c</italic><sub><italic>i</italic></sub> and <italic>c</italic><sub><italic>j</italic></sub>, their <italic>overlap fraction</italic> is the ratio of their overlap length and the length of the shorter chain. Mathematically, we can write this as the ratio of max (0, min(<italic>c</italic><sub><italic>i</italic></sub>.<italic>e, c</italic><sub><italic>j</italic></sub>.<italic>e</italic>)− max(<italic>c</italic><sub><italic>i</italic></sub>.<italic>s, c</italic><sub><italic>j</italic></sub>.<italic>s</italic>)) to min(<italic>c</italic><sub><italic>i</italic></sub>.<italic>e</italic> − <italic>c</italic><sub><italic>i</italic></sub>.<italic>s, c</italic><sub><italic>j</italic></sub>.<italic>e</italic>− <italic>c</italic><sub><italic>j</italic></sub>.<italic>s</italic>). The algorithm in minimap2 works as following. Let us denote the set of primary chains as <italic>Q</italic>. Set <italic>Q</italic> is initially empty. We add the first chain from<italic>C</italic>, i.e., the highest-scoring chain to <italic>Q</italic>. Subsequently, we consider the remaining chains in <italic>C</italic> [2..<italic>n</italic>] sequentially. Chain<italic>C</italic> [<italic>i</italic>] is marked as secondary if there exists a chain in <italic>Q</italic> that has an overlap fraction above 0.5 with<italic>C</italic> [<italic>i</italic>]. Otherwise, <italic>C</italic> [<italic>i</italic>] is marked as primary and added to set <italic>Q</italic>. Each iteration of the algorithm linearly scans set <italic>Q</italic>. Accordingly, this algorithm requires <italic>O</italic>(<italic>n</italic><sup>2</sup>) time in the worse-case because |<italic>Q</italic> | can be as large as <italic>n</italic>.</p><p id="P28">In our implementation, we utilize an interval tree to avoid linear scans of <italic>Q</italic>. Interval tree is a standard data structure to store intervals. An interval tree comprising <italic>m</italic> intervals supports (i) addition of a new interval in <italic>O</italic>(log <italic>m</italic>) time, and (b) querying of all intervals that intersect with any given interval in <italic>O</italic>(log <italic>m</italic> + <italic>k</italic>) time, where <italic>k</italic> denotes the number of intervals produced by the query [<xref ref-type="bibr" rid="R7">7</xref>]. In mm2-plus, we use the same approach as minimap2, but maintain the intervals associated with the chains of set <italic>Q</italic> in an interval tree. While processing chain <italic>C</italic> [<italic>i</italic>], we retrieve all the overlapping intervals in <italic>Q</italic> by making a query in the tree. As a result, each iteration now takes <italic>O</italic>(log | <italic>Q</italic> | + <italic>k</italic>) time. In our experiments, we found <italic>k</italic> ≪ <italic>n</italic>. Accordingly, this approach uses (<italic>n</italic> log <italic>n</italic>) time in practice.</p></sec><sec id="S13"><title>Accuracy validation</title><p id="P29">We evaluated the accuracy of genome alignments produced by mm2-plus using variant calling. For each dataset (Barley-Barley, Maize-Maize, Human-Human, Human-Bonobo), we used the alignment between the query genome and the reference genome to call variant using paftools (Commit: 0cc3cdc; <ext-link ext-link-type="uri" xlink:href="https://github.com/lh3/minimap2/tree/master/misc">https://github.com/lh3/minimap2/tree/master/misc</ext-link>). Paftools looks at the base-level differences in the sequence alignments and outputs substitution, insertion, and deletion variants. It considers both small and large variants. We assumed ground truth as the set of variants obtained from minimap2 whole-genome alignments. Subsequently, we measured the accuracy of variants derived from mm2-plus whole-genome alignments using bcftools (v1.20-58-gf6ac1c22; <ext-link ext-link-type="uri" xlink:href="https://github.com/samtools/bcftools">https://github.com/samtools/bcftools</ext-link>). The commands used for running paftools and bcftools are listed in <xref ref-type="supplementary-material" rid="SD1">Supplementary Table S3</xref>.</p></sec></sec><sec sec-type="supplementary-material" id="SM"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="SD1"><label>Supplementary Material</label><media xlink:href="EMS2015899-supplement-Supplementary_Material.pdf" mimetype="application" mime-subtype="pdf" id="d205aAcEbB" position="anchor"/></supplementary-material></sec></body><back><ack id="S14"><title>Acknowledgements</title><p>This research is funded in part by the DBT/Wellcome Trust India Alliance Fellowship (grant number IA/I/23/2/506979), the Intel India Research Fellowship, and the National Supercomputing Mission India. We utilized computing resources available at the Indian Institute of Science, Intel Corporation, and the U.S. National Energy Research Scientific Computing Center.</p></ack><fn-group><fn id="FN1" fn-type="conflict"><p id="P30"><bold>Competing Interests</bold></p><p id="P31">V.M. and S.M. are employees of Intel Corporation.</p></fn><fn id="FN2"><p id="P32">Optimization Notice: Software and workloads used in performance tests may have been optimized for performance only on Intel microprocessors. Performance tests, such as SYSmark and MobileMark, are measured using specific computer systems, components, software, operations and functions. Any change to any of those factors may cause the results to vary. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases, including the performance of that product when combined with other products. For more information go to <ext-link ext-link-type="uri" xlink:href="http://www.intel.com/performance">http://www.intel.com/performance</ext-link>. Intel, Xeon, and Intel Xeon Phi are trademarks of Intel Corporation in the U.S. and/or other countries.</p></fn></fn-group><ref-list><ref id="R1"><label>[1]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Abouelhoda</surname><given-names>Mohamed Ibrahim</given-names></name><name><surname>Ohlebusch</surname><given-names>Enno</given-names></name></person-group><article-title>Chaining algorithms for multiple genome comparison</article-title><source>Journal of Discrete Algorithms</source><year>2005</year><volume>3</volume><issue>2-4</issue><fpage>321</fpage><lpage>341</lpage></element-citation></ref><ref id="R2"><label>[2]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Armstrong</surname><given-names>Joel</given-names></name><name><surname>Fiddes</surname><given-names>Ian T</given-names></name><name><surname>Diekhans</surname><given-names>Mark</given-names></name><name><surname>Paten</surname><given-names>Benedict</given-names></name></person-group><article-title>Whole-genome alignment and comparative annotation</article-title><source>Annual review of animal biosciences</source><year>2019</year><volume>7</volume><issue>1</issue><fpage>41</fpage><lpage>64</lpage><pub-id pub-id-type="pmcid">PMC6450745</pub-id><pub-id pub-id-type="pmid">30379572</pub-id><pub-id pub-id-type="doi">10.1146/annurev-animal-020518-115005</pub-id></element-citation></ref><ref id="R3"><label>[3]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bray</surname><given-names>Nick</given-names></name><name><surname>Dubchak</surname><given-names>Inna</given-names></name><name><surname>Pachter</surname><given-names>Lior</given-names></name></person-group><article-title>Avid: A global alignment program</article-title><source>Genome research</source><year>2003</year><volume>13</volume><issue>1</issue><fpage>97</fpage><lpage>102</lpage><pub-id pub-id-type="pmcid">PMC430967</pub-id><pub-id pub-id-type="pmid">12529311</pub-id><pub-id pub-id-type="doi">10.1101/gr.789803</pub-id></element-citation></ref><ref id="R4"><label>[4]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Brudno</surname><given-names>Michael</given-names></name><name><surname>Do</surname><given-names>Chuong B</given-names></name><name><surname>Cooper</surname><given-names>Gregory M</given-names></name><name><surname>Kim</surname><given-names>Michael F</given-names></name><name><surname>Davydov</surname><given-names>Eugene</given-names></name><collab>NISC Comparative Sequencing Program</collab><name><surname>Green</surname><given-names>Eric D</given-names></name><name><surname>Sidow</surname><given-names>Arend</given-names></name><name><surname>Batzoglou</surname><given-names>Serafim</given-names></name></person-group><article-title>Lagan and multi-lagan: Efficient tools for large-scale multiple alignment of genomic dna</article-title><source>Genome Research</source><year>2003</year><month>March</month><volume>13</volume><issue>4</issue><fpage>721</fpage><lpage>731</lpage><pub-id pub-id-type="pmcid">PMC430158</pub-id><pub-id pub-id-type="pmid">12654723</pub-id><pub-id pub-id-type="doi">10.1101/gr.926603</pub-id></element-citation></ref><ref id="R5"><label>[5]</label><element-citation publication-type="web"><person-group person-group-type="author"><name><surname>Carlini</surname><given-names>Paolo</given-names></name><etal/></person-group><source>The GNU C++ library manual</source><year>2023</year><comment><ext-link ext-link-type="uri" xlink:href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/parallel_mode_using.html">https://gcc.gnu.org/onlinedocs/libstdc++/manual/parallel_mode_using.html</ext-link></comment></element-citation></ref><ref id="R6"><label>[6]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chen</surname><given-names>Jian</given-names></name><name><surname>Wang</surname><given-names>Zijian</given-names></name><name><surname>Tan</surname><given-names>Kaiwen</given-names></name><name><surname>Huang</surname><given-names>Wei</given-names></name><etal/></person-group><article-title>A complete telomere-to-telomere assembly of the maize genome</article-title><source>Nature Genetics</source><year>2023</year><month>June</month><volume>55</volume><issue>7</issue><fpage>1221</fpage><lpage>1231</lpage><pub-id pub-id-type="pmcid">PMC10335936</pub-id><pub-id pub-id-type="pmid">37322109</pub-id><pub-id pub-id-type="doi">10.1038/s41588-023-01419-6</pub-id></element-citation></ref><ref id="R7"><label>[7]</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>de Berg</surname><given-names>Mark</given-names></name><name><surname>Cheong</surname><given-names>Otfried</given-names></name><name><surname>van Kreveld</surname><given-names>Marc</given-names></name><name><surname>Overmars</surname><given-names>Mark</given-names></name></person-group><source>Computational Geometry: Algorithms and Applications</source><publisher-name>Springer Berlin Heidelberg</publisher-name><year>2008</year></element-citation></ref><ref id="R8"><label>[8]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Earl</surname><given-names>Dent</given-names></name><name><surname>Nguyen</surname><given-names>Ngan</given-names></name><name><surname>Hickey</surname><given-names>Glenn</given-names></name><name><surname>Harris</surname><given-names>Robert S</given-names></name><name><surname>Fitzgerald</surname><given-names>Stephen</given-names></name><name><surname>Beal</surname><given-names>Kathryn</given-names></name><name><surname>Seledtsov</surname><given-names>Igor</given-names></name><name><surname>Molodtsov</surname><given-names>Vladimir</given-names></name><name><surname>Raney</surname><given-names>Brian J</given-names></name><name><surname>Clawson</surname><given-names>Hiram</given-names></name><etal/></person-group><article-title>Alignathon: a competitive assessment of whole-genome alignment methods</article-title><source>Genome research</source><year>2014</year><volume>24</volume><issue>12</issue><fpage>2077</fpage><lpage>2089</lpage><pub-id pub-id-type="pmcid">PMC4248324</pub-id><pub-id pub-id-type="pmid">25273068</pub-id><pub-id pub-id-type="doi">10.1101/gr.174920.114</pub-id></element-citation></ref><ref id="R9"><label>[9]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ebert</surname><given-names>Peter</given-names></name><name><surname>Audano</surname><given-names>Peter A</given-names></name><name><surname>Zhu</surname><given-names>Qihui</given-names></name><name><surname>Rodriguez-Martin</surname><given-names>Bernardo</given-names></name><name><surname>Porubsky</surname><given-names>David</given-names></name><name><surname>Bonder</surname><given-names>Marc Jan</given-names></name><name><surname>Sulovari</surname><given-names>Arvis</given-names></name><name><surname>Ebler</surname><given-names>Jana</given-names></name><name><surname>Zhou</surname><given-names>Weichen</given-names></name><name><surname>Mari</surname><given-names>Rebecca Serra</given-names></name><etal/></person-group><article-title>Haplotype-resolved diverse human genomes and integrated analysis of structural variation</article-title><source>Science</source><year>2021</year><volume>372</volume><issue>6537</issue><elocation-id>eabf7117</elocation-id><pub-id pub-id-type="pmcid">PMC8026704</pub-id><pub-id pub-id-type="pmid">33632895</pub-id><pub-id pub-id-type="doi">10.1126/science.abf7117</pub-id></element-citation></ref><ref id="R10"><label>[10]</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Goenka</surname><given-names>Sneha D</given-names></name><name><surname>Turakhia</surname><given-names>Yatish</given-names></name><name><surname>Paten</surname><given-names>Benedict</given-names></name><name><surname>Horowitz</surname><given-names>Mark</given-names></name></person-group><source>Segalign: A scalable gpu-based whole genome aligner</source><conf-name>SC20: International Conference for High Performance Computing, Networking, Storage and Analysis</conf-name><conf-sponsor>IEEE</conf-sponsor><year>2020</year><month>November</month><volume>100</volume><fpage>1</fpage><lpage>13</lpage></element-citation></ref><ref id="R11"><label>[11]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gulhan</surname><given-names>Burak</given-names></name><name><surname>Burhans</surname><given-names>Richard</given-names></name><name><surname>Harris</surname><given-names>Robert</given-names></name><name><surname>Kandemir</surname><given-names>Mahmut</given-names></name><name><surname>Haeussler</surname><given-names>Maximilian</given-names></name><name><surname>Nekrutenko</surname><given-names>Anton</given-names></name></person-group><article-title>Kegalign: Optimizing pairwise alignments with diagonal partitioning</article-title><source>bioRxiv</source><year>2024</year><elocation-id>2024-09</elocation-id></element-citation></ref><ref id="R12"><label>[12]</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Gundabolu</surname><given-names>Sree Charan</given-names></name><name><surname>Vijaykumar</surname><given-names>TN</given-names></name><name><surname>Thottethodi</surname><given-names>Mithuna</given-names></name></person-group><source>Fastz: accelerating gapped whole genome alignment on gpus</source><conf-name>Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis</conf-name><year>2021</year><fpage>1</fpage><lpage>13</lpage></element-citation></ref><ref id="R13"><label>[13]</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Harris</surname><given-names>Robert S</given-names></name></person-group><source>Improved pairwise alignment of genomic DNA</source><publisher-name>Ph.d. thesis, The Pennsylvania State University</publisher-name><year>2007</year></element-citation></ref><ref id="R14"><label>[14]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hickey</surname><given-names>Glenn</given-names></name><name><surname>Monlong</surname><given-names>Jean</given-names></name><name><surname>Ebler</surname><given-names>Jana</given-names></name><name><surname>Novak</surname><given-names>Adam M</given-names></name><name><surname>Eizenga</surname><given-names>Jordan M</given-names></name><name><surname>Gao</surname><given-names>Yan</given-names></name><name><surname>Marschall</surname><given-names>Tobias</given-names></name><name><surname>Li</surname><given-names>Heng</given-names></name><name><surname>Paten</surname><given-names>Benedict</given-names></name></person-group><article-title>Pangenome graph construction from genome alignments with minigraph-cactus</article-title><source>Nature biotechnology</source><year>2024</year><volume>42</volume><issue>4</issue><fpage>663</fpage><lpage>673</lpage><pub-id pub-id-type="pmcid">PMC10638906</pub-id><pub-id pub-id-type="pmid">37165083</pub-id><pub-id pub-id-type="doi">10.1038/s41587-023-01793-w</pub-id></element-citation></ref><ref id="R15"><label>[15]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Jain</surname><given-names>Chirag</given-names></name><name><surname>Gibney</surname><given-names>Daniel</given-names></name><name><surname>Thankachan</surname><given-names>Sharma V</given-names></name></person-group><article-title>Algorithms for colinear chaining with overlaps and gap costs</article-title><source>Journal of Computational Biology</source><year>2022</year><volume>29</volume><issue>11</issue><fpage>1237</fpage><lpage>1251</lpage><pub-id pub-id-type="pmid">36351202</pub-id></element-citation></ref><ref id="R16"><label>[16]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kalikar</surname><given-names>Saurabh</given-names></name><name><surname>Jain</surname><given-names>Chirag</given-names></name><name><surname>Vasimuddin</surname><given-names>Md</given-names></name><name><surname>Misra</surname><given-names>Sanchit</given-names></name></person-group><article-title>Accelerating minimap2 for long-read sequencing applications on modern cpus</article-title><source>Nature Computational Science</source><year>2022</year><month>February</month><volume>2</volume><issue>2</issue><fpage>78</fpage><lpage>83</lpage><pub-id pub-id-type="pmid">38177520</pub-id></element-citation></ref><ref id="R17"><label>[17]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kent</surname><given-names>W James</given-names></name><name><surname>Baertsch</surname><given-names>Robert</given-names></name><name><surname>Hinrichs</surname><given-names>Angie</given-names></name><name><surname>Miller</surname><given-names>Webb</given-names></name><name><surname>Haussler</surname><given-names>David</given-names></name></person-group><article-title>Evolution’s caul-dron: duplication, deletion, and rearrangement in the mouse and human genomes</article-title><source>Proceedings of the National Academy of Sciences</source><year>2003</year><volume>100</volume><issue>20</issue><fpage>11484</fpage><lpage>11489</lpage><pub-id pub-id-type="pmcid">PMC208784</pub-id><pub-id pub-id-type="pmid">14500911</pub-id><pub-id pub-id-type="doi">10.1073/pnas.1932072100</pub-id></element-citation></ref><ref id="R18"><label>[18]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kiełbasa</surname><given-names>Szymon M</given-names></name><name><surname>Wan</surname><given-names>Raymond</given-names></name><name><surname>Sato</surname><given-names>Kengo</given-names></name><etal/></person-group><article-title>Adaptive seeds tame genomic sequence comparison</article-title><source>Genome Research</source><year>2011</year><month>January</month><volume>21</volume><issue>3</issue><fpage>487</fpage><lpage>493</lpage><pub-id pub-id-type="pmcid">PMC3044862</pub-id><pub-id pub-id-type="pmid">21209072</pub-id><pub-id pub-id-type="doi">10.1101/gr.113985.110</pub-id></element-citation></ref><ref id="R19"><label>[19]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kovaka</surname><given-names>Sam</given-names></name><name><surname>Ou</surname><given-names>Shujun</given-names></name><name><surname>Jenike</surname><given-names>Katharine M</given-names></name><name><surname>Schatz</surname><given-names>Michael C</given-names></name></person-group><article-title>Approaching complete genomes, transcriptomes and epi-omes with accurate long-read sequencing</article-title><source>Nature methods</source><year>2023</year><volume>20</volume><issue>1</issue><fpage>12</fpage><lpage>16</lpage><pub-id pub-id-type="pmcid">PMC10068675</pub-id><pub-id pub-id-type="pmid">36635537</pub-id><pub-id pub-id-type="doi">10.1038/s41592-022-01716-8</pub-id></element-citation></ref><ref id="R20"><label>[20]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lewin</surname><given-names>Harris A</given-names></name><name><surname>Robinson</surname><given-names>Gene E</given-names></name><name><surname>Kress</surname><given-names>W John</given-names></name><name><surname>Baker</surname><given-names>William J</given-names></name><name><surname>Coddington</surname><given-names>Jonathan</given-names></name><name><surname>Crandall</surname><given-names>Keith A</given-names></name><name><surname>Durbin</surname><given-names>Richard</given-names></name><name><surname>Edwards</surname><given-names>Scott V</given-names></name><name><surname>Forest</surname><given-names>Félix</given-names></name><name><surname>Gilbert</surname><given-names>M Thomas P</given-names></name><etal/></person-group><article-title>Earth biogenome project: Sequencing life for the future of life</article-title><source>Proceedings of the National Academy of Sciences</source><year>2018</year><volume>115</volume><issue>17</issue><fpage>4325</fpage><lpage>4333</lpage><pub-id pub-id-type="pmcid">PMC5924910</pub-id><pub-id pub-id-type="pmid">29686065</pub-id><pub-id pub-id-type="doi">10.1073/pnas.1720115115</pub-id></element-citation></ref><ref id="R21"><label>[21]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>Heng</given-names></name></person-group><article-title>Minimap2: pairwise alignment for nucleotide sequences</article-title><source>Bioinformatics</source><year>2018</year><month>May</month><volume>34</volume><issue>18</issue><fpage>3094</fpage><lpage>3100</lpage><pub-id pub-id-type="pmcid">PMC6137996</pub-id><pub-id pub-id-type="pmid">29750242</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/bty191</pub-id></element-citation></ref><ref id="R22"><label>[22]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>Heng</given-names></name></person-group><article-title>New strategies to improve minimap2 alignment accuracy</article-title><source>Bioinformatics</source><year>2021</year><volume>37</volume><issue>23</issue><fpage>4572</fpage><lpage>4574</lpage><pub-id pub-id-type="pmcid">PMC8652018</pub-id><pub-id pub-id-type="pmid">34623391</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btab705</pub-id></element-citation></ref><ref id="R23"><label>[23]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>Heng</given-names></name><name><surname>Feng</surname><given-names>Xiaowen</given-names></name><name><surname>Chu</surname><given-names>Chong</given-names></name></person-group><article-title>The design and construction of reference pangenome graphs with minigraph</article-title><source>Genome biology</source><year>2020</year><volume>21</volume><fpage>1</fpage><lpage>19</lpage><pub-id pub-id-type="pmcid">PMC7568353</pub-id><pub-id pub-id-type="pmid">33066802</pub-id><pub-id pub-id-type="doi">10.1186/s13059-020-02168-z</pub-id></element-citation></ref><ref id="R24"><label>[24]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Liao</surname><given-names>Wen-Wei</given-names></name><name><surname>Asri</surname><given-names>Mobin</given-names></name><name><surname>Ebler</surname><given-names>Jana</given-names></name><name><surname>Doerr</surname><given-names>Daniel</given-names></name><name><surname>Haukness</surname><given-names>Marina</given-names></name><name><surname>Hickey</surname><given-names>Glenn</given-names></name><name><surname>Lu</surname><given-names>Shuangjia</given-names></name><name><surname>Lucas</surname><given-names>Julian K</given-names></name><name><surname>Monlong</surname><given-names>Jean</given-names></name><name><surname>Abel</surname><given-names>Haley J</given-names></name><etal/></person-group><article-title>A draft human pangenome reference</article-title><source>Nature</source><year>2023</year><volume>617</volume><issue>7960</issue><fpage>312</fpage><lpage>324</lpage><pub-id pub-id-type="pmcid">PMC10172123</pub-id><pub-id pub-id-type="pmid">37165242</pub-id><pub-id pub-id-type="doi">10.1038/s41586-023-05896-x</pub-id></element-citation></ref><ref id="R25"><label>[25]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lin</surname><given-names>Hsin-Nan</given-names></name><name><surname>Hsu</surname><given-names>Wen-Lian</given-names></name></person-group><article-title>Gsalign: an efficient sequence alignment tool for intra-species genomes</article-title><source>BMC Genomics</source><year>2020</year><month>February</month><volume>21</volume><issue>1</issue><pub-id pub-id-type="pmcid">PMC7041101</pub-id><pub-id pub-id-type="pmid">32093618</pub-id><pub-id pub-id-type="doi">10.1186/s12864-020-6569-1</pub-id></element-citation></ref><ref id="R26"><label>[26]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Liu</surname><given-names>Yichen Henry</given-names></name><name><surname>Luo</surname><given-names>Can</given-names></name><name><surname>Golding</surname><given-names>Staunton G</given-names></name><name><surname>Ioffe</surname><given-names>Jacob B</given-names></name><name><surname>Zhou</surname><given-names>Xin Maizie</given-names></name></person-group><article-title>Tradeoffs in alignment and assembly-based methods for structural variant detection with long-read sequencing data</article-title><source>Nature Communications</source><year>2024</year><volume>15</volume><issue>1</issue><elocation-id>2447</elocation-id><pub-id pub-id-type="pmcid">PMC10951360</pub-id><pub-id pub-id-type="pmid">38503752</pub-id><pub-id pub-id-type="doi">10.1038/s41467-024-46614-z</pub-id></element-citation></ref><ref id="R27"><label>[27]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Logsdon</surname><given-names>Glennis A</given-names></name><name><surname>Ebert</surname><given-names>Peter</given-names></name><name><surname>Audano</surname><given-names>Peter A</given-names></name><name><surname>Loftus</surname><given-names>Mark</given-names></name><name><surname>Porubsky</surname><given-names>David</given-names></name><name><surname>Ebler</surname><given-names>Jana</given-names></name><name><surname>Yilmaz</surname><given-names>Feyza</given-names></name><name><surname>Hallast</surname><given-names>Pille</given-names></name><name><surname>Prodanov</surname><given-names>Timofey</given-names></name><name><surname>Yoo</surname><given-names>DongAhn</given-names></name><etal/></person-group><article-title>Complex genetic variation in nearly complete human genomes</article-title><source>bioRxiv</source><year>2024</year><elocation-id>2024-09</elocation-id></element-citation></ref><ref id="R28"><label>[28]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Marçais</surname><given-names>Guillaume</given-names></name><name><surname>Delcher</surname><given-names>Arthur L</given-names></name><name><surname>Phillippy</surname><given-names>Adam M</given-names></name><name><surname>Coston</surname><given-names>Rachel</given-names></name><name><surname>Salzberg</surname><given-names>Steven L</given-names></name><name><surname>Zimin</surname><given-names>Aleksey</given-names></name></person-group><article-title>Mummer4: A fast and versatile genome alignment system</article-title><source>PLOS Computational Biology</source><year>2018</year><month>January</month><volume>14</volume><issue>1</issue><elocation-id>e1005944</elocation-id><pub-id pub-id-type="pmcid">PMC5802927</pub-id><pub-id pub-id-type="pmid">29373581</pub-id><pub-id pub-id-type="doi">10.1371/journal.pcbi.1005944</pub-id></element-citation></ref><ref id="R29"><label>[29]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mayer</surname><given-names>KF</given-names></name><name><surname>Waugh</surname><given-names>Robbie</given-names></name><name><surname>Langridge</surname><given-names>Peter</given-names></name><name><surname>Close</surname><given-names>TJ</given-names></name><name><surname>Wise</surname><given-names>RP</given-names></name><name><surname>Graner</surname><given-names>Andreas</given-names></name><name><surname>Matsumoto</surname><given-names>Takashi</given-names></name><name><surname>Sato</surname><given-names>Kazuhiro</given-names></name><name><surname>Schulman</surname><given-names>Alan</given-names></name><name><surname>Muehlbauer</surname><given-names>GJ</given-names></name><etal/></person-group><article-title>A physical, genetic and functional sequence assembly of the barley genome</article-title><source>Nature</source><year>2012</year><volume>491</volume><fpage>711</fpage><lpage>716</lpage><pub-id pub-id-type="pmid">23075845</pub-id></element-citation></ref><ref id="R30"><label>[30]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nelson</surname><given-names>David R</given-names></name><name><surname>Muvunyi</surname><given-names>Richard</given-names></name><name><surname>Hazzouri</surname><given-names>Khaled M</given-names></name><name><surname>Tumushime</surname><given-names>Jean-Claude</given-names></name><name><surname>Nzayisenga</surname><given-names>Gaspard</given-names></name><name><surname>Nziza</surname><given-names>Julius</given-names></name><name><surname>Meert</surname><given-names>Wim</given-names></name><name><surname>Karim</surname><given-names>Latifa</given-names></name><name><surname>Coppieters</surname><given-names>Wouter</given-names></name><name><surname>Munson</surname><given-names>Katherine M</given-names></name><name><surname>Yoo</surname><given-names>DongAhn</given-names></name><etal/></person-group><article-title>A near telomere-to-telomere phased reference assembly for the male mountain gorilla</article-title><source>bioRxiv</source><year>2024</year></element-citation></ref><ref id="R31"><label>[31]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nowoshilow</surname><given-names>Sergej</given-names></name><name><surname>Schloissnig</surname><given-names>Siegfried</given-names></name><name><surname>Fei</surname><given-names>Ji-Feng</given-names></name><name><surname>Dahl</surname><given-names>Andreas</given-names></name><name><surname>Pang</surname><given-names>Andy WC</given-names></name><name><surname>Pippel</surname><given-names>Martin</given-names></name><name><surname>Winkler</surname><given-names>Sylke</given-names></name><name><surname>Hastie</surname><given-names>Alex R</given-names></name><name><surname>Young</surname><given-names>George</given-names></name><name><surname>Roscito</surname><given-names>Juliana G</given-names></name><etal/></person-group><article-title>The axolotl genome and the evolution of key tissue formation regulators</article-title><source>Nature</source><year>2018</year><volume>554</volume><issue>7690</issue><fpage>50</fpage><lpage>55</lpage><pub-id pub-id-type="pmid">29364872</pub-id></element-citation></ref><ref id="R32"><label>[32]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nurk</surname><given-names>Sergey</given-names></name><name><surname>Koren</surname><given-names>Sergey</given-names></name><name><surname>Rhie</surname><given-names>Arang</given-names></name><etal/></person-group><article-title>The complete sequence of a human genome</article-title><source>Science</source><year>2022</year><volume>376</volume><month>April</month><issue>6588</issue><fpage>44</fpage><lpage>53</lpage><pub-id pub-id-type="pmcid">PMC9186530</pub-id><pub-id pub-id-type="pmid">35357919</pub-id><pub-id pub-id-type="doi">10.1126/science.abj6987</pub-id></element-citation></ref><ref id="R33"><label>[33]</label><element-citation publication-type="journal"><collab>Darwin Tree of Life Project Consortium</collab><article-title>Sequence locally, think globally: the darwin tree of life project</article-title><source>Proceedings of the National Academy of Sciences</source><year>2022</year><volume>119</volume><issue>4</issue><elocation-id>e2115642118</elocation-id><pub-id pub-id-type="pmcid">PMC8797607</pub-id><pub-id pub-id-type="pmid">35042805</pub-id><pub-id pub-id-type="doi">10.1073/pnas.2115642118</pub-id></element-citation></ref><ref id="R34"><label>[34]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rhie</surname><given-names>Arang</given-names></name><name><surname>McCarthy</surname><given-names>Shane A</given-names></name><name><surname>Fedrigo</surname><given-names>Olivier</given-names></name><name><surname>Damas</surname><given-names>Joana</given-names></name><name><surname>Formenti</surname><given-names>Giulio</given-names></name><name><surname>Koren</surname><given-names>Sergey</given-names></name><name><surname>Uliano-Silva</surname><given-names>Marcela</given-names></name><name><surname>Chow</surname><given-names>William</given-names></name><name><surname>Fungtammasan</surname><given-names>Arkarachai</given-names></name><name><surname>Kim</surname><given-names>Juwan</given-names></name><etal/></person-group><article-title>Towards complete and error-free genome assemblies of all vertebrate species</article-title><source>Nature</source><year>2021</year><volume>592</volume><issue>7856</issue><fpage>737</fpage><lpage>746</lpage><pub-id pub-id-type="pmcid">PMC8081667</pub-id><pub-id pub-id-type="pmid">33911273</pub-id><pub-id pub-id-type="doi">10.1038/s41586-021-03451-0</pub-id></element-citation></ref><ref id="R35"><label>[35]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Roberts</surname><given-names>Michael</given-names></name><name><surname>Hayes</surname><given-names>Wayne</given-names></name><name><surname>Hunt</surname><given-names>Brian R</given-names></name><name><surname>Mount</surname><given-names>Stephen M</given-names></name><name><surname>Yorke</surname><given-names>James A</given-names></name></person-group><article-title>Reducing storage requirements for biological sequence comparison</article-title><source>Bioinformatics</source><year>2004</year><month>July</month><volume>20</volume><issue>18</issue><fpage>3363</fpage><lpage>3369</lpage><pub-id pub-id-type="pmid">15256412</pub-id></element-citation></ref><ref id="R36"><label>[36]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Saada</surname><given-names>Bacem</given-names></name><name><surname>Zhang</surname><given-names>Tianchi</given-names></name><name><surname>Siga</surname><given-names>Estevao</given-names></name><name><surname>Zhang</surname><given-names>Jing</given-names></name><name><surname>Muniz</surname><given-names>Maria Malane Magalhães</given-names></name></person-group><article-title>Whole-genome alignment: Methods, challenges, and future directions</article-title><source>Applied Sciences</source><year>2024</year><volume>14</volume><issue>11</issue><elocation-id>4837</elocation-id></element-citation></ref><ref id="R37"><label>[37]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sahlin</surname><given-names>Kristoffer</given-names></name><name><surname>Baudeau</surname><given-names>Thomas</given-names></name><name><surname>Cazaux</surname><given-names>Bastien</given-names></name><name><surname>Marchet</surname><given-names>Camille</given-names></name></person-group><article-title>A survey of mapping algorithms in the long-reads era</article-title><source>Genome Biology</source><year>2023</year><volume>24</volume><issue>1</issue><fpage>133</fpage><pub-id pub-id-type="pmcid">PMC10236595</pub-id><pub-id pub-id-type="pmid">37264447</pub-id><pub-id pub-id-type="doi">10.1186/s13059-023-02972-3</pub-id></element-citation></ref><ref id="R38"><label>[38]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Smith</surname><given-names>TF</given-names></name><name><surname>Waterman</surname><given-names>MS</given-names></name></person-group><article-title>Identification of common molecular subsequences</article-title><source>Journal of Molecular Biology</source><year>1981</year><month>March</month><volume>147</volume><issue>1</issue><fpage>195</fpage><lpage>197</lpage><pub-id pub-id-type="pmid">7265238</pub-id></element-citation></ref><ref id="R39"><label>[39]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Song</surname><given-names>Baoxing</given-names></name><name><surname>Marco-Sola</surname><given-names>Santiago</given-names></name><name><surname>Moreto</surname><given-names>Miquel</given-names></name><etal/></person-group><article-title>Anchorwave: Sensitive alignment of genomes with high sequence diversity, extensive structural polymorphism, and whole-genome duplication</article-title><source>Proceedings of the National Academy of Sciences</source><year>2021</year><month>December</month><volume>119</volume><issue>1</issue><pub-id pub-id-type="pmcid">PMC8740769</pub-id><pub-id pub-id-type="pmid">34934012</pub-id><pub-id pub-id-type="doi">10.1073/pnas.2113075119</pub-id></element-citation></ref><ref id="R40"><label>[40]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Teeling</surname><given-names>Emma C</given-names></name><name><surname>Vernes</surname><given-names>Sonja C</given-names></name><name><surname>Dávalos</surname><given-names>Liliana M</given-names></name><name><surname>Ray</surname><given-names>David A</given-names></name><name><surname>Gilbert</surname><given-names>M Thomas P</given-names></name><name><surname>Myers</surname><given-names>Eugene</given-names></name><collab>Bat1K Consortium</collab></person-group><article-title>Bat biology, genomes, and the bat1k project: to generate chromosome-level genomes for all living bat species</article-title><source>Annual review of animal biosciences</source><year>2018</year><volume>6</volume><issue>1</issue><fpage>23</fpage><lpage>46</lpage><pub-id pub-id-type="pmid">29166127</pub-id></element-citation></ref><ref id="R41"><label>[41]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Walkowiak</surname><given-names>Sean</given-names></name><name><surname>Gao</surname><given-names>Liangliang</given-names></name><name><surname>Monat</surname><given-names>Cecile</given-names></name><name><surname>Haberer</surname><given-names>Georg</given-names></name><name><surname>Kassa</surname><given-names>Mulualem T</given-names></name><name><surname>Brinton</surname><given-names>Jemima</given-names></name><name><surname>Ramirez-Gonzalez</surname><given-names>Ricardo H</given-names></name><name><surname>Kolodziej</surname><given-names>Markus C</given-names></name><name><surname>Delorean</surname><given-names>Emily</given-names></name><name><surname>Thambugala</surname><given-names>Dinushika</given-names></name><etal/></person-group><article-title>Multiple wheat genomes reveal global variation in modern breeding</article-title><source>Nature</source><year>2020</year><volume>588</volume><issue>7837</issue><fpage>277</fpage><lpage>283</lpage><pub-id pub-id-type="pmcid">PMC7759465</pub-id><pub-id pub-id-type="pmid">33239791</pub-id><pub-id pub-id-type="doi">10.1038/s41586-020-2961-x</pub-id></element-citation></ref><ref id="R42"><label>[42]</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yoo</surname><given-names>DongAhn</given-names></name><name><surname>Rhie</surname><given-names>Arang</given-names></name><name><surname>Hebbar</surname><given-names>Prajna</given-names></name><name><surname>Antonacci</surname><given-names>Francesca</given-names></name><name><surname>Logsdon</surname><given-names>Glennis A</given-names></name><name><surname>Solar</surname><given-names>Steven J</given-names></name><name><surname>Antipov</surname><given-names>Dmitry</given-names></name><name><surname>Pickett</surname><given-names>Brandon D</given-names></name><name><surname>Safonova</surname><given-names>Yana</given-names></name><name><surname>Montinaro</surname><given-names>Francesco</given-names></name><etal/></person-group><article-title>Complete sequencing of ape genomes</article-title><source>bioRxiv</source><year>2024</year><elocation-id>2024-07</elocation-id></element-citation></ref></ref-list></back><floats-group><fig id="F1" position="float"><label>Figure 1</label><caption><title>Illustration of the seed-chain-extend heuristic method for computing whole-genome alignment.</title><p><bold>(A)</bold> Computation of short exact matches (anchors). Each diagonal line corresponds to an exact substring match between the query and reference genomes. <bold>(B)</bold> Computation of longer chains of multiple anchors. In this example, there are two chains. The two chains have overlapping intervals on the query genome. The chain highlighted in magenta color has a higher score due to more number of anchors and considered as primary, whereas the green chain is considered as secondary. <bold>(C)</bold> Extension of anchors in each chain to obtain base-to-base alignments.</p></caption><graphic xlink:href="EMS201589-f001"/></fig><fig id="F2" position="float"><label>Figure 2</label><caption><title>Illustration of the main computational steps in minimap2 and the proposed optimizations.</title><p><bold>(A)</bold> The key steps involved in the seed-chain-extend alignment workflow of minimap2. <bold>(B)</bold> The proposed techniques implemented in mm2-plus to accelerate the individual steps. We also used optimizations from our previous work, mm2-fast [<xref ref-type="bibr" rid="R16">16</xref>], as shown above.</p></caption><graphic xlink:href="EMS201589-f002"/></fig><fig id="F3" position="float"><label>Figure 3</label><caption><title>Pie charts to visualize the runtime profiling results of minimap2.</title><p>We highlight the percentage of runtime spent in various steps. We conducted this experiment using 48 threads. CPU efficiency is calculated as the ratio of actual CPU usage and the maximum possible CPU usage.</p></caption><graphic xlink:href="EMS201589-f003"/></fig><fig id="F4" position="float"><label>Figure 4</label><caption><title>End-to-end runtime (wall-clock time) using minimap2 (baseline) and the different versions of mm2-plus.</title><p>We progressively enabled the four optimizations <italic>O</italic><sub>1</sub>, <italic>O</italic><sub>2</sub>, <italic>O</italic><sub>3</sub>, and <italic>O</italic><sub>4</sub> in mm2-plus for a detailed evaluation. The labeling of the four optimizations is done as <italic>O</italic><sub>1</sub> (faster base-to-base alignment using AVX), <italic>O</italic><sub>2</sub> (faster algorithm for marking primary chains), <italic>O</italic><sub>3</sub> (parallel chaining), and <italic>O</italic><sub>4</sub> (parallel sorting). In each bar, we show the runtime contribution of different steps using different colors. We conducted this experiment using 48 threads.</p></caption><graphic xlink:href="EMS201589-f004"/></fig><fig id="F5" position="float"><label>Figure 5</label><caption><title>Comparison of mm2-plus and minimap2 runtimes using different number of threads.</title></caption><graphic xlink:href="EMS201589-f005"/></fig><fig id="F6" position="float"><label>Figure 6</label><caption><title>Speedups observed using mm2-plus on different CPU hardware architectures.</title><p>On each type of hardware, we ran mm2-plus and minimap2 using multiple threads, utilizing all cores of single socket. Emerald Rapids, Sapphire Rapids, and Cascade Lake are different generations of Intel architecture, while Milan is an AMD architecture.</p></caption><graphic xlink:href="EMS201589-f006"/></fig><fig id="F7" position="float"><label>Figure 7</label><caption><title>Comparison of runtimes of minimap2 [<xref ref-type="bibr" rid="R21">21</xref>], mm2-fast [<xref ref-type="bibr" rid="R16">16</xref>], and mm2-plus for long-read mapping and all-vs-all read alignment use-cases.</title><p>We used whole-genome long-read sequencing data from Pacific Biosciences (PacBio) and Oxford Nanopore Technology (ONT) instruments. Panels (A)-(D) demonstrate speedup achieved while mapping long reads to CHM13 human genome [<xref ref-type="bibr" rid="R32">32</xref>]. Panel (E) demonstrates speedup achieved for all-vs-all alignment of ONT simplex reads. We ran each method using 48 threads on a Cascade Lake CPU. The commands used in this experiment are listed in <xref ref-type="supplementary-material" rid="SD1">Supplementary Table S3</xref>.</p></caption><graphic xlink:href="EMS201589-f007"/></fig><table-wrap id="T1" position="float" orientation="portrait"><label>Table 1</label><caption><title>Summary statistics of the genomes used for experiments. We used genomes from <italic>H. sapiens</italic> (human), <italic>P. paniscus</italic> (bonobo), <italic>Z. mays</italic> (maize), and <italic>H. vulgare</italic> (barley) species.</title></caption><table frame="hsides" rules="groups"><thead><tr><th align="left" valign="top">Genome</th><th align="center" valign="top">Number of sequences</th><th align="center" valign="top">Longest sequence (Mbp)</th><th align="center" valign="top">GC%</th><th align="center" valign="top">Genome length (Gbp)</th><th align="center" valign="top">N50 (Mbp)</th></tr></thead><tbody><tr><td align="left" valign="top"><italic>H. sapiens</italic> (CHM13 v2.0)</td><td align="center" valign="top">24</td><td align="center" valign="top">248.39</td><td align="center" valign="top">40.75</td><td align="center" valign="top">3.12</td><td align="center" valign="top">150.62</td></tr><tr><td align="left" valign="top"><italic>H. sapiens</italic> (HG002 PATERNAL)</td><td align="center" valign="top">23</td><td align="center" valign="top">252.06</td><td align="center" valign="top">40.68</td><td align="center" valign="top">2.95</td><td align="center" valign="top">146.79</td></tr><tr><td align="left" valign="top"><italic>P. paniscus</italic> (mPanPan1 PATERNAL)</td><td align="center" valign="top">31</td><td align="center" valign="top">227.70</td><td align="center" valign="top">40.37</td><td align="center" valign="top">3.24</td><td align="center" valign="top">147.03</td></tr><tr><td align="left" valign="top"><italic>Z. mays</italic> (Mo17 CAU 2.0)</td><td align="center" valign="top">10</td><td align="center" valign="top">307.34</td><td align="center" valign="top">46.92</td><td align="center" valign="top">2.18</td><td align="center" valign="top">220.30</td></tr><tr><td align="left" valign="top"><italic>Z. mays</italic> (W22 NRGENE 2.0)</td><td align="center" valign="top">191</td><td align="center" valign="top">310.93</td><td align="center" valign="top">45.86</td><td align="center" valign="top">2.13</td><td align="center" valign="top">222.59</td></tr><tr><td align="left" valign="top"><italic>H. vulgare</italic> (Morex V3)</td><td align="center" valign="top">290</td><td align="center" valign="top">665.59</td><td align="center" valign="top">44.45</td><td align="center" valign="top">4.23</td><td align="center" valign="top">610.33</td></tr><tr><td align="left" valign="top"><italic>H. vulgare</italic> (GPv1)</td><td align="center" valign="top">8</td><td align="center" valign="top">612.22</td><td align="center" valign="top">43.39</td><td align="center" valign="top">4.13</td><td align="center" valign="top">571.02</td></tr></tbody></table></table-wrap></floats-group></article>