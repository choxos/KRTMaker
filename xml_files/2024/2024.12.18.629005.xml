<!DOCTYPE article
 PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">
<article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="preprint"><?all-math-mml yes?><?use-mml?><?origin ukpmcpa?><front><journal-meta><journal-id journal-id-type="nlm-ta">bioRxiv</journal-id><journal-title-group><journal-title>bioRxiv : the preprint server for biology</journal-title></journal-title-group><issn pub-type="epub">2692-8205</issn></journal-meta><article-meta><article-id pub-id-type="manuscript">EMS202288</article-id><article-id pub-id-type="doi">10.1101/2024.12.18.629005</article-id><article-id pub-id-type="archive">PPR957441</article-id><article-version-alternatives><article-version article-version-type="status">preprint</article-version><article-version article-version-type="number">2</article-version></article-version-alternatives><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>GRN_modeler: An Intuitive Tool for Constructing and Evaluating Gene Regulatory Networks and its Applications to Oscillators and a Light Biosensor</article-title></title-group><contrib-group><contrib contrib-type="author"><name><surname>Holló</surname><given-names>Gábor</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="corresp" rid="CR1">*</xref></contrib><contrib contrib-type="author"><name><surname>Park</surname><given-names>Jung Hun</given-names></name><xref ref-type="aff" rid="A1">1</xref></contrib><contrib contrib-type="author"><name><surname>Boni</surname><given-names>Emanuele</given-names></name><xref ref-type="aff" rid="A1">1</xref></contrib><contrib contrib-type="author"><name><surname>Schaerli</surname><given-names>Yolanda</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="corresp" rid="CR1">*</xref></contrib><aff id="A1"><label>1</label>Department of Fundamental Microbiology, <institution-wrap><institution-id institution-id-type="ror">https://ror.org/019whta54</institution-id><institution>University of Lausanne</institution></institution-wrap>, <addr-line>Biophore Building</addr-line>, <postal-code>1015</postal-code>, <city>Lausanne</city>, <country country="CH">Switzerland</country></aff></contrib-group><author-notes><corresp id="CR1">
<label>*</label>Correspondence <email>gabor.hollo@unil.ch</email>, <email>yolanda.schaerli@unil.ch</email>
</corresp></author-notes><pub-date pub-type="nihms-submitted"><day>17</day><month>01</month><year>2025</year></pub-date><pub-date pub-type="preprint"><day>20</day><month>12</month><year>2024</year></pub-date><permissions><ali:free_to_read/><license><ali:license_ref>https://creativecommons.org/licenses/by-nc/4.0/</ali:license_ref><license-p>This work is licensed under a <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC 4.0 International license</ext-link>.</license-p></license></permissions><abstract><p id="P1">Modeling and simulating gene regulatory networks (GRNs) is crucial for understanding biological processes, predicting system behavior, guiding the design of synthetic biological systems, and interpreting experimental data. In synthetic biology, GRNs play a pivotal role in enabling the design and control of complex systems for a wide range of applications. However, GRN simulations can be time-consuming and often require specialized expertise. To make this process more accessible, we developed a user-friendly application with a graphical user interface (GUI), allowing users to create simple phenomenological models without requiring prior programming experience. We demonstrate the versatility of our tool through several examples, including the design of novel oscillator families capable of robust oscillation with an even number of nodes. These complement the well-known repressilator family, which only oscillates with odd-numbered nodes. Furthermore, we showcase how GRN_modeler allowed us to develop a light-detecting biosensor in <italic>Escherichia coli</italic> that can track light intensity over several days, leaving a record in the form of ring patterns in bacterial colonies. In summary, our work empowers biologists to model their systems of interest even without programming expertise.</p></abstract></article-meta></front><body><sec id="S1" sec-type="intro"><title>Introduction</title><p id="P2">Gene Regulatory Networks (GRNs) are intricate systems that regulate gene expression and ultimately determine cellular function and behavior [<xref ref-type="bibr" rid="R1">1</xref>, <xref ref-type="bibr" rid="R2">2</xref>]. They consist of molecular regulators, including transcription factors, that interact with specific DNA binding sites to control levels of mRNA and proteins. The multidisciplinary field of synthetic biology applies engineering concepts to create novel biological components, devices, and systems, or to re-engineer existing natural systems. Designing and testing synthetic GRNs is crucial in this process [<xref ref-type="bibr" rid="R3">3</xref>–<xref ref-type="bibr" rid="R5">5</xref>]. By carefully characterizing individual genetic components and integrating computational modeling into the design and engineering process, the field seeks to move beyond repeated cycles of trial and error. Therefore, as synthetic systems grow increasingly complex, computational modeling becomes vital for accurately predicting their behaviors. However, the expertise required in mathematics and programming presents a significant challenge for scientists with a training focused on experimental work.</p><p id="P3">Modeling GRNs requires reaction kinetics simulations, which involve solving and analyzing ordinary differential equations (ODEs). There are many software options to solve and analyze ODEs. For example, the popular program XPP/XP-PAUT [<xref ref-type="bibr" rid="R6">6</xref>] can be used for dynamic system analysis. To facilitate the creation of ODEs based on the stoichiometry and rate laws of reactions, specialized reaction kinetics softwares such as KinTek Explorer [<xref ref-type="bibr" rid="R7">7</xref>–<xref ref-type="bibr" rid="R9">9</xref>] are also available.</p><p id="P4">In the early 2000s, the Systems Biology Markup Language (SBML) [<xref ref-type="bibr" rid="R10">10</xref>, <xref ref-type="bibr" rid="R11">11</xref>] was developed to standardize the representation of biological process models. SBML is a computer-readable format that includes information on species, reactions, parameters, rules, and constraints. Its purpose is to enable researchers to work with the same model across different software environments. As a result, several widely-used programs for modeling biochemical reaction networks support SBML, including TABASCO [<xref ref-type="bibr" rid="R12">12</xref>], COPASI [<xref ref-type="bibr" rid="R13">13</xref>], Bioscrape [<xref ref-type="bibr" rid="R14">14</xref>], libRoadRunner [<xref ref-type="bibr" rid="R15">15</xref>, <xref ref-type="bibr" rid="R16">16</xref>], SBMLsimulator [<xref ref-type="bibr" rid="R17">17</xref>], and the MATLAB SimBiology toolbox.</p><p id="P5">Another set of tools facilitate the design of synthetic systems via a model-based design strategy. For example, txtools focuses on RNA structure analysis [<xref ref-type="bibr" rid="R18">18</xref>]. iBioSim (integrated Biological Systems Simulator) [<xref ref-type="bibr" rid="R19">19</xref>, <xref ref-type="bibr" rid="R20">20</xref>] provides an intuitive graphical interface that simplifies the construction and visualization of genetic circuits using fundamental components such as promoters, ribosome binding sites, and terminators. TX-TLsim (Transcription-Translation Simulator) [<xref ref-type="bibr" rid="R21">21</xref>] is a computational tool designed to model and simulate the transcription and translation processes in cell-free systems, such as <italic>Escherichia coli</italic> extracts. It offers detailed simulations of these processes, enabling researchers to predict the behavior of <italic>in vitro</italic> genetic constructs with high accuracy. On the other hand, Metabolic Tinker is used for designing metabolic pathways [<xref ref-type="bibr" rid="R22">22</xref>], and WebCM supports individual-based simulations of multicellular microbial populations [<xref ref-type="bibr" rid="R23">23</xref>]. Finally, Flapjack [<xref ref-type="bibr" rid="R24">24</xref>] concentrates on the whole design, build, test, learn cycle (DBTL).</p><p id="P6">However, when describing the qualitative behavior of complex systems with many nodes (a regulatory unit composed of genetic elements such as a promoter, a gene and and terminator) or designing circuits for specific functionalities, these tools can still be limiting. In such cases, it is more efficient to design circuits using individual nodes as fundamental building blocks, avoiding the need to repeatedly add the same reactions and species for each node in the model-building process. This higher level of abstraction provides a simplified overview of the system, enhancing the feasibility of constructing complex networks. The genetic design automation tool LOICA (Logical Operators for Integrated Cell Algorithms) uses a high-level design abstraction by representing networks as combinations of components, rather than as combination of individual parts [<xref ref-type="bibr" rid="R25">25</xref>]. However, it only offers a command-line interface, limiting its accessibility to users who already possess modeling expertise.</p><p id="P7">We have developed a user-friendly software with a graphical user interface (GUI) specifically designed for biologists who may not have advanced computational skills. Our application is an intuitive and valuable tool for synthetic biology, aimed to support the entire process of designing, building, and testing synthetic GRNs. It enables users to model GRNs, predict and compare their behavior with ease. The tool simplifies the creation of novel circuits, facilitates rapid hypothesis testing, and guides the design process by highlighting where strong or weak interactions are needed to construct robust systems that are less sensitive to minor parameter changes. Additionally, it can be used to make predictions for potential experiments and genetic modifications, helping researchers anticipate results. For circuits that do not perform as expected, the application assists in troubleshooting and diagnosing issues, thereby enhancing problem-solving and optimization efforts. In summary, by simplifying the modeling process, our tool empowers researchers to design and engineer GRNs more effectively, thus accelerating progress in synthetic biology.</p><p id="P8">We demonstrate the main capabilities of the application and illustrate their use with examples. We start by modelling well-established circuits from the literature, focusing on oscillators and feed-forward loops. Oscillators have been a subject of great interest for synthetic biologists since the early days of the field [<xref ref-type="bibr" rid="R26">26</xref>]. Our analysis includes several oscillators: the repressilator, the first synthetic oscillator described in 2000 [<xref ref-type="bibr" rid="R27">27</xref>], and an extension of it that facilitates tuning of amplitude and period [<xref ref-type="bibr" rid="R28">28</xref>]. We also present a model of the CRISPRlator – a synthetic oscillator with the repressilator topology, but leveraging CRISPR interference (CRISPRi) instead of protein transcription factors to inhibit transcription [<xref ref-type="bibr" rid="R29">29</xref>]. We also include feedforward loops (FFLs), fundamental network motifs composed of three interacting genes and commonly found in most living organisms [<xref ref-type="bibr" rid="R30">30</xref>–<xref ref-type="bibr" rid="R32">32</xref>]. These motifs can function as pulse generators, accelerate response times or act as band-pass concentration sensors [<xref ref-type="bibr" rid="R30">30</xref>–<xref ref-type="bibr" rid="R32">32</xref>] and have frequently been a focus of synthetic biology research [<xref ref-type="bibr" rid="R33">33</xref>–<xref ref-type="bibr" rid="R36">36</xref>]. After showcasing the capabilities of our application with known systems, we illustrate how it can be used to design novel circuits. As an example, we create new, robust oscillators that can oscillate with an even number of nodes. Finally, we present an example of the interplay with experimental work. We build a light-recording biosensors in <italic>E. coli</italic> and demonstrate how GRN_modeler predicts phase and antiphase output signals in response to periodic external light exposure, such as day-night light cycles. We then validate these predictions through experimental testing, showcasing the tool’s effectiveness in guiding biological circuit behavior.</p></sec><sec id="S2" sec-type="results"><title>Results</title><sec id="S3"><title>Basic properties of the application</title><p id="P9">Our application is based on MATLAB SimBiology, a powerful toolbox within the MATLAB environment designed for modeling, simulating, and analyzing biological systems. Its integration with MATLAB provides significant advantages in terms of computational capabilities, data visualization tools, and an extensive library of functions for data analysis. Furthermore, SimBiology supports the SBML format, which allows users to build models efficiently within our software and then perform further analysis using any other SBML-compatible software. However, one limitation of SimBiology is that its stochastic solver is restricted to mass action kinetics, where the reaction rate is proportional to the product of the reactant concentrations. This constraint prevents the modeling of complex reactions, such as enzymatic reactions with Michaelis-Menten kinetics, or inhibitions, and activations, which are typically described using Hill functions. To address this, we have integrated our application with COPASI [<xref ref-type="bibr" rid="R13">13</xref>] through BasiCO (Basic COmpartmental model Interface) [<xref ref-type="bibr" rid="R37">37</xref>], a streamlined Python interface for COPASI. This integration enables access to a broader range of solvers, including stochastic ones, within our MATLAB application, leveraging COPASI’s extensive solver capabilities. Most of the functionalities in our application become available after installing SimBiology. To access the COPASI solvers, it is also necessary to install COPASI [<xref ref-type="bibr" rid="R13">13</xref>], Python, and BasiCO [<xref ref-type="bibr" rid="R37">37</xref>].</p><p id="P10">The key concepts and the level of abstraction that demonstrate how the GRN_modeler operates are summarized in <xref ref-type="fig" rid="F1">Figure 1</xref>. <list list-type="roman-upper" id="L1"><list-item><p id="P11">First, we define a model for each node, what we call “node model” to distinguish from the mathematical description or the model of the whole circuit, what we will call “circuit model” or simply “model”. The user can select an implemented node model, or create a new one. New node models can be included in the <monospace>models</monospace> folder and these node models can be selected when starting the application. Our simulation functions at the node level, where nodes are here defined as the fundamental components of the biological network. Each node represents crucial elements such as reactions and concentrations of species (e.g., RNAs and proteins) produced through transcription and translation from the DNA coding sequence. In the node model, nodes can have varying input and output functions, allowing users to define interactions between them. Kinetic parameters can be either “individual” or “common”. For individual parameters, a separate parameter is assigned to each node, named accordingly. For “common” parameters, all nodes use the same value.</p></list-item><list-item><p id="P12">Second, once a model for a node is established, the system can be constructed by adding nodes, defining interactions between them, and incorporating external regulators or protein degradation by proteases.</p></list-item><list-item><p id="P13">Third, the application automatically generates the corresponding differential and algebraic equations for the entire system, based on the model for the nodes and their interactions. Once the mathematical model for the circuit is constructed, we can further refine it by applying various “rules” to fine-tune the system’s behavior. In SimBiology, “rules” define mathematical relationships between model components, such as differential equations, algebraic expressions, or rate laws, to govern the dynamics of biological systems. For example, inducer concentrations can be temporally modified by these user-defined rules. We will demonstrate this property in the section “Experimental example: a light sensor” by modulating the parameters sinusoidally in response to external light exposure.</p></list-item><list-item><p id="P14">Finally, we can run simulations to observe the system’s dynamic behavior. If the circuit does not show the expected behavior, we can return to step II to redesign the circuit and repeat the process.</p></list-item></list></p><p id="P15">We designed a (GUI) (<xref ref-type="fig" rid="F2">Figure 2</xref>) to enable users to create the model for the circuit, set properties, and run simulations without requiring any programming skill. It provides access to all the functions, while allowing users to select objects and set their parameters in a intuitive way. The constructed circuit can be visualized as a directed graph with multiple layout options, such as organizing nodes in a circular or layered structure. In the “Graphical Settings” tab (<xref ref-type="fig" rid="F2">Figure 2d</xref>), users can customize the appearance by adjusting colors, node sizes, and other visual aspects. Users can also compare deterministic and stochastic simulation results by overlaying their trajectories and adjusting specific parameters. Additionally, the tool allows users to scan a parameter across a defined range and observe its impact on the trajectories at a specific time point. For users that prefer not to use the GUI, all functionalities of GRN modeler can also be achieved through the command line and the basic functions are presented in the Command Line Functionality section in the <xref ref-type="supplementary-material" rid="SD1">SI (Section 2.1)</xref>. While the GUI provides many useful properties and functionalities, MATLAB offers additional powerful tools for model analysis. For this reason, once the user has built the model for the circuit in the GUI, the code generation feature allows to produce a MATLAB script that replicates all actions performed in the GUI. This approach enables users to work more conveniently without needing to know the specific species or parameter names or the syntax of the different functions. Finally, it is also possible to open the SimBiology Model Builder application or COPASI directly from the GUI for further analysis or parameter fitting.</p></sec><sec id="S4"><title>Building GRNs and the implemented node models</title><p id="P16">To demonstrate the capabilities of our tool in simulating GRNs, we have implemented several node models. In the following sections, we illustrate how to build and reproduce the behavior of well-known oscillators and feed-forward loops. These examples can serve as templates for creating new node models or adapting existing ones from the literature. All examples presented in the manuscript can be found in the <monospace>analysing_examples</monospace> folder of the code.</p><sec id="S5"><title>The Elowitz node model</title><p id="P17">First, we implemented a node model for the repressilator. The repressilator, one of the first synthetic genetic circuits, was published by Elowitz and Leibler in 2000 [<xref ref-type="bibr" rid="R27">27</xref>]. This circuit consists of a network of three transcription factors (TFs) that sequentially repress each other’s expression in a cyclic manner, generating oscillatory behavior (<xref ref-type="fig" rid="F3">Figure 3Ia</xref>). The repressilator showed robust oscillations in <italic>E. coli</italic>, demonstrating the feasibility of engineering periodic gene expression in living cells. The node model describing the repressilator (referred to in this manuscript as the “Elowitz model”) only includes mRNAs and transcription factors, making it an ideal choice to describe GRNs based on transcription factors. More details on the Elowitz model are provided in the Supplementary Information in <xref ref-type="supplementary-material" rid="SD1">Table S2</xref>, as well as a detailed description of the reaction kinetics simulations generated by SimBiology. In <xref ref-type="fig" rid="F3">Figure 3I</xref>, we present the results of both deterministic and stochastic simulations. For the stochastic simulations in this example, we utilized the “adaptivesa” solver from COPASI. Notably, the fundamental model describing the nodes (e.g., RNA, protein concentrations and the repression) is not specific to the repressilator and can be applied to simulate systems with different topologies. This generalization allows the nodes to be used as building blocks for designing diverse circuits with varying functions and purposes.</p></sec><sec id="S6"><title>The re-designed repressilator node model to provide independent control of amplitude and period</title><p id="P18">A more refined node model can be applied to the same genetic circuit, increasing the level of detail of the simulation. Building upon the Elowitz model, Tomazou <italic>et al</italic>. [<xref ref-type="bibr" rid="R28">28</xref>] developed a more complete transcription factor node model, which includes the processes of protein folding and protein degradation by proteases. We show the details of the Tomazou model in <xref ref-type="supplementary-material" rid="SD1">Table S3</xref>. In this node model, transcription (R<sub>1</sub>) produces an (mRNA) which is translated (R<sub>2</sub>), yielding first an unfolded protein (uP) which finally becomes, through maturation (R<sub>3</sub>), a folded protein (P). Additionally, the proteins are degraded by proteases following Michaelis-Menten kinetics. Also, the concentrations of the mRNA, folded and unfolded protein decrease with a dilution rate (k<sub><italic>d</italic></sub>). R<sub>4</sub> reaction describes the elimination of the folded protein due to dilution by cell growth and degradation by proteases. In particular, Tomazou <italic>et al</italic>. [<xref ref-type="bibr" rid="R28">28</xref>] used this node model to re-design the repressilator in order to provide independent control of amplitude and period.</p><p id="P19">In the repressilator, amplitude and frequency are interdependent — typically, as frequency increases, amplitude decreases. However, for practical applications, it would be desirable to adjust these two parameters independently. To achieve this, Tomazou <italic>et al</italic>. [<xref ref-type="bibr" rid="R28">28</xref>] and Fengyu <italic>et al</italic>. [<xref ref-type="bibr" rid="R38">38</xref>] suggested incorporating an additional output node (N4) into the repressilator topology. N4 is repressed by one of the three oscillatory nodes (labelled N3 in <xref ref-type="fig" rid="F3">Figure 3II</xref>). The expression of node 2 (N2) can be modulated with an inducer (via Y and I<sub>2</sub>). In the simple repressilator, an increased expression of N2 would not only lead to an increased frequency, but also to a lower amplitude. However, in the re-designed topology, a small amount of N3 is sufficient to repress the output node N4. Therefore, increasing the frequency with an inducer “I<sub>2</sub>” does not significantly affect the amplitude of the output in N4. Similarly, by modulating the concentration of another inducer, “I<sub>1</sub>”, it is possible to modulate the expression strength of N4 and change the amplitude in N4 oscillations. If N4 and the other nodes are degraded by the same protease, which can result in a protease “queuing effect”, the change in amplitude affects the oscillator’s time period. Conversely, if N4 is not coupled to the other nodes, for example if they are targeted to different proteases (C and L) (<xref ref-type="fig" rid="F3">Figure 3II</xref> and <xref ref-type="supplementary-material" rid="SD1">Table S3</xref>), the amplitude can be modulated independently from the frequency. In <xref ref-type="fig" rid="F3">Figure 3II</xref>, we replicate these simulations, demonstrating the independent modulation of amplitude and frequency. In summary, in this section we illustrated how to use different node models, add proteases, and build more complex circuits. Using the example of the implemented node models, one can easily integrate new node models. Even with the increased complexity of the reaction system, building the circuit model remained simple and can be completed within minutes using our app.</p></sec></sec><sec id="S7"><title>The CRISPRlator node model</title><p id="P20">Synthetic GRNs based on protein transcription factors are robust and effective, but they have some limitations. Engineering genetic circuits with CRISPR-based gene expression control represents a promising alternative [<xref ref-type="bibr" rid="R39">39</xref>]. In CRISPR interference (CRISPRi) a catalytically inactive Cas protein (typically dCas9) is targeted to specific DNA sequences with the help of a single guide RNA (sgRNA) and represses transcription by blocking the RNA polymerase. Due to its RNA-guided nature, as opposed to protein-based, CRISPRi allows for rapid and straightforward design of a large number of highly orthogonal sgRNAs. CRISPR-based circuits also impose low burden on host cells (as sgRNAs are only transcribed, but not translated) [<xref ref-type="bibr" rid="R29">29</xref>, <xref ref-type="bibr" rid="R39">39</xref>–<xref ref-type="bibr" rid="R41">41</xref>]. Previously, in our group we have built a synthetic oscillator based on the repressilator topology, but utilizing CRISPRi-mediated repression, termed the CRISPRlator [<xref ref-type="bibr" rid="R29">29</xref>]. Each node expresses a sgRNA in an operon with a fluorescent protein (mCherry, mCerulean or mCitrine). The composite mRNA is cleaved by Csy4 [<xref ref-type="bibr" rid="R42">42</xref>], and the resulting sgRNA binds to dCas9 to target the upstream region of the next node’s promoter, while the rest of the mRNA is translated into a fluorescent reporter. The oscillation occurs analogously to the repressilator, however the interaction between the nodes are different, thus requiring a new node model to describe the dynamics.</p><p id="P21">For this, we built upon the node model published by Santos-Moreno <italic>et al</italic>. [<xref ref-type="bibr" rid="R43">43</xref>]. The modifications are detailed in <xref ref-type="supplementary-material" rid="SD1">SI Section 2.4</xref>. Briefly, to align with existing transcription factor node models, we adapted parameters from the Elowitz model [<xref ref-type="bibr" rid="R27">27</xref>] for reactions R<sub>1</sub>, R<sub>2</sub>, R<sub>3</sub> (<xref ref-type="supplementary-material" rid="SD1">Table S4</xref>). To match the experimentally observed time period for the CRISPRlator (approximately 10-11 hours) [<xref ref-type="bibr" rid="R29">29</xref>], we fine-tuned the dilution rate <italic>k</italic><sub><italic>d</italic></sub>. The revised node model is summarized in <xref ref-type="supplementary-material" rid="SD1">Table S4</xref>, and robust oscillations for the CRISPRlator are shown in <xref ref-type="fig" rid="F3">Figure 3III</xref>. This node model provides a general framework for the CRISPRi-based gene regulation, suitable for initial exploration of the behavior of these circuits. However, further refinement of parameters is required for more accurate descriptions of specific experimental systems.</p><p id="P22">In order to identify which parameters have the largest impact on the CRISPRlator’s amplitude and time period in this model, we performed a global sensitivity analysis with the SimBiology toolbox of MATLAB. We tested the following parameters: “a<sub>1</sub>” represents the promoter strength, “dCas” refers to dCas9 concentration, “k_P” and “d_P” are the rates for protein production and degradation, while “krds” and “kfds” correspond to the formation and degradation rates of the dCas complex, and “kfdsd” represents the formation rate of the dCas:sgRNA complex. The first-order Sobol index quantifies the influence of each parameter on its own, while the total-order Sobol index captures the combined effect of a parameter in interaction with other parameters. We found that the oscillation period is primarily influenced by promoter strength and dCas9 concentration (<xref ref-type="fig" rid="F4">Figure 4a</xref>). In contrast, the amplitude is determined largely by promoter strength and the rates of reporter protein translation and degradation. This oscillator operates at a slower pace than the repressilator, allowing protein concentrations to nearly saturate and providing sufficient time for production and degradation rates to equilibrate. Consequently, the concentration of dCas9 has minimal impact on the amplitude, as it does not directly affect these rates. Conversely, the protein kinetic parameters have little effect on the oscillation period, since the CRISPRlator mechanism does not depend on transcription factors, unlike the repressilator. This decoupling enables independent control of the oscillation frequency and amplitude by modulating the concentration of dCas9 and the translation and degradation rate of the reporter protein, respectively. Such control produces horizontal and vertical isoclines in two-dimensional parameter space (<xref ref-type="fig" rid="F4">Figure 4b</xref>).</p><sec id="S8"><title>The feed-forward loop network motif to showcase parameter scanning</title><p id="P23">GRN_modeler allows easy adjustments of parameters to observe their effects on system trajectories. However, sometimes the final state of the system after a specified time is more relevant than its dynamics. For such cases, the parameter scan feature is particularly useful. This feature allows for varying a parameter over a broad range and analyzing the system’s response at a specific time point. If needed, this process can be accelerated through parallelization, since these are independent simulations. This capability is integrated into the GUI.</p><p id="P24">We demonstrate the parameter scan feature using feed-forward loops (FFLs) [<xref ref-type="bibr" rid="R31">31</xref>, <xref ref-type="bibr" rid="R32">32</xref>], a class of circuits that have attracted significant attention in SynBio [<xref ref-type="bibr" rid="R33">33</xref>, <xref ref-type="bibr" rid="R44">44</xref>, <xref ref-type="bibr" rid="R45">45</xref>]. FFLs are 3-node regulatory networks where the first node controls the third node through two different paths, directly and indirectly through a second node. In coherent FFLs, the direct and indirect regulation paths have the same sign (both activations, or both repressions), while the two signs are different in incoherent FFLs. <xref ref-type="supplementary-material" rid="SD1">Figure S6</xref> shows the topologies for coherent FFLs type 1 and incoherent FFLs type 2, along with the system’s response to varying R<sub>1</sub> inducer concentrations (using the parameters from the Elowitz model, <xref ref-type="supplementary-material" rid="SD1">Table S2</xref>). The model successfully predicts the system’s behaviour observed by others in experimental systems. For coherent FFL 1, increasing the inducer concentration progressively activates the output node N<sub>3</sub> until it reaches saturation, as N<sub>3</sub> is activated both directly and indirectly (through N<sub>2</sub>) by N<sub>1</sub>. In contrast, for incoherent FFL 2 the output is activated the most at intermediate inducer concentrations, showing a peak in the response function. This behavior, known as band-pass filter or stripe-forming, has previously been implemented experimentally in SynBio [<xref ref-type="bibr" rid="R33">33</xref>, <xref ref-type="bibr" rid="R44">44</xref>, <xref ref-type="bibr" rid="R45">45</xref>].</p></sec></sec><sec id="S9"><title>Novel oscillatory circuits</title><p id="P25">In the previous sections, we implemented models described in the literature and demonstrated the capabilities of our application through these examples. However, our tool is also valuable for exploring the behavior of novel circuit topologies. It allows for qualitative testing of new circuit designs, assessing their robustness under varying parameters, and helps determining the feasibility of an experimental implementation. In this section, our goal is to illustrate how GNR modeler facilitates the iterative process of designing new circuits, building models with the appropriate equations, and theoretically testing them.</p><sec id="S10"><title>The reptolator</title><p id="P26">The original repressilator has 3 nodes [<xref ref-type="bibr" rid="R27">27</xref>]. A version with 5 nodes has also been constructed [<xref ref-type="bibr" rid="R46">46</xref>]. The 4-node repressilator does not oscillate because if every second node is activated (either N1 and N3, or N2 and N4) and the other two nodes are deactivated, the system reaches a stable state [<xref ref-type="bibr" rid="R46">46</xref>]. More generally, the repressilator family can oscillate with an odd number of nodes and is bistable with an even number of nodes. We aimed to design a robust oscillator that can oscillate with an even number of nodes. By introducing mutual repressions (toggle switches) [<xref ref-type="bibr" rid="R47">47</xref>] between activated nodes in a 4-node repressilator (between N1-N3 and N2-N4), this state becomes unstable, causing the system to start oscillating again, as shown in <xref ref-type="fig" rid="F5">Figure 5 a,b</xref>. Since this circuit combines elements of the repressilator and toggle switches, we will refer to it as the “reptolator”. Using this configuration, we can observe oscillations in systems with any integer multiple of 4 nodes (4, 8, 12, … <italic>N</italic> <sup><xref ref-type="fn" rid="FN3">1</xref></sup>). Conversely, systems with 6, 10, … nodes remain bistable. Generally, if half the number of nodes is odd, this reptolator family will not oscillate. In such cases, the nodes on opposite sides of the circuit, connected by a toggle switch, can stabilize in opposite states, resulting in a bistable system, as demonstrated for the six-node circuit shown in <xref ref-type="fig" rid="F5">Figure 5 a,b</xref>.</p><p id="P27">In the original repressilator, if the nodes are ordered sequentially (N1 represses N2, N2 represses N3, and so on), and the first node is activated, the sequence of activated nodes is 1, 3, 5, …, N, 2, 4, …, N-1<sup><xref ref-type="fn" rid="FN4">2</xref></sup>. In other words, every second node is activated because two consecutive repressions effectively result in an activation, causing the first node to activate the third one. In this new reptolator family the pattern of activated nodes is more complex. Let us illustrate this with the eight-node circuit (<xref ref-type="fig" rid="F5">Figure 5 a,b</xref>): If N1 is activated, the next activated node is not the third one, because it is repressed by both the second and seventh nodes. Instead, the next activated node is the sixth one because the first node represses both the second and fifth nodes. In other words, the first node releases repression of the sixth node through two pathways (N1 represses N5, which represses N6, and N1 represses N2, which represses N6) and no other node inhibits the sixth node. Following this logic, the next activated node is the third node, and the system oscillates in the following sequence: N1, N6, N3, N8, N5, N2, N7, N4. Other circuits in this family follow the same activation rules<sup><xref ref-type="fn" rid="FN5">3</xref></sup>.</p></sec><sec id="S11"><title>The actolator</title><p id="P28">The repressilator can oscillate with an odd number of nodes, while the reptolator can oscillate with an integer multiple of 4 nodes. However, these circuits cannot oscillate with 6, 10, 14, … nodes<sup><xref ref-type="fn" rid="FN6">4</xref></sup>. To create an oscillator capable of operating with 6 or 10 nodes, we designed the “actolator.” This circuit is similar to the reptolator, except that the repression loop is replaced with an activation loop (<xref ref-type="fig" rid="F5">Figure 5 c,d</xref>). Compared to repression, where a node is active in the absence of repression, in activation, a node is not expressed until activation occurs. Unlike the reptolator, the 6-node actolator is not bistable, and this circuit oscillates for every even number of nodes. If we consider the state in which N1 levels are high and N6 levels are low, it means N2 is being activated. At the same time, N1 is not activated by any node, so it slowly gets depleted. Once N1 levels are low, N2 is no longer activated, and this instability makes the system move forward. Another difference compared to the repressilator or reptolator families is the order of activated nodes. Since the circuit is based on an activation loop, the activation of nodes follows the sequence of N1, N2, N3, <sup><xref ref-type="fn" rid="FN7">5</xref></sup>. It is worth noting that there is an alternative ladder-like representation of the actolator (<xref ref-type="supplementary-material" rid="SD1">Figure S8 c,d</xref>), which highlights the role of the toggle switches in the circuit more than the activation loop. In the 4-node actolator, if node N1 is active, it will in turn activate node N2. Note that N1 and N2 are on two separate toggle switches, and if N2 is active it will repress node N4, preventing it from activating the first node, so the first toggle switch will turn off. In the next iteration, the first toggle switch would turn on again, this time with high level of N3. In other words, the two toggle switches periodically destabilize each other with a delay (due to interactions), causing them to switch one after another.</p><p id="P29">In <xref ref-type="fig" rid="F5">Figure 5e</xref> we compare the oscillation period and duty cycle (the proportion of time during which the system is active) across three oscillator families: the repressilator, the reptolator, and the actolator. For the duty cycle calculation, a node is considered active when its protein concentration exceeds the midpoint between its minimum and maximum values during one oscillation period. The data show that as the number of nodes increases, the duty cycle approaches ≈50%. As a qualitative example, we can consider the repressilator, where each node is repressed by only one other node. If the average duty cycle of any given node were to fall below 50%, the node it regulates would subsequently exhibit a higher duty cycle. Due to the symmetrical nature of the circuit, this ultimately results in an average duty cycle of ≈50% for all nodes. However, when the number of nodes is lower, the protein concentration either does not reach saturation or takes longer to do so, resulting in a decreased duty cycle. This increase in duty cycle with increasing nodes, combined with a longer oscillation period, suggests that larger circuits could impose a significant metabolic burden on cells. If we aim to design larger oscillators in the future, it would be beneficial to develop GRNs where the duty cycle decreases as the number of nodes increases. Another noteworthy model prediction is that, for the same number of nodes, the actolator oscillates at a slower rate than the reptolator and repressilator. This difference arises because, in the longest (or rate-determining) pathway between two consecutively activated nodes, the repressilator and reptolator each require the deactivation of one intermediate node, whereas the actolator requires the consecutive deactivation of two nodes<sup><xref ref-type="fn" rid="FN8">6</xref></sup>. As a result, the predicted oscillation periods for the repressilator and reptolator are similar, while the actolator oscillates with roughly twice the period. In <xref ref-type="supplementary-material" rid="SD1">Figure S7</xref>, we present the special case of the 2-node actolator.</p></sec><sec id="S12"><title>Modified repressilator circuits: the “acrelator” family</title><p id="P30">As discussed previously, the repressilator with an even number of nodes is typically bistable. Instead of adding toggle switches, another way to destabilize such a system and induce oscillations is by replacing an odd number of repressive interactions with activations. We named this circuit, which integrates both <italic>ac</italic>tivations and <italic>re</italic>pressions, the “acrelator”. The acrelator circuits, similarly to the repressilator, are ideal in that they contain the minimum number of regulatory connections, matching the number of nodes in the system. Fewer connections would result in some nodes remaining unregulated. An additional advantage of these circuits is the presence of a lower duty cycle in certain nodes. Further details of these circuits can be found in the <xref ref-type="supplementary-material" rid="SD1">SI Section 2.6.2</xref>.</p></sec></sec><sec id="S13"><title>Experimental example: a light sensor</title><p id="P31">In the previous section, we demonstrated how to use GRN modeler to theoretically explore the behavior of new circuit designs. However, preliminary experimental data are often available when investigating a GRN. In this case, a model can help to gain further insight to support data interpretation and to suggest additional experiments. In this section, we provide an example demonstrating the interplay between GRN modeler and experimental approaches in the development of a light-sensitive biosensor.</p><p id="P32">We sought to engineer <italic>E. coli</italic> as a bacterial light sensor. We envisioned <italic>E. coli</italic> growing on a solid gel surface and tracking light intensity and fluctuations over several days. Light exposure regulates the expression levels of the biosensor circuitry, resulting in dynamic encoding of the input in the form of concentric rings within the colony. This approach translates dynamical changes of the input into a spatial pattern, which is very much reminiscent of concentric seasonal rings within tree trunks. Likewise, the biosensor would allow us to decode the level of input at each given time point without continuous output recording.</p><sec id="S14"><title>Engineering the light-driven biosensor</title><p id="P33">To construct the light sensor, we chose to employ the VVD-AraC (BLADE system) [<xref ref-type="bibr" rid="R48">48</xref>], a protein composed of the C-terminal DNA binding domain of the transcription factor AraC fused to a light-triggered dimerization domain (Vivid, VVD) [<xref ref-type="bibr" rid="R49">49</xref>]. In the presence of light, VVD-AraC dimerizes and binds to the pBAD promoter to activate the expression of the downstream gene. We started by characterizing VVD-AraC in liquid culture, using cells harboring the plasmids coding for a fluorescent reporter (sfGFP) controlled by pBAD promoter, and VVD-AraC. As expected, after exposure to varying intensities of blue light, we observed an increase in fluorescence with increasing light intensity (<xref ref-type="fig" rid="F6">Figure 6a</xref>).</p><p id="P34">We implemented a 1-node circuit under the control of an external inducer (i.e., light) in the GRN_modeler interface, and set the input to be alternatively “ON” and “OFF”. Based on our simulations, a single-node light-sensitive circuit should be capable of tracking changes in light intensity over the day-night cycle and recording them as ring patterns. Briefly, cells with a fluorescent reporter can form ring patterns as the colony grows on solid medium. Active cells at the colony edge are inducible by light, while inner cells enter stationary phase, “freezing” the level of fluorescence at the corresponding space-time, which creates the rings. To test this prediction, we employed a 1-node circuit using light-inducible mCitrine to dynamically sense fluctuations in light. <xref ref-type="supplementary-material" rid="SD1">Figure S1</xref> shows that at high light intensities, this simple 1-node sensor resulted in alternating bright and dark fluorescent rings, effectively registering changes in light intensity. However, the sensitivity was low, with a maximally 1.25-fold difference between the brighter and darker rings.</p><p id="P35">Thereby, we wondered whether a more complex circuit with negative feedback would improve the biosensor dynamical range output, so we opted for the CRISPRlator, since our group was already working with this circuit. We sought to construct a CRISPRlator that is light-inducible (<xref ref-type="fig" rid="F6">Figure 6b</xref>). We modeled this circuit by starting from the CRISPRlator model. Although the CRISPRlator oscillates in liquid medium [<xref ref-type="bibr" rid="R29">29</xref>], it does not oscillate under the conditions tested when grown on a solid surface. Therefore, in order to resemble our biological system as closely as possible, we tuned the parameters so that the CRISPRlator model operates outside its oscillatory regime. Compared to the model presented in <xref ref-type="supplementary-material" rid="SD1">Table S4</xref>, we used the parameter k<sub>rdsd</sub> = 0.7762 min<sup>–1</sup> as suggested by Santos-Moreno <italic>et al</italic>. [<xref ref-type="bibr" rid="R43">43</xref>] for non-oscillatory circuits. Additionally, the dilution rate was reduced to k<sub><italic>d</italic></sub> = 0.005 min<sup>–1</sup>, as cell division occurs more slowly on a solid surface [<xref ref-type="bibr" rid="R50">50</xref>]. The model generated from GRN modeler confirmed that by applying light pulses, the expression of the fluorescent reporters should follow the input level (<xref ref-type="fig" rid="F6">Figure 6c</xref>). In <xref ref-type="fig" rid="F6">Figure 6d</xref>, we illustrate an interesting feature of our application for such cases: the ability to generate pseudo two-dimensional images from time series data. This pattern is not the result of a spatial simulation but is instead produced by assuming a constant growth rate and a small active zone at the edge of the colony, with the image generated by “rotating” the trajectories. By using this feature, the user can not only know the expression level of their circuit in liquid culture, but also predict the spatial patterns that the system generates when grown on solid culture.</p><p id="P36">Experimentally, we made the CRISPRlator light-inducible by cloning a pBAD promoter upstream of the mCherry node and co-transforming the circuit together with a plasmid (pJP_Bla01) coding for VVD-AraC (<xref ref-type="fig" rid="F6">Figure 6b</xref>). Similarly to the original CRISPRlator, the light-inducible version did not oscillate on solid medium (<xref ref-type="supplementary-material" rid="SD1">Figure S2</xref>). We grew cells containing the light-inducible CRISPRlator on agar plates with light that changed dynamically in a square wave shape (period 24 h, 41.6% duty-cycle) - resembling day-night cycles. Light pulses led to the expression of mCitrine (shown in green) at the edge of a growing colony, resulting in concentric fluorescent rings (<xref ref-type="fig" rid="F6">Figure 6e</xref>). This proved that our light sensor was capable to register the changes in the light intensity. Moreover, it was able to follow the light intensity changes in a wide range of light pulses, from period as short as 12 h to period as long as 40 hours (<xref ref-type="supplementary-material" rid="SD1">Figure S3</xref>). Encouraged by these results, we demonstrated the light-sensing capabilities of our system in a real-world application: We placed the petri dish on the laboratory bench, exposing it directly to natural light. As shown in <xref ref-type="fig" rid="F6">Figure 6f</xref>, our circuit successfully detected changes in ambient light levels.</p><p id="P37">We wondered what determined the substantial difference in the performance of the 1-node and the 3-node circuits. As our reaction kinetics model predicted visible rings in both circuits, it seems that the observed difference arises from an effect not accounted for in these simulations. We hypothesize that cells that are initially dark and still close to the edge of the colony can still partially react to the next light pulse and increase their fluorescence signal. This leads to a low dynamic range between the brighter and darker rings in the 1-node circuit. However, in the 3-node circuit, there is time-delay between the light-inducible node and the reporter node, due to the time it takes for the two repressions to happen (<xref ref-type="fig" rid="F6">Figure 6b</xref>). Thanks to this time delay, the dark regions become inactive before they have time to increase their fluorescence signal. This results in a higher dynamic range between bright and dark regions, which translates to sharper rings. This phenomenon is linked to the growth of colonies, so it is not reflected in our ODE-based simulations, which consistently produce sharp rings. More detailed spatial simulations would be necessary to observe this effect computationally.</p></sec><sec id="S15"><title>A two-input biosensor produces anti-phase rings</title><p id="P38">Besides the plasmid-encoded VVD-AraC, our working strain also contains a genomic copy of the (wild-type) AraC transcription factor. In the presence of L-arabinose, AraC dimerizes and activates the pBAD promoter. This chemical induction is up to 8-fold stronger (<xref ref-type="fig" rid="F7">Figure 7a</xref>) than the light induction. Consequently, in the presence of L-arabinose and light, both wild-type AraC (genomically expressed) and VVD-AraC (expressed from the plasmid) activate the same promoter. Contrary to our initial expectation that the two inducers would act synergistically, for L-arabinose concentrations <italic>&gt;</italic> 10<sup>−4</sup>%, addition of light results in lower expression than induction with L-arabinose only (<xref ref-type="fig" rid="F7">Figure 7a-b</xref>). Our explanation is that VVD-AraC has significantly lower activation efficiency compared to AraC. In the presence of both inducers, VDD-AraC competes with AraC for the same promoter, thus decreasing the binding of AraC and reducing the overall expression (<xref ref-type="fig" rid="F7">Figure 7c-d</xref>). We describe this phenomenon with a two variable Hill function: <disp-formula id="FD1"><label>(1)</label><mml:math id="M1"><mml:mrow><mml:mtext>HILL</mml:mtext><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:mspace width="0.2em"/><mml:mtext>Ara</mml:mtext><mml:mspace width="0.2em"/><mml:mo stretchy="false">]</mml:mo><mml:mo>,</mml:mo><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msup><mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:mspace width="0.2em"/><mml:mtext>Ara</mml:mtext><mml:mspace width="0.2em"/><mml:mo stretchy="false">]</mml:mo><mml:mo>/</mml:mo><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub></mml:mrow></mml:msup><mml:mo>+</mml:mo><mml:msub><mml:mi>k</mml:mi><mml:mrow><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub><mml:msup><mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub><mml:mo>/</mml:mo><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub></mml:mrow></mml:msup></mml:mrow><mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mo stretchy="false">[</mml:mo><mml:mspace width="0.2em"/><mml:mtext>Ara</mml:mtext><mml:mspace width="0.2em"/><mml:mo stretchy="false">]</mml:mo><mml:mo>/</mml:mo><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mi>a</mml:mi><mml:mi>r</mml:mi><mml:mi>a</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub></mml:mrow></mml:msup></mml:mrow><mml:mo>)</mml:mo></mml:mrow><mml:mo>⋅</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:mn>1</mml:mn><mml:mo>+</mml:mo><mml:msup><mml:mrow><mml:mrow><mml:mo>(</mml:mo><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub><mml:mo>/</mml:mo><mml:msub><mml:mi>K</mml:mi><mml:mrow><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow><mml:mrow><mml:msub><mml:mi>n</mml:mi><mml:mrow><mml:mi>l</mml:mi><mml:mi>i</mml:mi><mml:mi>g</mml:mi><mml:mi>h</mml:mi><mml:mi>t</mml:mi><mml:mspace width="0.2em"/></mml:mrow></mml:msub></mml:mrow></mml:msup></mml:mrow><mml:mo>)</mml:mo></mml:mrow></mml:mrow></mml:mfrac><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula> where both light and arabinose can activate the system, [Ara] and <italic>I</italic><sub><italic>light</italic></sub> are the arabinose concentration and the light intensity, <italic>k</italic><sub><italic>light</italic></sub> represents the strength of the light-inducible system compared to L-arabinose, while <italic>n</italic><sub><italic>ara</italic></sub>, <italic>K</italic><sub><italic>ara</italic></sub>, <italic>n</italic><sub><italic>light</italic></sub> and <italic>K</italic><sub><italic>light</italic></sub> are the Hill exponents and half saturation constants for the L-arabinose and for the light-inducible system, respectively. To achieve a quantitative agreement between the model and the experimental data, we fitted the parameters (<xref ref-type="supplementary-material" rid="SD1">Table S5</xref>) using MATLAB’s <monospace>lsqnonlin</monospace> function. In <xref ref-type="supplementary-material" rid="SD1">Figure S12</xref>, we demonstrate how this two-input node can be handled within GRN modeler.</p><p id="P39">Using the model with the fitted parameters, we simulated the patterns generated by the biosensor in response to light and L-arabinose. The simulations predicted that the sensor would form rings when exposed to light pulses and L-arabinose concentrations exceeding <italic>&gt;</italic> 10<sup>−4</sup>%. Remarkably, these rings would be in anti-phase compared to the rings produced in the absence of L-arabinose (that is, dark rings would replace bright rings, and vice versa; <xref ref-type="fig" rid="F8">Figure 8c</xref>). We then performed the experiment with square-wave light pulses in the presence of 0.2% L-arabinose. Indeed, L-arabinose inverted the phase of ring patterns upon light pulses (<xref ref-type="fig" rid="F8">Figure 8d-f</xref>, <xref ref-type="supplementary-material" rid="SD1">Figure S4</xref>). In other words, in the absence of L-arabinose, the light exposure leads to the expression of mCitrine. When L-arabinose is added, the pBAD promoter is strongly activated, so in the absence of light the entire colony is green. However, due to competition between AraC and VVD-AraC, light exposure decreases the expression of the first and third nodes (mCitrine), resulting in anti-phase rings in the colony (<xref ref-type="fig" rid="F8">Figure 8e</xref>).</p></sec><sec id="S16"><title>Increasing the light sensitivity with L-arabinose</title><p id="P40">The use of high and low L-arabinose concentrations in the light sensor goes beyond creating interesting patterns – it enables the development of more precise and reliable light-recording biosensors. In <xref ref-type="fig" rid="F9">Figure 9a</xref>, we illustrate how relative sensitivity to light varies with different L-arabinose concentrations under varying light exposures. Relative sensitivity (<italic>S</italic><sub><italic>F</italic>,<italic>I</italic></sub>) is defined as: <disp-formula id="FD2"><label>(2)</label><mml:math id="M2"><mml:mrow><mml:msub><mml:mi>S</mml:mi><mml:mrow><mml:mi>F</mml:mi><mml:mo>,</mml:mo><mml:mi>I</mml:mi></mml:mrow></mml:msub><mml:mo>=</mml:mo><mml:mrow><mml:mo>|</mml:mo><mml:mrow><mml:mfrac><mml:mrow><mml:mo>∂</mml:mo><mml:mi>F</mml:mi></mml:mrow><mml:mrow><mml:mo>∂</mml:mo><mml:mi>I</mml:mi></mml:mrow></mml:mfrac><mml:mfrac><mml:mi>I</mml:mi><mml:mi>F</mml:mi></mml:mfrac></mml:mrow><mml:mo>|</mml:mo></mml:mrow><mml:mo>.</mml:mo></mml:mrow></mml:math></disp-formula></p><p id="P41">This dimensionless quantity describes how the recorded fluorescence intensity (<italic>F</italic>) changes with variations in applied light intensity (<italic>I</italic>). The absolute value simplifies the comparisons across different L-arabinose concentration regions. Without this adjustment, the sensitivity at higher L-arabinose concentrations would be negative, as increased light intensity results in decreased fluorescence (producing anti-phase rings, as previously discussed). The relative sensitivity was calculated based on the function fitted in <xref ref-type="fig" rid="F7">Figure 7b</xref>. A higher sensitivity value indicates more reliable measurements. The maximum light intensity produced by the light device LITOS (2.3 W·<italic>m</italic><sup>−2</sup>) is still lower than the total sunlight spectrum (97.8 W·<italic>m</italic><sup>−2</sup>) measured during the daytime in our lab, meaning that it is realistic to extrapolate the light intensity in our model to <italic>&gt;</italic> 100%. Interestingly, at low light exposure (<italic>&lt;</italic> 150%), relative sensitivity is greatest at low L-arabinose concentrations (<italic>&lt;</italic> 10<sup>−4</sup>%). Conversely, at high light intensity (<italic>&gt;</italic> 150%), sensitivity is highest at higher L-arabinose concentrations (<italic>&gt;</italic> 10<sup>−4</sup>%). For ambient light exposure, where light intensity fluctuates over a wide range, we thus predict that using two sensors with both high and low L-arabinose concentrations would ensure higher accuracy across the full intensity spectrum. Notably, the relative sensitivity approaches zero around 10<sup>−4</sup>% L-arabinose, where the strength of the light and L-arabinose systems are balanced, resulting in a light insensitive system.</p><p id="P42">In <xref ref-type="fig" rid="F9">Figure 9b</xref>, we show the results of a simulated experiment investigating how arabinose concentration affects the precision of light measurements. Fluorescence intensity (<italic>F</italic>) was calculated for two L-arabinose concentrations: low (10<sup>−6</sup>%) and high (1%), as a function of light intensity (ranging from 0% to 500%). To simulate experimental data (<italic>F</italic><sub><italic>exp</italic></sub>), Gaussian noise (𝒩 (0, 1)) with an amplitude <italic>A</italic> = 0.1 was added, resulting in <italic>F</italic><sub><italic>exp</italic></sub> = (<italic>A</italic> · <italic>𝒩</italic> (0, 1) + 1)<italic>F</italic>. This process was repeated 1,000 times, and the light intensity was estimated from the simulated fluorescence data using MATLAB’s <monospace>nlinfit</monospace> function. Finally, we determined the relative error (<italic>err</italic>) from the 95% confidence interval (<italic>w</italic><sub>95%</sub>) of the fit: <disp-formula id="FD3"><label>(3)</label><mml:math id="M3"><mml:mrow><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>r</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mi>w</mml:mi><mml:mrow><mml:mn>95</mml:mn><mml:mtext>%</mml:mtext></mml:mrow></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mi>I</mml:mi><mml:mrow><mml:mi>f</mml:mi><mml:mi>i</mml:mi><mml:mi>t</mml:mi></mml:mrow></mml:msub></mml:mrow></mml:mfrac><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula>where <italic>I</italic><sub><italic>fit</italic></sub> is the fitted light intensity. Consistent with our earlier conclusions, low L-arabinose concentrations (shown in blue) yield low relative error at low light exposures, while higher L-arabinose concentrations (shown in red) are advantageous at higher light exposures (<xref ref-type="fig" rid="F9">Figure 9b</xref>). Thus, by using L-arabinose as an input, we can extend the operational range of our light sensor, enabling more reliable measurements across a broader light spectrum.</p></sec></sec></sec><sec id="S17" sec-type="discussion"><title>Discussion</title><p id="P43">In this work, we have developed a user-friendly application with a graphical interface for simulating GRNs. Initially, we demonstrated the tool’s basic features using well-established circuits. We showed how to construct the classic repressilator circuit using both the Elowitz [<xref ref-type="bibr" rid="R27">27</xref>] and Tomazou models [<xref ref-type="bibr" rid="R28">28</xref>], and how to conduct both deterministic and stochastic simulations. Recognizing the increasing importance of CRISPR-based circuits in synthetic biology, we incorporated and enhanced a recently published model [<xref ref-type="bibr" rid="R43">43</xref>] to describe the CRISPRlator [<xref ref-type="bibr" rid="R29">29</xref>]. This advancement facilitates the design of subsequent CRISPRi-based genetic circuits by users. Additionally, we showcased the parameter scan functionality with examples of FFLs, illustrating the tool’s capability to explore and analyze different parameter settings.</p><p id="P44">After presenting well-known circuits, we aimed to demonstrate how our tool can be utilized to design and analyze new GRNs. While the original repressilator family can oscillate with an odd number of nodes, we have developed two new oscillator families: the “reptolator” and the “actolator”, which can give rise to robust oscillations with an even number of nodes. These designs incorporate consecutive repression and activation rings combined with toggle switches. Furthermore, we demonstrated that by replacing some repressions with activations in the repressilator, we can create the “acrelator”, which can also oscillate with an even number of nodes. Furthermore, the varying duty cycles of the nodes in this configuration could be advantageous for decreasing the burden on the cells or for specific applications such as synthesizing block copolymers, where the properties are influenced by the length of the polymer blocks [<xref ref-type="bibr" rid="R51">51</xref>, <xref ref-type="bibr" rid="R52">52</xref>]. The complexity of these newly designed circuits represents an exciting and challenging opportunity for their construction and experimental validation in the future. These examples highlight the value of our application as a powerful tool for streamlining the modeling process and significantly accelerating the design of new GRNs.</p><p id="P45">Finally, we presented an experimental example featuring a CRISPRi-based circuit sensitive to both light and L-arabinose, demonstrating the capability of our software to predict complex dynamics. Specifically, we used the application to model competitive effects between inputs at varying concentrations, leading to phase and anti-phase responses to periodic external light signals. As a potential application, colonies with this circuit could be used to track day-night light intensity changes over time. Moreover, according to the model and our preliminary experimental results, we propose that adjusting L-arabinose concentrations could enhance the accuracy of light measurements.</p><p id="P46">As research advances, specialized tools continue to emerge for specific fields. For instance, the BioSwitch toolbox is designed for studying the dynamic behavior of gene regulatory networks [<xref ref-type="bibr" rid="R53">53</xref>], iBioSim [<xref ref-type="bibr" rid="R19">19</xref>, <xref ref-type="bibr" rid="R20">20</xref>] and Flapjack [<xref ref-type="bibr" rid="R24">24</xref>] allow for the construction of GRNs using fundamental components. Although these are powerful applications, they may not be as efficient for modeling the phenomenological behavior of larger systems, while other otherwise great tools lack a GUI [<xref ref-type="bibr" rid="R25">25</xref>], which can simplify the model building process. Our interface addresses this gap by utilizing nodes as basic building blocks. This results in several advantages: it can significantly facilitate the modeling process, enhance the analysis of complex systems and provide a user-friendly GUI. Our intuitive tool enables users to model GRNs and predict and compare their dynamical behavior with ease, accelerating the achievement of desired outcomes. Additionally, it simplifies the creation of novel circuits and facilitates the rapid testing of hypotheses, making it easier to explore and validate innovative genetic designs.</p><p id="P47">Using our application becomes straightforward once a model has been implemented. However, a basic familiarity with SimBiology syntax is necessary to effectively develop or implement new models. In the future, we aim to expand our application to support the implementation of node models. For instance, our current model for the CRISPR system does not yet include a description for CRISPR activation. Among others, future work will involve creating a model that incorporates CRISPR activation and fine-tuning the parameters based on experimental data. Another limitation, as observed in our one node spatial pattern experiments (<xref ref-type="supplementary-material" rid="SD1">Figure S1</xref>), is that our application only accounts for reaction kinetics. To accurately capture other spatio-temporal phenomena, such as diffusion, additional modeling steps are required.</p><p id="P48">While our primary focus has been on gene regulatory networks for synthetic biology, other biologists might also use our tool to explore the properties of their favorite (naturally occurring) gene regulatory networks. Here, we have been using GRN modeler for describing intercellular processes and gene regulatory networks. However, the framework we have developed could be adapted for other applications. In this broader context, “nodes” might represent different cells or even organs or organisms, and “regulators” could denote various interactions between these entities. With appropriate modifications and new models, our tool has the potential to model a wide range of systems.</p><p id="P49">In conclusion, we aim, with GRN modeler, to empower (synthetic) biologists, even those with limited expertise in mathematics or programming, to effectively model their systems of interest. By bridging computational and experimental biology, this tool has the potential to accelerate scientific progress and innovation in the field.</p></sec><sec id="S18" sec-type="methods"><title>Methods</title><sec id="S19"><title>Strains and plasmids</title><p id="P50">For cloning we used <italic>E. coli</italic> strain DH5<italic>α</italic>. For the light sensor, we used the <italic>E. coli</italic> strain MK01 [<xref ref-type="bibr" rid="R54">54</xref>]. MK01 was a kind gift from Sander Tans (Addgene #195090). The plasmids were constructed, using the methods described previously [<xref ref-type="bibr" rid="R55">55</xref>]. All plasmids are summarized in <xref ref-type="supplementary-material" rid="SD1">Table S1</xref>. Plasmids, and their maps and sequences are available through Addgene. The light-inducible system is based on the pBLADE ONLY C plasmid [<xref ref-type="bibr" rid="R48">48</xref>]. pBLADE ONLY C was a kind gift from Barbara Di Ventura (Addgene plasmid #168050). We modified it to contain a gentamicin resistance gene instead of the chloramphenicol resistance, generating plasmid pJP Bla01. We created a reporter plasmid starting from plasmid pCOLA-AraC-pBAD-GFP [<xref ref-type="bibr" rid="R56">56</xref>], which contains a ColA origin of replication, a copy of <italic>araC</italic> and sfGFP under control of the pBAD promoter. By deleting <italic>araC</italic> from the original backbone, we generated pJP Ctrl04.</p><p id="P51">For the 1-node biosensor we constructed plasmid pJP_1node. It contains a pBAD promoter upstream of mCitrine. It was constructed by substituting the sfGFP reporter from pJP_Ctrl04 with mCitrine, making it comparable to the 3-node circuit in the ring pattern experiments.</p><p id="P52">For the 3-node light- and L-arabinose-inducible biosensor we created plasmid pJP Osc05. It is derived from pJ2072 (1-OS2), an L-arabinose inducible CRISPRlator [<xref ref-type="bibr" rid="R43">43</xref>], which contains a pBAD promoter upstream of the mCherry node. Additionally, we moved the kanamycin resistance gene between the mCitrine and mCerulean nodes. This improved the construct stability, as recombination between mCitrine and mCerulean genes would result in the loss of the resistance gene. We also removed the <italic>araC</italic> gene.</p></sec><sec id="S20"><title>Characterization of light and L-arabinose induction in liquid culture</title><p id="P53">For characterizing the light and L-arabinose sensing, we co-transformed pJP Bla01 and pJP Ctrl04 into MK01. A single colony was inoculated into a tube containing 3 mL of LB liquid medium supplemented with gentamicin (25 <italic>µ</italic>g/mL) and kanamycin (50 <italic>µ</italic>g/mL) and incubated overnight at 30°C with shaking. 0.5 mL of the culture was pelleted, washed with saline water (0.9%) and resuspended in 0.5 mL of EZ medium (Teknova), supplemented with 0.4% glycerol. The resuspended culture was diluted 50x in EZ medium containing the necessary antibiotics and L-arabinose (final concentration of 0, 0.0001, 0.0005, 0.001, 0.01, 0.2 and 1%). For each condition 200 <italic>µ</italic>L were added to a 96-well plate (Greiner, REF #655090). The 96-well plate was placed on top of a LITOS light device [<xref ref-type="bibr" rid="R57">57</xref>] and incubated at room temperature under agitation at 450 rpm (Titramax 1000, heidolph). For every L-arabinose concentration, cells were induced with constant blue light (460 nm), at 0, 14, 29,43, 57, 71, 83 and 100% intensity. After 24 hours, OD 600 and sfGFP fluorescence were measured (Ex: 479/12.5, Em: 520/12.5) with a microplate reader (Synergy H1, BioTek). This experiment was performed three times, corresponding to three biological replicates (for which we calculated the mean and standard deviation). For each well, sfGFP measurement was normalized by its respective OD 600. No background subtraction was performed.</p></sec><sec id="S21"><title>Spatial patterning experiment</title><p id="P54">For the 1-node light-sensor, we transformed pJP_Bla01, pJP_1node and pJ1996_v2 into MK01. For the 3-node light-sensor we transformed pJP_Osc05, pJP_Bla01 and pJ1996_v2 (Addgene plasmid #140664)[<xref ref-type="bibr" rid="R29">29</xref>] into MK01. Tubes containing 5 ml LB liquid medium with gentamicin (25 <italic>µ</italic>g/mL), kanamycin (50 <italic>µ</italic>g/mL) and spectinomycin (50 <italic>µ</italic>g/mL) were inoculated with single colonies and incubated overnight at 30°C with shaking. The cultures were serially diluted in saline water (0.9%) in order to seed approximately 20 colonies per plate (90 mm diameter Petri dish containing LB agar, antibiotics as indicated above and 0 or 0.2% L-arabinose). The plates were covered in aluminum foil and placed in a 30 <sup><italic>°</italic></sup>C incubator. After 20 h, the aluminum foil was removed and the plates were placed upside down on top of the LITOS device [<xref ref-type="bibr" rid="R57">57</xref>] for light induction at room temperature. For the phase and anti-phase experiment using the 3-node circuit, light intensity varied from 0% to 15%, in a square wave shape (T = 24h) and 41.66% duty cycle, while for the experiment with different period of light pulses, the duty cycle was 50%. For the 1-node circuit, cells were subject to light pulses with square wave shape (T = 24h) with intensity varying from 0% to L% (L = 0%, 25%, 50%, 75%, 100%) and 50% duty cycle. After 96 h, we took pictures of the colonies using an AxioImager M1 fluorescence microscope (Zeiss) with an Achromat 2.5X/0.12 Fluar objective. YFP (Ex: 500/20, Em: 535/30) filter was used to measure the fluorescence of mCitrine. The exposure time was set to 100 ms.</p><p id="P55">For better visualization of the anti-phase rings, the contrast of the images was enhanced. Quantification was done on original data and not on the images with enhanced contrast.</p><p id="P56">Daylight (15 hours daylength) sensing was done following the same method described above for the ring patterns without L-arabinose, but instead of placing the plates on the LITOS device, they were placed near the window in our laboratory, for 4 days, at 22 °C. The indoor white light was turned off after 18h00 and turned on from 9h00.</p></sec><sec id="S22"><title>Image analysis</title><p id="P57">In our image analysis, we first identified the center of the colony. An intensity threshold was determined using Otsu’s method [<xref ref-type="bibr" rid="R58">58</xref>], and the colony center was located in the resulting binary image using MATLAB’s <italic>regionprops</italic> function. Next, we transformed the image to polar coordinates and calculated the fluorescent intensity as a function of radius. Baseline correction was then applied by fitting a third-order polynomial to the intensity data and subtracting it to enhance the visibility of individual peaks. We subsequently applied a moving average smoothing with a window of 100 data points. Finally, we rescaled the intensity to the [0,1] range for better comparison across images.</p></sec><sec id="S23"><title>Simulations</title><p id="P58">We conducted deterministic simulations using MATLAB’s <monospace>ode15s</monospace> and <monospace>sundials</monospace> solvers with the SimBiology toolbox. For stochastic simulations, we employed the <monospace>adaptivesa</monospace> solver from COPASI. We built the reaction networks and the differential equations using our application, the GRN modeler. All examples can be found in the <monospace>analyzing_examples</monospace> folder of the application. Details on initial conditions, reactions, and rate laws were generated using the SimBiology toolbox and are provided in the SI. The specific filenames for these files are listed in the figure captions that display the respective simulation results.</p></sec></sec><sec sec-type="supplementary-material" id="SM"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="SD1"><label>Supplementary Information</label><media xlink:href="EMS202288-supplement-Supplementary_Information.pdf" mimetype="application" mime-subtype="pdf" id="d152aAcEbB" position="anchor"/></supplementary-material></sec></body><back><ack id="S24"><title>Acknowledgements</title><p>This work was funded by a Swiss National Science Foundation (310030 200532 awarded to Y.S), a fellowship of the Agassiz foundation (awarded to J.P), a UNIL FBM PhD fellowship in Life Sciences (awarded to J.P) and the University of Lausanne.</p></ack><fn-group><fn fn-type="conflict" id="FN1"><p id="P59"><bold>Competing interests</bold></p><p id="P60">The authors declare no competing interests.</p></fn><fn fn-type="con" id="FN2"><p id="P61"><bold>Author contributions</bold></p><p id="P62">G.H. designed the application and performed the mathematical modeling. J.P. and Y.S. designed the experimental research. J.P. performed the experiments. J.P. and G.H. analysed the data and prepared the corresponding figures. E.B. demonstrated how to use our application in the instructional video. J.P., G.H, E.B. and Y.S. wrote the manuscript. All authors have given approval to the final version of the manuscript.</p></fn><fn id="FN3"><label>1</label><p id="P63"><italic>N</italic> = 4<italic>n, n</italic> ∈ ℤ <sup>+</sup> and <italic>N</italic> is the number of nodes</p></fn><fn id="FN4"><label>2</label><p id="P64"><italic>n</italic><sub><italic>j</italic></sub> = <italic>n</italic><sub><italic>i</italic>+2</sub>, where <italic>i</italic>,<inline-formula><mml:math id="M4"><mml:mrow><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:msubsup><mml:mi>ℤ</mml:mi><mml:mi>N</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <italic>n</italic><sub><italic>i</italic></sub>, <italic>n</italic><sub><italic>j</italic></sub> are the actual and next node while <italic>N</italic> is the number of the nodes, while <inline-formula><mml:math id="M5"><mml:mrow><mml:msubsup><mml:mi>ℤ</mml:mi><mml:mi>N</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> describe the set {1, 2, …, <italic>N</italic>} under modulo <italic>N</italic> arithmetic</p></fn><fn id="FN5"><label>3</label><p id="P65"><italic>n</italic><sub><italic>j</italic></sub> = <italic>n</italic><sub><italic>i</italic>+<italic>N/</italic>2+1</sub>, where <italic>i</italic>,<inline-formula><mml:math id="M6"><mml:mrow><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:msubsup><mml:mi>ℤ</mml:mi><mml:mi>N</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <italic>n</italic><sub><italic>i</italic></sub>, <italic>n</italic><sub><italic>j</italic></sub> are the next and previous node while <italic>N</italic> is the number of the nodes.</p></fn><fn id="FN6"><label>4</label><p id="P66"><italic>N</italic> = 4<italic>n</italic> + 2, where <italic>n</italic> ∈ ℤ <sup>+</sup> and <italic>N</italic> is the number of the nodes.</p></fn><fn id="FN7"><label>5</label><p id="P67"><italic>n</italic><sub><italic>j</italic></sub> = <italic>n</italic><sub><italic>i</italic>+1</sub>, where <italic>i</italic>, <inline-formula><mml:math id="M7"><mml:mrow><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:msubsup><mml:mi>ℤ</mml:mi><mml:mi>N</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula> and <italic>n</italic><sub><italic>i</italic></sub>, <italic>n</italic><sub><italic>j</italic></sub> are the actual and next node while <italic>N</italic> is the number of the nodes.</p></fn><fn id="FN8"><label>6</label><p id="P68">The regulation route for the repressilator: <italic>n</italic><sub><italic>i</italic></sub> −| <italic>n</italic><sub><italic>i</italic>+1</sub> −| <italic>n</italic><sub><italic>i</italic>+2</sub>, for the reptolator: <italic>n</italic><sub><italic>i</italic></sub> −| <italic>n</italic><sub><italic>i</italic>+1</sub> −| <italic>n</italic><sub><italic>i</italic>+1+<italic>N/</italic>2</sub> and <italic>n</italic><sub><italic>i</italic></sub> −| <italic>n</italic><sub><italic>i</italic>+<italic>N/</italic>2</sub> −| <italic>n</italic><sub><italic>i</italic>+1+<italic>N/</italic>2</sub>, while for the actolator: <italic>n</italic><sub><italic>i</italic></sub> → <italic>n</italic><sub><italic>i</italic>+1</sub> and <italic>n</italic><sub><italic>i</italic></sub> −| <italic>n</italic><sub><italic>i</italic>+<italic>N/</italic>2</sub> → <italic>n</italic><sub><italic>i</italic>+1+<italic>N/</italic>2</sub> −| <italic>n</italic><sub><italic>i</italic>+1</sub>, where <italic>n</italic><sub><italic>i</italic></sub> denotes the actual activated node, <italic>N</italic> is the number of the nodes and <italic>i</italic>, <inline-formula><mml:math id="M8"><mml:mrow><mml:mi>j</mml:mi><mml:mo>∈</mml:mo><mml:msubsup><mml:mi>ℤ</mml:mi><mml:mi>N</mml:mi><mml:mo>+</mml:mo></mml:msubsup></mml:mrow></mml:math></inline-formula>.</p></fn></fn-group><ref-list><ref id="R1"><label>1</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Ranganathan</surname><given-names>S</given-names></name><name><surname>Nakai</surname><given-names>K</given-names></name><name><surname>Schonbach</surname><given-names>C</given-names></name></person-group><source>Encyclopedia of Bioinformatics and Computational Biology: ABC of Bioinformatics</source><publisher-name>Elsevier Science Publishers B. V., NLD</publisher-name><year>2018</year><edition>1st</edition></element-citation></ref><ref id="R2"><label>2</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Walhout</surname><given-names>M</given-names></name><name><surname>Vidal</surname><given-names>M</given-names></name><name><surname>Dekker</surname><given-names>J</given-names></name></person-group><source>Handbook of Systems Biology: Concepts and Insights</source><publisher-name>Academic Press, Inc</publisher-name><publisher-loc>USA</publisher-loc><year>2018</year><edition>1st</edition></element-citation></ref><ref id="R3"><label>3</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hanczyc</surname><given-names>MM</given-names></name></person-group><article-title>Engineering Life: A Review of Synthetic Biology</article-title><source>Artificial Life</source><year>2020</year><volume>26</volume><fpage>260</fpage><lpage>273</lpage><pub-id pub-id-type="pmid">32271630</pub-id></element-citation></ref><ref id="R4"><label>4</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Benner</surname><given-names>SA</given-names></name><name><surname>Sismour</surname><given-names>AM</given-names></name></person-group><article-title>Synthetic biology</article-title><source>Nature Reviews Genetics</source><year>2005</year><volume>6</volume><fpage>533</fpage><lpage>543</lpage><pub-id pub-id-type="pmcid">PMC7097405</pub-id><pub-id pub-id-type="pmid">15995697</pub-id><pub-id pub-id-type="doi">10.1038/nrg1637</pub-id></element-citation></ref><ref id="R5"><label>5</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Garner</surname><given-names>KL</given-names></name></person-group><article-title>Principles of synthetic biology</article-title><source>Essays in Biochemistry</source><year>2021</year><volume>65</volume><fpage>791</fpage><lpage>811</lpage><pub-id pub-id-type="pmcid">PMC8578974</pub-id><pub-id pub-id-type="pmid">34693448</pub-id><pub-id pub-id-type="doi">10.1042/EBC20200059</pub-id></element-citation></ref><ref id="R6"><label>6</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Ermentrout</surname><given-names>B</given-names></name></person-group><source>Simulating, Analyzing, and Animating Dynamical Systems</source><publisher-name>Society for Industrial and Applied Mathematics</publisher-name><year>2002</year></element-citation></ref><ref id="R7"><label>7</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Johnson</surname><given-names>KA</given-names></name><name><surname>Simpson</surname><given-names>ZB</given-names></name><name><surname>Blom</surname><given-names>T</given-names></name></person-group><article-title>Global Kinetic Explorer: A new computer program for dynamic simulation and fitting of kinetic data</article-title><source>Analytical Biochemistry</source><year>2009</year><volume>387</volume><fpage>20</fpage><lpage>29</lpage><pub-id pub-id-type="pmid">19154726</pub-id></element-citation></ref><ref id="R8"><label>8</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Johnson</surname><given-names>KA</given-names></name><name><surname>Simpson</surname><given-names>ZB</given-names></name><name><surname>Blom</surname><given-names>T</given-names></name></person-group><article-title>FitSpace Explorer: An algorithm to evaluate multidimensional parameter space in fitting kinetic data</article-title><source>Analytical Biochemistry</source><year>2009</year><volume>387</volume><fpage>30</fpage><lpage>41</lpage><pub-id pub-id-type="pmid">19168024</pub-id></element-citation></ref><ref id="R9"><label>9</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Johnson</surname><given-names>KA</given-names></name></person-group><person-group person-group-type="editor"><name><surname>Johnson</surname><given-names>ML</given-names></name><name><surname>Brand</surname><given-names>L</given-names></name></person-group><source>Computer Methods Part B</source><publisher-name>Academic Press</publisher-name><year>2009</year><fpage>601</fpage><lpage>626</lpage></element-citation></ref><ref id="R10"><label>10</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hucka</surname><given-names>M</given-names></name><etal/></person-group><article-title>The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models</article-title><source>Bioinformatics</source><year>2003</year><volume>19</volume><fpage>524</fpage><lpage>531</lpage><pub-id pub-id-type="pmid">12611808</pub-id></element-citation></ref><ref id="R11"><label>11</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kitano</surname><given-names>H</given-names></name></person-group><article-title>Evolving a lingua franca and associated software infrastructure for computational systems biology: the Systems Biology Markup Language (SBML) project. English</article-title><source>Systems Biology</source><year>2004</year><day>1</day><volume>1</volume><issue>12</issue><fpage>41</fpage><lpage>53</lpage><pub-id pub-id-type="pmid">17052114</pub-id></element-citation></ref><ref id="R12"><label>12</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kosuri</surname><given-names>S</given-names></name><name><surname>Kelly</surname><given-names>JR</given-names></name><name><surname>Endy</surname><given-names>D</given-names></name></person-group><article-title>TABASCO: A single molecule, base-pair resolved gene expression simulator</article-title><source>BMC Bioinformatics</source><year>2007</year><volume>8</volume><fpage>480</fpage><pub-id pub-id-type="pmcid">PMC2242808</pub-id><pub-id pub-id-type="pmid">18093293</pub-id><pub-id pub-id-type="doi">10.1186/1471-2105-8-480</pub-id></element-citation></ref><ref id="R13"><label>13</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hoops</surname><given-names>S</given-names></name><etal/></person-group><article-title>COPASI—a COmplex PAthway SImulator</article-title><source>Bioinformatics</source><year>2006</year><volume>22</volume><fpage>3067</fpage><lpage>3074</lpage><pub-id pub-id-type="pmid">17032683</pub-id></element-citation></ref><ref id="R14"><label>14</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Swaminathan</surname><given-names>A</given-names></name><name><surname>Poole</surname><given-names>W</given-names></name><name><surname>Pandey</surname><given-names>A</given-names></name><name><surname>Hsiao</surname><given-names>V</given-names></name><name><surname>Murray</surname><given-names>RM</given-names></name></person-group><article-title>Fast and flexible simulation and parameter estimation for synthetic biology using bioscrape</article-title><source>bioRxiv</source><year>2022</year></element-citation></ref><ref id="R15"><label>15</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Somogyi</surname><given-names>ET</given-names></name><name><surname>Karlsson</surname><given-names>MT</given-names></name><name><surname>Swat</surname><given-names>M</given-names></name><name><surname>Galdzicki</surname><given-names>M</given-names></name><name><surname>Sauro</surname><given-names>HM</given-names></name></person-group><article-title>libRoadRunner: A High Performance SBML Compliant Simulator</article-title><source>bioRxiv</source><year>2013</year></element-citation></ref><ref id="R16"><label>16</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Welsh</surname><given-names>C</given-names></name><etal/></person-group><article-title>libRoadRunner 2.0: a high performance SBML simulation and analysis library</article-title><source>Bioinformatics</source><year>2022</year><volume>39</volume><elocation-id>btac770</elocation-id><pub-id pub-id-type="pmcid">PMC9825722</pub-id><pub-id pub-id-type="pmid">36478036</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btac770</pub-id></element-citation></ref><ref id="R17"><label>17</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dörr</surname><given-names>A</given-names></name><name><surname>Keller</surname><given-names>R</given-names></name><name><surname>Zell</surname><given-names>A</given-names></name><name><surname>Dräger</surname><given-names>A</given-names></name></person-group><article-title>SBMLSimulator: A Java Tool for Model Simulation and Parameter Estimation in Systems Biology</article-title><source>Computation</source><year>2014</year><volume>2</volume><fpage>246</fpage><lpage>257</lpage><pub-id pub-id-type="pmcid">PMC7093077</pub-id><pub-id pub-id-type="pmid">32211200</pub-id><pub-id pub-id-type="doi">10.3390/computation2040246</pub-id></element-citation></ref><ref id="R18"><label>18</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Garcia-Campos</surname><given-names>MA</given-names></name><name><surname>Schwartz</surname><given-names>S</given-names></name></person-group><article-title>txtools: an R package facilitating analysis of RNA modifications, structures, and interactions</article-title><source>Nucleic Acids Research</source><year>2024</year><volume>52</volume><fpage>e42</fpage><pub-id pub-id-type="pmcid">PMC11077046</pub-id><pub-id pub-id-type="pmid">38512053</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkae203</pub-id></element-citation></ref><ref id="R19"><label>19</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Myers</surname><given-names>CJ</given-names></name><etal/></person-group><article-title>iBioSim: a tool for the analysis and design of genetic circuits</article-title><source>Bioinformatics</source><year>2009</year><volume>25</volume><fpage>2848</fpage><lpage>2849</lpage><pub-id pub-id-type="pmid">19628507</pub-id></element-citation></ref><ref id="R20"><label>20</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Watanabe</surname><given-names>L</given-names></name><etal/></person-group><article-title>iBioSim 3: A Tool for Model-Based Genetic Circuit Design</article-title><source>ACS Synthetic Biology</source><year>2019</year><volume>8</volume><fpage>1560</fpage><lpage>1563</lpage><pub-id pub-id-type="pmid">29944839</pub-id></element-citation></ref><ref id="R21"><label>21</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Singhal</surname><given-names>V</given-names></name><name><surname>Tuza</surname><given-names>ZA</given-names></name><name><surname>Sun</surname><given-names>ZZ</given-names></name><name><surname>Murray</surname><given-names>RM</given-names></name></person-group><article-title>A MATLAB toolbox for modeling genetic circuits in cell-free systems†</article-title><source>Synthetic Biology</source><year>2021</year><volume>6</volume><elocation-id>ysab007</elocation-id><pub-id pub-id-type="pmcid">PMC8102020</pub-id><pub-id pub-id-type="pmid">33981862</pub-id><pub-id pub-id-type="doi">10.1093/synbio/ysab007</pub-id></element-citation></ref><ref id="R22"><label>22</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>McClymont</surname><given-names>K</given-names></name><name><surname>Soyer</surname><given-names>OS</given-names></name></person-group><article-title>Metabolic tinker: an online tool for guiding the design of synthetic metabolic pathways</article-title><source>Nucleic Acids Research</source><year>2013</year><volume>41</volume><fpage>e113</fpage><pub-id pub-id-type="pmcid">PMC3675468</pub-id><pub-id pub-id-type="pmid">23580552</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkt234</pub-id></element-citation></ref><ref id="R23"><label>23</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Philippou</surname><given-names>J</given-names></name><name><surname>Yáñez Feliú</surname><given-names>G</given-names></name><name><surname>Rudge</surname><given-names>TJ</given-names></name></person-group><article-title>WebCM: A Web-Based Platform for Multiuser Individual-Based Modeling of Multicellular Microbial Populations and Communities</article-title><source>ACS Synthetic Biology</source><year>2024</year><volume>13</volume><fpage>1952</fpage><lpage>1955</lpage><pub-id pub-id-type="pmcid">PMC11197089</pub-id><pub-id pub-id-type="pmid">38743439</pub-id><pub-id pub-id-type="doi">10.1021/acssynbio.3c00486</pub-id></element-citation></ref><ref id="R24"><label>24</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yáñez Feliú</surname><given-names>G</given-names></name><etal/></person-group><article-title>Flapjack: Data Management and Analysis for Genetic Circuit Characterization</article-title><source>ACS Synthetic Biology</source><year>2021</year><volume>10</volume><fpage>183</fpage><lpage>191</lpage><pub-id pub-id-type="pmid">33382586</pub-id></element-citation></ref><ref id="R25"><label>25</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Vidal</surname><given-names>G</given-names></name><name><surname>Vitalis</surname><given-names>C</given-names></name><name><surname>Rudge</surname><given-names>TJ</given-names></name></person-group><article-title>LOICA: Integrating Models with Data for Genetic Network Design Automation</article-title><source>ACS Synthetic Biology</source><year>2022</year><volume>11</volume><fpage>1984</fpage><lpage>1990</lpage><pub-id pub-id-type="pmcid">PMC9127962</pub-id><pub-id pub-id-type="pmid">35507566</pub-id><pub-id pub-id-type="doi">10.1021/acssynbio.1c00603</pub-id></element-citation></ref><ref id="R26"><label>26</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rossi</surname><given-names>NA</given-names></name><name><surname>Dunlop</surname><given-names>MJ</given-names></name></person-group><article-title>Making Waves with Synthetic Oscillators</article-title><source>Cell Systems</source><year>2018</year><volume>6</volume><fpage>406</fpage><lpage>407</lpage><pub-id pub-id-type="pmid">29698647</pub-id></element-citation></ref><ref id="R27"><label>27</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Elowitz</surname><given-names>MB</given-names></name><name><surname>Leibler</surname><given-names>S</given-names></name></person-group><article-title>A synthetic oscillatory network of transcriptional regulators</article-title><source>Nature</source><year>2000</year><volume>403</volume><fpage>335</fpage><lpage>338</lpage><pub-id pub-id-type="pmid">10659856</pub-id></element-citation></ref><ref id="R28"><label>28</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tomazou</surname><given-names>M</given-names></name><name><surname>Barahona</surname><given-names>M</given-names></name><name><surname>Polizzi</surname><given-names>KM</given-names></name><name><surname>Stan</surname><given-names>G-B</given-names></name></person-group><article-title>Computational Re-design of Synthetic Genetic Oscillators for Independent Amplitude and Frequency Modulation</article-title><source>Cell Systems</source><year>2018</year><volume>6</volume><fpage>508</fpage><lpage>520</lpage><elocation-id>e5</elocation-id><pub-id pub-id-type="pmid">29680377</pub-id></element-citation></ref><ref id="R29"><label>29</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Santos-Moreno</surname><given-names>J</given-names></name><name><surname>Tasiudi</surname><given-names>E</given-names></name><name><surname>Stelling</surname><given-names>J</given-names></name><name><surname>Schaerli</surname><given-names>Y</given-names></name></person-group><article-title>Multistable and dynamic CRISPRi-based synthetic circuits</article-title><source>Nature Communications</source><year>2020</year><volume>11</volume><fpage>2746</fpage><pub-id pub-id-type="pmcid">PMC7265303</pub-id><pub-id pub-id-type="pmid">32488086</pub-id><pub-id pub-id-type="doi">10.1038/s41467-020-16574-1</pub-id></element-citation></ref><ref id="R30"><label>30</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Weldemichael</surname><given-names>T</given-names></name><name><surname>Asemoloye</surname><given-names>MD</given-names></name><name><surname>Marchisio</surname><given-names>MA</given-names></name></person-group><article-title>Feedforward Loops: Evolutionary Conserved Network Motifs Redesigned for Synthetic Biology Applications</article-title><source>Applied Sciences</source><year>2022</year><volume>12</volume></element-citation></ref><ref id="R31"><label>31</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mangan</surname><given-names>S</given-names></name><name><surname>Alon</surname><given-names>U</given-names></name></person-group><article-title>Structure and function of the feed-forward loop network motif</article-title><source>Proceedings of the National Academy of Sciences</source><year>2003</year><volume>100</volume><fpage>11980</fpage><lpage>11985</lpage><pub-id pub-id-type="pmcid">PMC218699</pub-id><pub-id pub-id-type="pmid">14530388</pub-id><pub-id pub-id-type="doi">10.1073/pnas.2133841100</pub-id></element-citation></ref><ref id="R32"><label>32</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alon</surname><given-names>U</given-names></name></person-group><article-title>Network motifs: theory and experimental approaches</article-title><source>Nature Reviews Genetics</source><year>2007</year><volume>8</volume><fpage>450</fpage><lpage>461</lpage><pub-id pub-id-type="pmid">17510665</pub-id></element-citation></ref><ref id="R33"><label>33</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schaerli</surname><given-names>Y</given-names></name><etal/></person-group><article-title>A unified design space of synthetic stripe-forming networks</article-title><source>Nature Communications</source><year>2014</year><volume>5</volume><fpage>4905</fpage><pub-id pub-id-type="pmcid">PMC4172969</pub-id><pub-id pub-id-type="pmid">25247316</pub-id><pub-id pub-id-type="doi">10.1038/ncomms5905</pub-id></element-citation></ref><ref id="R34"><label>34</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Basu</surname><given-names>S</given-names></name><name><surname>Gerchman</surname><given-names>Y</given-names></name><name><surname>Collins</surname><given-names>CH</given-names></name><name><surname>Arnold</surname><given-names>FH</given-names></name><name><surname>Weiss</surname><given-names>R</given-names></name></person-group><article-title>A synthetic multicellular system for programmed pattern formation</article-title><source>Nature</source><year>2005</year><volume>434</volume><fpage>1130</fpage><lpage>1134</lpage><pub-id pub-id-type="pmid">15858574</pub-id></element-citation></ref><ref id="R35"><label>35</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Santos-Moreno</surname><given-names>J</given-names></name><name><surname>Tasiudi</surname><given-names>E</given-names></name><name><surname>Kusumawardhani</surname><given-names>H</given-names></name><name><surname>Stelling</surname><given-names>J</given-names></name><name><surname>Schaerli</surname><given-names>Y</given-names></name></person-group><article-title>Robustness and innovation in synthetic genotype networks</article-title><source>Nature Communications</source><year>2023</year><volume>14</volume><fpage>2454</fpage><pub-id pub-id-type="pmcid">PMC10147661</pub-id><pub-id pub-id-type="pmid">37117168</pub-id><pub-id pub-id-type="doi">10.1038/s41467-023-38033-3</pub-id></element-citation></ref><ref id="R36"><label>36</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tickman</surname><given-names>BI</given-names></name><etal/></person-group><article-title>Multi-layer CRISPRa/i circuits for dynamic genetic programs in cell-free and bacterial systems</article-title><source>Cell Systems</source><year>2022</year><volume>13</volume><fpage>215</fpage><lpage>229</lpage><elocation-id>e8</elocation-id><pub-id pub-id-type="pmid">34800362</pub-id></element-citation></ref><ref id="R37"><label>37</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bergmann</surname><given-names>FT</given-names></name></person-group><article-title>BASICO: A simplified Python interface to COPASI</article-title><source>Journal of Open Source Software</source><year>2023</year><volume>8</volume><fpage>5553</fpage></element-citation></ref><ref id="R38"><label>38</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zhang</surname><given-names>F</given-names></name><etal/></person-group><article-title>Independent control of amplitude and period in a synthetic oscillator circuit with modified repressilator</article-title><source>Communications Biology</source><year>2022</year><volume>5</volume><fpage>23</fpage><pub-id pub-id-type="pmcid">PMC8752629</pub-id><pub-id pub-id-type="pmid">35017621</pub-id><pub-id pub-id-type="doi">10.1038/s42003-021-02987-1</pub-id></element-citation></ref><ref id="R39"><label>39</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Santos-Moreno</surname><given-names>J</given-names></name><name><surname>Schaerli</surname><given-names>Y</given-names></name></person-group><article-title>CRISPR-based gene expression control for synthetic gene circuits</article-title><source>Biochemical Society Transactions</source><year>2020</year><volume>48</volume><fpage>1979</fpage><lpage>1993</lpage><pub-id pub-id-type="pmcid">PMC7609024</pub-id><pub-id pub-id-type="pmid">32964920</pub-id><pub-id pub-id-type="doi">10.1042/BST20200020</pub-id></element-citation></ref><ref id="R40"><label>40</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bikard</surname><given-names>D</given-names></name><etal/></person-group><article-title>Programmable repression and activation of bacterial gene expression using an engineered CRISPR-Cas system</article-title><source>Nucleic acids research</source><year>2013</year><volume>41</volume><fpage>7429</fpage><lpage>7437</lpage><pub-id pub-id-type="pmcid">PMC3753641</pub-id><pub-id pub-id-type="pmid">23761437</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkt520</pub-id></element-citation></ref><ref id="R41"><label>41</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chappell</surname><given-names>J</given-names></name><name><surname>Watters</surname><given-names>KE</given-names></name><name><surname>Takahashi</surname><given-names>MK</given-names></name><name><surname>Lucks</surname><given-names>JB</given-names></name></person-group><article-title>A renaissance in RNA synthetic biology: new mechanisms, applications and tools for the future</article-title><source>Current opinion in chemical biology</source><year>2015</year><volume>28</volume><fpage>47</fpage><lpage>56</lpage><pub-id pub-id-type="pmid">26093826</pub-id></element-citation></ref><ref id="R42"><label>42</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Tsai</surname><given-names>SQ</given-names></name><etal/></person-group><article-title>Dimeric CRISPR RNA-guided FokI nucleases for highly specific genome editing</article-title><source>Nature biotechnology</source><year>2014</year><volume>32</volume><fpage>569</fpage><lpage>576</lpage><pub-id pub-id-type="pmcid">PMC4090141</pub-id><pub-id pub-id-type="pmid">24770325</pub-id><pub-id pub-id-type="doi">10.1038/nbt.2908</pub-id></element-citation></ref><ref id="R43"><label>43</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Santos-Moreno</surname><given-names>J</given-names></name><name><surname>Tasiudi</surname><given-names>E</given-names></name><name><surname>Kusumawardhani</surname><given-names>H</given-names></name><name><surname>Stelling</surname><given-names>J</given-names></name><name><surname>Schaerli</surname><given-names>Y</given-names></name></person-group><article-title>Robustness and innovation in synthetic genotype networks</article-title><source>Nature Communications</source><year>2023</year><volume>14</volume><fpage>2454</fpage></element-citation></ref><ref id="R44"><label>44</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Basu</surname><given-names>S</given-names></name><name><surname>Gerchman</surname><given-names>Y</given-names></name><name><surname>Collins</surname><given-names>CH</given-names></name><name><surname>Arnold</surname><given-names>FH</given-names></name><name><surname>Weiss</surname><given-names>R</given-names></name></person-group><article-title>A synthetic multicellular system for programmed pattern formation</article-title><source>Nature</source><year>2005</year><volume>434</volume><fpage>1130</fpage><lpage>1134</lpage></element-citation></ref><ref id="R45"><label>45</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Greber</surname><given-names>D</given-names></name><name><surname>Fussenegger</surname><given-names>M</given-names></name></person-group><article-title>An engineered mammalian band-pass network</article-title><source>Nucleic Acids Research</source><year>2010</year><volume>38</volume><fpage>e174</fpage><pub-id pub-id-type="pmcid">PMC2952875</pub-id><pub-id pub-id-type="pmid">20693530</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkq671</pub-id></element-citation></ref><ref id="R46"><label>46</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Niederholtmeyer</surname><given-names>H</given-names></name><etal/></person-group><article-title>Rapid cell-free forward engineering of novel genetic ring oscillators</article-title><source>elife</source><year>2015</year><volume>4</volume><elocation-id>e09771</elocation-id><pub-id pub-id-type="pmcid">PMC4714972</pub-id><pub-id pub-id-type="pmid">26430766</pub-id><pub-id pub-id-type="doi">10.7554/eLife.09771</pub-id></element-citation></ref><ref id="R47"><label>47</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gardner</surname><given-names>TS</given-names></name><name><surname>Cantor</surname><given-names>CR</given-names></name><name><surname>Collins</surname><given-names>JJ</given-names></name></person-group><article-title>Construction of a genetic toggle switch in Escherichia coli</article-title><source>Nature</source><year>2000</year><volume>403</volume><fpage>339</fpage><lpage>342</lpage><pub-id pub-id-type="pmid">10659857</pub-id></element-citation></ref><ref id="R48"><label>48</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Romano</surname><given-names>E</given-names></name><etal/></person-group><article-title>Engineering AraC to make it responsive to light instead of arabinose</article-title><source>Nature chemical biology</source><year>2021</year><volume>17</volume><fpage>817</fpage><lpage>827</lpage><pub-id pub-id-type="pmid">33903769</pub-id></element-citation></ref><ref id="R49"><label>49</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schwerdtfeger</surname><given-names>C</given-names></name><name><surname>Linden</surname><given-names>H</given-names></name></person-group><article-title>VIVID is a flavoprotein and serves as a fungal blue light photoreceptor for photoadaptation</article-title><source>The EMBO journal</source><year>2003</year><pub-id pub-id-type="pmcid">PMC212719</pub-id><pub-id pub-id-type="pmid">12970196</pub-id><pub-id pub-id-type="doi">10.1093/emboj/cdg451</pub-id></element-citation></ref><ref id="R50"><label>50</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kim</surname><given-names>K</given-names></name><name><surname>Kim</surname><given-names>S</given-names></name><name><surname>Jeon</surname><given-names>JS</given-names></name></person-group><article-title>Visual estimation of bacterial growth level in microfluidic culture systems</article-title><source>Sensors</source><year>2018</year><volume>18</volume><fpage>447</fpage><pub-id pub-id-type="pmcid">PMC5855051</pub-id><pub-id pub-id-type="pmid">29401651</pub-id><pub-id pub-id-type="doi">10.3390/s18020447</pub-id></element-citation></ref><ref id="R51"><label>51</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lee</surname><given-names>H-G</given-names></name><etal/></person-group><article-title>The effect of rigid-block length in elastomer-containing photoactive block copolymers on the photo-voltaic and mechanical properties of polymer solar cells</article-title><source>J Mater Chem A</source><year>2024</year><day>30</day><volume>12</volume><fpage>19039</fpage><lpage>19051</lpage></element-citation></ref><ref id="R52"><label>52</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dai</surname><given-names>B</given-names></name><etal/></person-group><article-title>Influence of block lengths and symmetries of block copolymers on phase behavior of polymer A/polymer B/block copolymer ternary blends</article-title><source>Polymer</source><year>2004</year><volume>45</volume><fpage>1019</fpage><lpage>1026</lpage></element-citation></ref><ref id="R53"><label>53</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yordanov</surname><given-names>P</given-names></name><name><surname>Stelling</surname><given-names>J</given-names></name><name><surname>Otero-Muras</surname><given-names>I</given-names></name></person-group><article-title>BioSwitch: a tool for the detection of bistability and multi-steady state behaviour in signalling and gene regulatory networks</article-title><source>Bioinformatics</source><year>2019</year><volume>36</volume><fpage>1640</fpage><lpage>1641</lpage><pub-id pub-id-type="pmid">31609384</pub-id></element-citation></ref><ref id="R54"><label>54</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kogenaru</surname><given-names>M</given-names></name><name><surname>Tans</surname><given-names>SJ</given-names></name></person-group><article-title>An improved Escherichia coli strain to host gene regulatory networks involving both the AraC and LacI inducible transcription factors</article-title><source>Journal of biological engineering</source><year>2014</year><volume>8</volume><fpage>1</fpage><lpage>5</lpage><pub-id pub-id-type="pmcid">PMC3881499</pub-id><pub-id pub-id-type="pmid">24382032</pub-id><pub-id pub-id-type="doi">10.1186/1754-1611-8-2</pub-id></element-citation></ref><ref id="R55"><label>55</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Park</surname><given-names>JH</given-names></name><name><surname>Holló</surname><given-names>G</given-names></name><name><surname>Schaerli</surname><given-names>Y</given-names></name></person-group><article-title>From resonance to chaos by modulating spatiotemporal patterns through a synthetic optogenetic oscillator</article-title><source>Nature Communications</source><year>2024</year><volume>15</volume><fpage>7284</fpage><pub-id pub-id-type="pmcid">PMC11343849</pub-id><pub-id pub-id-type="pmid">39179558</pub-id><pub-id pub-id-type="doi">10.1038/s41467-024-51626-w</pub-id></element-citation></ref><ref id="R56"><label>56</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Duarte</surname><given-names>JM</given-names></name><name><surname>Barbier</surname><given-names>I</given-names></name><name><surname>Schaerli</surname><given-names>Y</given-names></name></person-group><article-title>Bacterial microcolonies in gel beads for high-throughput screening of libraries in synthetic biology</article-title><source>ACS synthetic biology</source><year>2017</year><volume>6</volume><fpage>1988</fpage><lpage>1995</lpage><pub-id pub-id-type="pmid">28803463</pub-id></element-citation></ref><ref id="R57"><label>57</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Höhener</surname><given-names>TC</given-names></name><etal/></person-group><article-title>LITOS: a versatile LED illumination tool for optogenetic stimulation</article-title><source>Scientific reports</source><year>2022</year><volume>12</volume><elocation-id>13139</elocation-id><pub-id pub-id-type="pmcid">PMC9338960</pub-id><pub-id pub-id-type="pmid">35907941</pub-id><pub-id pub-id-type="doi">10.1038/s41598-022-17312-x</pub-id></element-citation></ref><ref id="R58"><label>58</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Otsu</surname><given-names>N</given-names></name></person-group><article-title>A Threshold Selection Method from Gray-Level Histograms</article-title><source>IEEE Transactions on Systems, Man, and Cybernetics</source><year>1979</year><volume>9</volume><fpage>62</fpage><lpage>66</lpage></element-citation></ref></ref-list></back><floats-group><fig id="F1" position="float"><label>Figure 1</label><caption><p>Flow chart of the application modeling steps. First, a model for each node must be chosen (a selection of existing models is made available in the app, or a new model can be implemented). Then, using the graphical user interface, users can assemble a circuit. Next, the application automatically generates the corresponding differential equations for the entire system, allowing simulations to be run and to observe the dynamic behavior of the GRN. If the circuit does not produce the expected results, users can redesign it. Once experimental data is available, the parameters can be fine-tuned to achieve a closer quantitative match with the simulations.</p></caption><graphic xlink:href="EMS202288-f001"/></fig><fig id="F2" position="float"><label>Figure 2</label><caption><p>Key components of the graphical user interface: a) Model Builder for designing models, b) Running Simulations for executing and managing simulations, c) Simulation Parameter Settings for configuring simulation parameters, d) Graphical Settings for customizing the visual presentation, e) Code Generation for converting models into executable code, and f) Model Parameter Settings for adjusting model-specific parameters.</p></caption><graphic xlink:href="EMS202288-f002"/></fig><fig id="F3" position="float"><label>Figure 3</label><caption><title>Applications of three different node models implemented in GRN modeler.</title><p>I) The repressilator a) Topology of the repressilator. b) Topology of the circuit in the interface generated by the <monospace>make graph()</monospace> method: the red dots N<sub>1</sub>, N<sub>2</sub>, and N<sub>3</sub> represent the nodes in the circuit. The red arrows denote the directed edges of the graph, illustrating the repression interactions between nodes. Additionally, the yellow dots N<sub>1</sub>|− N<sub>3</sub>, N<sub>2</sub>|− N<sub>1</sub>, and N<sub>3</sub>|− N<sub>2</sub> represent the regulatory interactions. For example, N<sub>1</sub>|− N<sub>3</sub> denotes that node N<sub>1</sub> is repressed by N<sub>3</sub>. c) Deterministic and d) stochastic simulations of the repressilator using the Elowitz model, as described in <xref ref-type="supplementary-material" rid="SD1">Table S2</xref> in the SI. The detailed information about the model is available in the SI, specifically in the file “repressilator.html”. II) Re-designed repressilator for an independent modulation of amplitude and frequency. a) Topology of the re-designed repressilator. “C” and “L” are proteases, “I<sub>1</sub>” and “I<sub>2</sub>” external inducers, “U” and “Y” transcription factors activating N<sub>4</sub> and N<sub>2</sub> respectively. The dotted gray lines indicate which proteins are degraded by the proteases. b) Topology of the circuit in the interface. c) The effect of the inducers on the amplitude of N<sub>4</sub>. d) The effect of the inducers on the time period of N<sub>4</sub>. The detailed information about the model is available in the SI, specifically in the file “Tomazou.html”. III) The CRISPRlator circuit. a) Topology of the CRISPRlator. b) Topology of the circuit in the interface. For example, N<sub>1</sub>NOHILL|− N<sub>3</sub> denotes that node N<sub>1</sub> is repressed by N<sub>3</sub> through an input named NOHILL, which corresponds to the CRISPRi interaction in the node model. This repression is incorporated into the system by introducing new reactions (R<sub>6</sub> and R<sub>7</sub> in <xref ref-type="supplementary-material" rid="SD1">Table S4</xref>), where the dCas:sgRNA<sub>N3</sub> complex binds to DNA<sub>N1</sub>, inhibiting transcription at node N<sub>1</sub>. c) Deterministic and d) stochastic simulations of the CRISPRlator generated by the model detailed in <xref ref-type="supplementary-material" rid="SD1">Table S4</xref> in the SI. The detailed information about the model is available in the SI, specifically in the file “CRISPR.html”. The deterministic simulations were fulfilled with the “ode15s” solver of MATLAB, while the stochastic simulations were performed using the “adaptivesa” solver of COPASI in every case.</p></caption><graphic xlink:href="EMS202288-f003"/></fig><fig id="F4" position="float"><label>Figure 4</label><caption><title>The CRISPRlator allows for independent frequency and amplitude modulation.</title><p>a) Global sensitivity analysis was performed using MATLAB’s <monospace>sbiosobol</monospace> function, where each parameter was varied by a factor of 0.5 and 2 times its original value, and the number of samples was set to 1000. b) Schematic representation of the system highlighting the examined parameters. c) Amplitude <italic>A</italic> and d) time period <italic>T</italic> of the oscillations as functions of dCas9 concentration <italic>c</italic><sub><italic>cas</italic></sub> and protein translation rate <italic>k</italic><sub><italic>P</italic></sub>. The detailed information about the model is available in the SI, specifically in the file “CRISPR.html”.</p></caption><graphic xlink:href="EMS202288-f004"/></fig><fig id="F5" position="float"><label>Figure 5</label><caption><title>New oscillatory circuits with even number of nodes.</title><p>a-b) The reptolator. a) Topologies of gene regulatory networks with 4, 8, 12, and 6 nodes, respectively, which were created by incorporating toggle switches into the original repressilator circuit. b) Protein concentration for each node of the circuits in a) over time. While the circuits with 4, 8, and 12 nodes exhibit oscillatory behavior, the 6-node circuit remains bistable. The detailed information about the models are available in the SI, specifically in the files “N4.html”, “N8.html”, “N12.html” and “N6.html”, respectively. c-d) The actolator. We designed the actolator circuit by replacing the repressions in the original repressilator with activations and introducing toggle switches between opposite nodes. c) Topologies of gene regulatory networks with 4, 6, 8 and 10 nodes, respectively. d) Protein concentration for each node of the circuits in a) over time. e) Comparison of circuit properties, specifically the oscillation period (<italic>T</italic>) and duty cycle (left and right, respectively), as a function of the number of nodes. The compared circuit families are: the repressilator (blue), the reptolator (red), and the actolator (yellow). The detailed information about the models are available in the SI, specifically in the files, “actolator4.html”, “actolator6.html”, “actolator8.html” and “actolator10.html”, respectively. The deterministic simulations were performed using the Elowitz model [<xref ref-type="bibr" rid="R27">27</xref>].</p></caption><graphic xlink:href="EMS202288-f005"/></fig><fig id="F6" position="float"><label>Figure 6</label><caption><title>The light biosensor.</title><p>a) Characterisation of the BLADE system [<xref ref-type="bibr" rid="R48">48</xref>]. The cells express VVD-AraC, and pBAD is upstream of sfGFP. Cells were grown for 24 h at different light intensities, then culture OD and GFP fluorescence were measured by a plate reader. Bars represent mean GFP fluorescence intensity (<italic>F</italic>) <italic>±</italic> standard deviation, normalised by the optical density (<italic>OD</italic>) at 600 nm, as a function of light intensity, for three biological replicates. b) Schematic diagram of the three-node light-sensitive circuit based on the CRISPRlator. c) Calculated reporter concentrations and light intensity as a function of time, generated with GRN_modeler. d) Pseudo two-dimensional image showing the calculated protein concentrations for node N3, generated from GRN modeler. The detailed information about the model is available in the SI, specifically in the file “light sensor.html”. e) Fluorescence image of a colony grown at room temperature and with light pulses (460 nm) for 4 days. A square wave light intensity was applied from 0% to 15% of device’s maximal intensity, with a 41.66% duty cycle. mCitrine fluorescence is shown in green. f) Fluorescence image of a colony grown for 4 days on the bench with direct access to sunlight. mCitrine fluorescence is shown in green. Scale bars = 1mm.</p></caption><graphic xlink:href="EMS202288-f006"/></fig><fig id="F7" position="float"><label>Figure 7</label><caption><title>Characterization of the system’s response to light and L-arabinose.</title><p>a) The cells express VVD-AraC, and pBAD is upstream of sfGFP. Cells were grown for 24 h at different light intensities and L-arabinose concentrations, then culture OD and GFP fluorescence were measured by a plate reader. Bars represent mean GFP fluorescence intensity (<italic>F</italic>) ± standard deviation (three biological replicates), normalised by the optical density (<italic>OD</italic>) at 600 nm, as a function of L-arabinose concentration and light intensity. b) Model fitted to experimental results shown in (a). c) Schematic illustration of the light-inducible system: a depiction of the competition between VVD-AraC and wild-type AraC, activated by blue light and L-arabinose, respectively. d) Summarizing table showing the observed output with different combination of inputs. Competition is seen when both light and L-arabinose are present.</p></caption><graphic xlink:href="EMS202288-f007"/></fig><fig id="F8" position="float"><label>Figure 8</label><caption><title>Phase and anti-phase response of the light-sensing CRISPRlator in absence and presence of L-arabinose.</title><p>a-b) Pseudo two-dimensional images based on simulations of mCitrine expression under light pulses, in absence (a) or in presence of 0.2% L-arabinose (b). c) Normalized mCitrine protein concentrations over time from simulations in absence (blue) or in presence of 0.2% L-arabinose (red). The detailed information about the model is available in the SI, specifically in the file “light sensor.html”. d-e) Fluorescence microscopy images showing mCitrine (green) expression in colonies harboring the light-sensing CRISPRlator. The colonies were grown under light pulses of 24 h (41.6% duty-cycle) in the absence (d) or presence of 0.2% L-arabinose (e). Scale bar = 1 mm. f) Normalized and baseline corrected mCitrine fluorescence intensity as a function of the colony radius derived from the microscopy images of colonies grown with (red) and without L-arabinose (blue).</p></caption><graphic xlink:href="EMS202288-f008"/></fig><fig id="F9" position="float"><label>Figure 9</label><caption><title>The impact of L-arabinose concentration on the light sensor.</title><p>a) Relative sensitivity of the measured fluorescence intensity as a function of L-arabinose concentration and light intensity. b) Relative error from simulated experiments as a function of light intensity for low (blue curve, 10<sup>−6</sup>%) and high (red curve, 10°%) L-arabinose concentrations. The mathematical definitions of relative sensitivity and relative error, along with details of the simulated experiments, are provided in the text.</p></caption><graphic xlink:href="EMS202288-f009"/></fig></floats-group></article>