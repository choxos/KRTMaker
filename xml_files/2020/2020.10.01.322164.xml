<!DOCTYPE article
 PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">
<article xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="preprint"><?all-math-mml yes?><?use-mml?><?origin ukpmcpa?><front><journal-meta><journal-id journal-id-type="nlm-ta">bioRxiv</journal-id><journal-title-group><journal-title>bioRxiv : the preprint server for biology</journal-title></journal-title-group><issn pub-type="epub">2692-8205</issn></journal-meta><article-meta><article-id pub-id-type="manuscript">EMS196134</article-id><article-id pub-id-type="doi">10.1101/2020.10.01.322164</article-id><article-id pub-id-type="archive">PPR220513</article-id><article-version-alternatives><article-version article-version-type="status">preprint</article-version><article-version article-version-type="number">4</article-version></article-version-alternatives><article-categories><subj-group subj-group-type="heading"><subject>Article</subject></subj-group></article-categories><title-group><article-title>Indexing All Life’s Known Biological Sequences</article-title></title-group><contrib-group><contrib contrib-type="author" equal-contrib="yes"><name><surname>Karasikov</surname><given-names>Mikhail</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A2">2</xref><xref ref-type="aff" rid="A3">3</xref></contrib><contrib contrib-type="author" equal-contrib="yes"><name><surname>Mustafa</surname><given-names>Harun</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A2">2</xref><xref ref-type="aff" rid="A3">3</xref></contrib><contrib contrib-type="author"><name><surname>Danciu</surname><given-names>Daniel</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><name><surname>Zimmermann</surname><given-names>Marc</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><name><surname>Barber</surname><given-names>Christopher</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A2">2</xref></contrib><contrib contrib-type="author"><name><surname>Rätsch</surname><given-names>Gunnar</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A2">2</xref><xref ref-type="aff" rid="A3">3</xref><xref ref-type="aff" rid="A4">4</xref><xref ref-type="aff" rid="A5">5</xref><xref ref-type="corresp" rid="CR1">*</xref></contrib><contrib contrib-type="author"><name><surname>Kahles</surname><given-names>André</given-names></name><xref ref-type="aff" rid="A1">1</xref><xref ref-type="aff" rid="A2">2</xref><xref ref-type="aff" rid="A3">3</xref><xref ref-type="corresp" rid="CR1">*</xref></contrib></contrib-group><aff id="A1"><label>1</label>Biomedical Informatics Group, Department of Computer Science, <institution-wrap><institution-id institution-id-type="ror">https://ror.org/05a28rw58</institution-id><institution>ETH Zurich</institution></institution-wrap>, <city>Zurich</city>, <country country="CH">Switzerland</country></aff><aff id="A2"><label>2</label>Biomedical Informatics Research, <institution-wrap><institution-id institution-id-type="ror">https://ror.org/01462r250</institution-id><institution>University Hospital Zurich</institution></institution-wrap>, <city>Zurich</city>, <country country="CH">Switzerland</country></aff><aff id="A3"><label>3</label><institution-wrap><institution-id institution-id-type="ror">https://ror.org/002n09z45</institution-id><institution>Swiss Institute of Bioinformatics</institution></institution-wrap>, <city>Zurich</city>, <country country="CH">Switzerland</country></aff><aff id="A4"><label>4</label>Associate faculty in the Department of Biology at <institution-wrap><institution-id institution-id-type="ror">https://ror.org/05a28rw58</institution-id><institution>ETH Zurich</institution></institution-wrap>, <city>Zurich</city>, <country country="CH">Switzerland</country></aff><aff id="A5"><label>5</label>ETH AI Center, <institution-wrap><institution-id institution-id-type="ror">https://ror.org/05a28rw58</institution-id><institution>ETH Zurich</institution></institution-wrap>, <city>Zurich</city>, <country country="CH">Switzerland</country></aff><author-notes><corresp id="CR1"><label>*</label>To whom correspondence should be addressed.</corresp></author-notes><pub-date pub-type="nihms-submitted"><day>15</day><month>05</month><year>2024</year></pub-date><pub-date pub-type="preprint"><day>14</day><month>05</month><year>2024</year></pub-date><permissions><ali:free_to_read/><license><ali:license_ref>https://creativecommons.org/licenses/by-nc/4.0/</ali:license_ref><license-p>This work is licensed under a <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC 4.0 International license</ext-link>.</license-p></license></permissions><abstract><p id="P1">The amount of biological sequencing data available in public repositories is growing exponentially, forming an invaluable biomedical research resource. Yet, making it full-text searchable and easily accessible to researchers in life and data science is an unsolved problem. In this work, we take advantage of recently developed, very efficient data structures and algorithms for representing sequence sets. We make Petabases of DNA sequences across all clades of life, including viruses, bacteria, fungi, plants, animals, and humans, fully searchable. Our indexes are freely available to the research community. This highly compressed representation of the input sequences (up to 5800×) fits on a single consumer hard drive (<italic>≈</italic>100 USD), making this valuable resource cost-effective to use and easily transportable. We present the underlying methodological framework, called MetaGraph, that allows us to scalably index very large sets of DNA or protein sequences using annotated De Bruijn graphs. We demonstrate the feasibility of indexing the full extent of existing sequencing data and present new approaches for efficient and cost-effective full-text search at an on-demand cost of $0.10 per queried Mpb. We explore several practical use cases to mine existing archives for interesting associations and demonstrate the utility of our indexes for integrative analyses.</p></abstract></article-meta></front><body><sec id="S1" sec-type="intro"><title>Introduction</title><p id="P2">For more than a decade, continuing innovation in the area of high-throughput sequencing has propelled research in the biomedical domain and led to an exponential growth in worldwide sequencing capacity<sup><xref ref-type="bibr" rid="R1">1</xref></sup>. The number of sequenced nucleotides contained in the European Nucleotide Archive (ENA) doubles roughly every 45 months and currently makes up over 5.5 · 10<sup><xref ref-type="bibr" rid="R16">16</xref></sup> nucleotide bases (55 Petabases)<sup><xref ref-type="bibr" rid="R2">2</xref></sup> of raw read data. The currently supported, classical pattern for accessing sequence data in public repositories is to identify relevant records using descriptive metadata and to retrieve a copy or a slice of the data for further processing. This either involves downloading the records or accessing them on a cloud platform – both approaches often require significant resources. However, the raw sequencing data itself remains inaccessible for full-text search, significantly limiting its potential for future research. To address this issue, we propose a highly scalable approach to index Petabase-size repositories of raw sequencing data, transforming them into a highly compressed representation that is more accessible for downstream analysis. Inspired by recent advances in sequence algorithms and data structures<sup><xref ref-type="bibr" rid="R3">3</xref>–<xref ref-type="bibr" rid="R10">10</xref></sup>, we focused on specific technical developments for higher compression and faster search<sup><xref ref-type="bibr" rid="R11">11</xref>, <xref ref-type="bibr" rid="R12">12</xref></sup> to demonstrate that indexing the repositories like the Sequence Read Archive (SRA) as a whole is not only theoretically possible but practically feasible.</p><p id="P3">Indexing sequence data at such a scale gives rise to a variety of technical challenges for which some solutions have been proposed in the recent past. Naturally, one focus is on making the genetic variation in large cohorts, especially in human, accessible for research and clinical use. Only very recently, frameworks for variation graphs, such as VG<sup><xref ref-type="bibr" rid="R13">13</xref></sup>, and methods for compressing haplotypes<sup><xref ref-type="bibr" rid="R14">14</xref></sup>, or paths in graphs more generally<sup><xref ref-type="bibr" rid="R15">15</xref></sup>, have improved variation-aware alignment and variant calling in general<sup><xref ref-type="bibr" rid="R16">16</xref>, <xref ref-type="bibr" rid="R17">17</xref></sup>. However, these methods show strong limitations in the scalability of input size and variability. A second focus of algorithmic work is on taxonomic classification and read annotation, where the task is to match a given query sequence against a (large) set of known reference sequences or taxonomic labels. The classic approach for alignments against a collection of assembled genomes is BLAST<sup><xref ref-type="bibr" rid="R18">18</xref></sup>. Although the tool is heavily used and has been gradually improved for speed<sup><xref ref-type="bibr" rid="R19">19</xref>, <xref ref-type="bibr" rid="R20">20</xref></sup> over the past 30 years, it still lacks the scalability that is required for high-throughput searches on highly diverse sequence collections. With approaches like Centrifuge<sup><xref ref-type="bibr" rid="R21">21</xref></sup> promising speed-up has at least been gained for jointly querying large sets of assembled genomes. A third technical focus is on the <italic>sequence</italic> or <italic>experiment discovery problem</italic>: querying a sequence of interest (e.g., a transcript) against all samples available in a sequence repository. Current approaches for experiment discovery can be grouped into three main categories: (i) methods based on sketching techniques, which summarize the input data using one or multiple hashing operations and then use these summaries (sketches) to estimate distances between the query and a target<sup><xref ref-type="bibr" rid="R22">22</xref>–<xref ref-type="bibr" rid="R24">24</xref></sup>; (ii) methods employing Bloom filter-based data structures to allow for approximate membership queries<sup><xref ref-type="bibr" rid="R25">25</xref>–<xref ref-type="bibr" rid="R29">29</xref></sup>; (iii) methods for the exact representation of <italic>annotated De Bruijn graphs</italic>, also called <italic>colored De Bruijn graph</italic>, storing additional metadata as annotations of its nodes or edges<sup><xref ref-type="bibr" rid="R4">4</xref></sup>, such as Mantis<sup><xref ref-type="bibr" rid="R6">6</xref>, <xref ref-type="bibr" rid="R30">30</xref></sup> and others<sup><xref ref-type="bibr" rid="R31">31</xref>–<xref ref-type="bibr" rid="R33">33</xref></sup>. All methods approach experiment discovery by matching short substrings of a fixed length <italic>k</italic>, called <italic>k-mers</italic>, from query sequences against those stored in the index. While efficient, they often lack the ability for sensitive alignment <sup><xref ref-type="bibr" rid="R34">34</xref></sup>. In addition to the above work, there has also been growing interest in the use of De Bruijn graph-based indexes for alignment tasks as a way to accelerate alignment to repeat-prone reference genomes<sup><xref ref-type="bibr" rid="R35">35</xref></sup> or to pangenomes and unassembled read sets<sup><xref ref-type="bibr" rid="R5">5</xref>, <xref ref-type="bibr" rid="R36">36</xref>–<xref ref-type="bibr" rid="R38">38</xref></sup>.</p><p id="P4">A major challenge faced by all discussed methods is to unite the ability to operate efficiently on Petabase-scale sequence collections while supporting fast and versatile query operations, such as search, alignment, and experiment discovery. To bridge this evident gap and to demonstrate the practical feasibility of full-text indexing the whole SRA, we present MetaGraph, a versatile framework for the indexing and analysis of biological sequence libraries at petabase-scale.</p></sec><sec id="S2" sec-type="results"><title>Results</title><sec id="S3"><title>Efficient, modular, and extensible sequence representation with MetaGraph</title><p id="P5">Building on recent advances in the field and by developing additional approaches for sequence analysis, we devised the MetaGraph framework that forms the core of this work and scales from use on single desktop computers up to distributed compute clusters. Notably, MetaGraph can index biological sequences of all kinds, such as raw DNA/RNA sequencing reads, assembled genomes, and protein sequences.</p><p id="P6">The <italic>MetaGraph index</italic> consists of an annotated sequence graph (<xref ref-type="fig" rid="F1">Figure 1</xref>, <bold>right top</bold>) that has two main components: The first is a <italic>k-mer dictionary</italic> representing a De Bruijn graph (<xref ref-type="fig" rid="F1">Figure 1</xref>, <bold>right middle</bold>). The <italic>k</italic>-mers stored in this dictionary serve as elementary tokens in all operations on the MetaGraph index. The second component is a representation of the metadata encoded as a <italic>relation</italic> between <italic>k</italic>-mers and any categorical features (called <italic>annotation labels</italic>), such as sample IDs, geographic locations<sup><xref ref-type="bibr" rid="R39">39</xref></sup>, quantitative or positional information. This relation is represented as a sparse matrix (<italic>annotation matrix</italic>; <xref ref-type="fig" rid="F1">Figure 1</xref>, <bold>right middle</bold>). For instance, for binary annotation, the (<italic>i, j</italic>)<sup>th</sup> element of this matrix has value 1 if and only if the <italic>i</italic><sup>th</sup> <italic>k</italic>-mer is associated with the <italic>j</italic><sup>th</sup> feature. We employ various techniques to represent the De Bruijn graph and the annotation matrix in a highly compressed form<sup><xref ref-type="bibr" rid="R3">3</xref>, <xref ref-type="bibr" rid="R11">11</xref>, <xref ref-type="bibr" rid="R12">12</xref>, <xref ref-type="bibr" rid="R40">40</xref></sup>. We describe these techniques in <xref ref-type="sec" rid="S16">Methods</xref>. The MetaGraph framework supports using different graph and annotation representations interchangeably, adapting to different storage requirements and analysis tasks, and allowing for easy adoption of the latest algorithmic developments. Consequently, we made certain design choices when developing MetaGraph: (i) Use of succinct data structures and efficient representation schemes for extremely high scalability; (ii) Efficient algorithmic use of succinct data structures (e.g., prefering batched operations); (iii) Modular architecture supporting several graph and annotation representations and enabling the <italic>addition</italic> of new algorithms with <italic>little code overhead</italic>. – These strengths allow for MetaGraph to easily adapt to the rapid methodological advancements for sequence set representation<sup><xref ref-type="bibr" rid="R41">41</xref>–<xref ref-type="bibr" rid="R44">44</xref></sup>.</p></sec><sec id="S4"><title>A workflow for scalable multi-sample index construction</title><p id="P7">Without loss of generality, we will assume that the indexing is applied to read sets that stem from sequencing biological samples, where each annotation label encodes a sample ID. Thus, the annotation matrix encodes the samples to which each <italic>k</italic>-mer belongs. Our indexing workflow proceeds in three steps: (i) data preprocessing, (ii) graph construction, and (iii) annotation construction. (i) Data preprocessing involves the construction of separate De Bruijn graphs (<italic>sample graphs</italic>) from the raw input samples (<xref ref-type="fig" rid="F1">Figure 1</xref>, <bold>left</bold>). We optionally apply a subsequent cleaning step to each sample graph to reduce the impact of potential sequencing errors (<xref ref-type="fig" rid="F1">Figure 1</xref>, <bold>middle</bold>). (ii) In graph construction, all sample graphs obtained in the first stage are merged into a single joint De Bruijn graph (<xref ref-type="fig" rid="F1">Figure 1</xref>, <bold>right top</bold>). (iii) In annotation construction, we build the columns of the annotation matrix to indicate the membership of different <italic>k</italic>-mers to their respective sample graphs (<xref ref-type="fig" rid="F1">Figure 1</xref>, <bold>right middle</bold>). Finally, the graph and the annotation are compressed into representations best suited for their target application (<xref ref-type="sec" rid="S16">Methods</xref>).</p></sec><sec id="S5"><title>First-in-class scalability of MetaGraph</title><p id="P8">We evaluated MetaGraph’s scalability against other state-of-the-art indexing tools: BIGSI<sup><xref ref-type="bibr" rid="R25">25</xref></sup>, COBS<sup><xref ref-type="bibr" rid="R26">26</xref></sup>, Bifrost<sup><xref ref-type="bibr" rid="R45">45</xref></sup>, and Mantis<sup><xref ref-type="bibr" rid="R30">30</xref><xref ref-type="fn" rid="FN1">a</xref></sup>, on subsets of increasing size up to 25,000 read sets randomly drawn from the entire collection of bacterial and viral genomic read sets<sup><xref ref-type="bibr" rid="R25">25</xref></sup>. While all the representations grow in size approximately linearly with the input size, the absolute values are drastically different (<xref ref-type="fig" rid="F2">Figure 2 a</xref>). The space taken by MetaGraph indexes in the smallest representation is 16–38 times smaller than that of the other evaluated approaches, despite some of them using a lossy compression approach (BIGSI and COBS).</p><p id="P9">However, this exceptional space-efficiency of MetaGraph does not compromise query time. We devised several efficient search algorithms to identify matching paths in the De Bruijn graph and retrieve the corresponding annotations. Briefly, for <italic>k-mer query</italic>, input sequences are broken down into <italic>k</italic>-mers that are simply mapped to the nodes of the graph. Then, the respective annotations are retrieved and the aggregated result is returned as output (<xref ref-type="fig" rid="F5">Extended Data Figure 1 c</xref>). For increased sensitivity, we developed algorithms for <italic>sequence-to-graph alignment</italic><sup><xref ref-type="bibr" rid="R40">40</xref>, <xref ref-type="bibr" rid="R46">46</xref></sup>, which identify the closest matching path in the whole graph (<xref ref-type="fig" rid="F5">Extended Data Figures 1 d</xref>; <xref ref-type="sec" rid="S16">Methods</xref>). We also designed a batch query algorithm (schematic in <xref ref-type="fig" rid="F5">Extended Data Figure 1 e</xref>, <xref ref-type="sec" rid="S16">Methods</xref>), exploiting the presence of <italic>k</italic>-mers shared between individual queries by forming a fast intermediate <italic>query subgraph</italic>, that increases throughput up to 100-fold for large repetitive queries (e.g., sets of sequencing reads).</p><p id="P10">To evaluate the performance of the sequence search strategies implemented in MetaGraph against the existing methods for indexing raw sequencing data, we queried four different types of sequences: a set of antimicrobial resistance (AMR) gene DNA sequences from the CARD database<sup><xref ref-type="bibr" rid="R47">47</xref></sup>, reads from an environmental metagenome sample <sup><xref ref-type="fn" rid="FN2">b</xref></sup> from MetaSUB<sup><xref ref-type="bibr" rid="R48">48</xref></sup>, AMPLICON reads from a human gut metagenome sample (<monospace>DRR067889</monospace>), and metagenomic WGS reads (<monospace>SRR322873</monospace>). We find that MetaGraph is highly competitive in query time compared to all other evaluated methods (<xref ref-type="fig" rid="F2">Figure 2 b</xref>), while maintaining orders of magnitude smaller index representations. Moreover, using batch query optimizations (<xref ref-type="sec" rid="S16">Methods</xref>) MetaGraph shows the best performance on sets of highly redundant queries (<monospace>DRR067889</monospace> and <monospace>SRR322873</monospace>). Even the sensitive search employing sequence alignment in MetaGraph is considerably faster than BIGSI, a tool for approximate k-mer matching originally developed to index this data set. In general, the retrieval of <italic>k</italic>-mer labels based on exact <italic>k</italic>-mer matching can be seen as an approximation of semi-global alignment, where the query sequence would otherwise be aligned against the subgraphs induced by those annotation labels<sup><xref ref-type="bibr" rid="R6">6</xref>, <xref ref-type="bibr" rid="R25">25</xref>, <xref ref-type="bibr" rid="R26">26</xref></sup>. If each annotation column is constructed from a single genome, this process mirrors the classical problem of alignment against a collection of reference genomes. This approximation becomes less accurate as subgraph complexity increases (<xref ref-type="fig" rid="F6">Extended Data Figure 2</xref>).</p></sec><sec id="S6"><title>A Petabase-scale index for public sequence data</title><p id="P11">As we set out to demonstrate the practical feasibility of indexing entire sequence archives, we applied MetaGraph to index a substantial part of the public section of the NCBI Sequence Read Archive (SRA), including both DNA and RNA, alongside restricted-access human cohorts and amino acid sequences (present in the UniParc database). Consequently, our indexed data sets range from large RNA-Seq cohorts (TCGA<sup><xref ref-type="bibr" rid="R49">49</xref></sup>, GTEx<sup><xref ref-type="bibr" rid="R50">50</xref></sup>) and vast archives of genome sequencing records from the NCBI Sequence Read Archive (SRA)<sup><xref ref-type="bibr" rid="R51">51</xref></sup> (comprising 2,347,037 samples of microbial, fungal, plant, and metazoa organisms) to large sets of highly diverse whole metagenome sequencing samples (MetaSUB<sup><xref ref-type="bibr" rid="R48">48</xref></sup> cohort and all publicly available human gut metagenome samples from SRA) and collections of reference and assembled sequences (RefSeq<sup><xref ref-type="bibr" rid="R52">52</xref></sup>, UHGG<sup><xref ref-type="bibr" rid="R53">53</xref></sup>, and Tara Oceans<sup><xref ref-type="bibr" rid="R54">54</xref></sup>). Our MetaGraph index of the complete UniParc dataset<sup><xref ref-type="bibr" rid="R55">55</xref></sup> demonstrates the straightforward use of protein sequences as input data. For selected data sets, we generated indexes preserving <italic>k</italic>-mer counts or coordinates utilizing the concept of <italic>counting De Bruijn graphs</italic><sup><xref ref-type="bibr" rid="R40">40</xref></sup>. The key statistics of all data sets presented in this work and MetaGraph indexes constructed from them are provided in <xref ref-type="table" rid="T1">Table 1</xref> and visualized in <xref ref-type="fig" rid="F2">Figure 2 c</xref>. The resulting indexes form a valuable community resource, as they succinctly summarise large sequence data sets while supporting a variety of sequence queries against them.</p><p id="P12">When processing raw sequencing data, we applied moderate cleaning on the inputs (<xref ref-type="sec" rid="S16">Methods</xref>), which led to significant reductions in the required storage space without a significant effect on index completeness and query sensitivity. In total, we processed 4.8 Petabases (≈ 2.5 Petabytes) of input sequences, which finally makes this data fully and efficiently searchable by sequence.</p></sec><sec id="S7"><title>Data redundancy drives compression ratio</title><p id="P13">MetaGraph’s compression performance greatly depends on the properties of the sequence sets being indexed. Since the input data comes in different formats (FASTA, FASTQ, SRA, etc.), we measured the final compression ratio in characters/byte (i.e., the average number of base pairs or amino acids of input per byte of the MetaGraph index) to make it comparable across different data sets. For a more detailed analysis, we decomposed the compression ratio into two factors: the <italic>data redundancy</italic> and the <italic>indexing efficiency</italic> shown in the last two columns of <xref ref-type="table" rid="T1">Table 1</xref>, respectively. Intuitively, the redundancy shows the amount of data duplication <italic>within an indexed sample</italic>, while the indexing efficiency reflects data duplication <italic>across different samples</italic> and increases for sets of related samples.</p><p id="P14">While the GTEx <sup><xref ref-type="bibr" rid="R50">50</xref></sup> and TCGA <sup><xref ref-type="bibr" rid="R49">49</xref></sup> cohorts amount to over 100 TB of raw compressed RNA sequencing data, they show only limited diversity and our MetaGraph index represents both in <italic>≈</italic> 10 GB space, thereby achieving the highest compression ratios among all the data sets we have indexed (up to 7,416 bp/byte). Even when adding <italic>k</italic>-mer counts, the final compression ratio is about 1,000 bp/byte.</p><p id="P15">The medium complexity range mainly consists of whole genome sequencing read sets, usually showing more diversity and lower coverage than the human transcriptome cohorts and, thus, showing less redundancy. At the time of collection (April 2020), the SRA data sets we indexed comprised over 90% of all publicly available samples in the selected groups. Only for the SRA-Microbe data set, we relied on a previously defined set of 446,506 virus, Prokaryote, and small Eukaryote genomes used in the original BIGSI publication<sup><xref ref-type="bibr" rid="R25">25</xref></sup>. Notably, the fully searchable and annotated MetaGraph representation of the SRA-Microbe data set takes only 57GB, which is 28× smaller than the 1.6 TB taken by the BIGSI index<sup><xref ref-type="bibr" rid="R25">25</xref></sup>.</p><p id="P16">On the opposite end stand whole metagenome shotgun sequencing cohorts. Here, we have selected the MetaSUB cohort<sup><xref ref-type="bibr" rid="R48">48</xref></sup>, containing 4,220 environmental metagenome samples comprising 7.2 Tbp, and the SRA-MetaGut cohort, containing all human gut metagenome samples available on SRA at this time, comprising approximately 156 Tbp. These inputs represent very diverse populations of organisms and contain many rare sequences. Consequently, compression ratios are lower (140–155 bp/byte) but still large enough to compactly represent those vast collections in searchable indexes (46.7 GB for MetaSUB; 1,111GB for SRA-MetaGut).</p><p id="P17">Lastly, collections of assembled genomes and protein sequences feature the highest diversity and the least data redundancy, with the similarity between samples being a function of evolutionary distance. Even though the lack of inherent redundancy within these data sets makes them hard to compress, MetaGraph allows indexing them to make them fully searchable while keeping the index small.</p><p id="P18">The complete lists of sample identifiers used in our experiments are provided in <xref ref-type="supplementary-material" rid="SD2">Supplemental Data</xref>.</p></sec><sec id="S8"><title>Indexes are highly-accurate and near-complete</title><p id="P19">As our workflow for indexing raw read sets involves per-sample cleaning procedures, in the context of <italic>experiment discovery</italic>, a given query sequence may not retrieve a true label because of missing <italic>k</italic>-mers that were filtered out. In this light, we evaluated the accuracy of experiment discovery on our SRA-derived MetaGraph indexes. We validated our cleaning and sequence-to-graph alignment approach by showing that each of the individual sample graphs is an accurate representation of their respective input read sets, with <italic>∼</italic>82% of our query reads realigning back to their respective sample graphs with at least 80% sequence identity (<xref ref-type="fig" rid="F7">Extended Data Figure 3 a</xref>). Notably, even when mapping these reads to their corresponding annotated graph indexes with k-mer matching (without sequence alignment), we similarly observe that 80% of the query reads retrieve their true labels with at least 80% sequence identity (<xref ref-type="fig" rid="F3">Figure 3 a</xref>).</p><p id="P20">In addition, we evaluated the robustness of our mapping algorithms to sequence variation using altered versions of the query reads with varying mutation rates. Generally, we observe that the experiment discovery accuracy difference between exact <italic>k</italic>-mer matching and sequence-to-graph alignment increases with increasing sequence variation (<xref ref-type="fig" rid="F3">Figure 3 b</xref>). So far, we have only considered the presence or absence of an annotation label. Especially for functional sequencing data, such as RNA-Seq, it is crucial that MetaGraph can encode per-sample count information. As an example, we provide the expression of transcript SFTPB-207 (ENST00000519937.6) in a sample from the GTEx cohort (<xref ref-type="fig" rid="F3">Figure 3 c</xref>). Even though our representation is a 1,000 fold compression of the original data, we can closely reproduce the coverage profile generated from aligning the original raw sequences to the reference using STAR. As all count information is encoded per sample, tissue specificity is preserved. For this example, we find the same surfactant transcript mainly expressed in lung, and partially in testis, but not elsewhere (<xref ref-type="fig" rid="F7">Extended Data Figure 3 b</xref>) – as expected.</p></sec><sec id="S9"><title>Exploring the human gut resistome and phageome</title><p id="P21">To showcase MetaGraph’s utility in real-time -omics analysis on very large-scale data sets, we queried the full CARD antimicrobial resistance (AMR) database<sup><xref ref-type="bibr" rid="R47">47</xref>, <xref ref-type="bibr" rid="R56">56</xref></sup> and all bacteriophages from RefSeq Release 218<sup><xref ref-type="bibr" rid="R57">57</xref></sup> against the 241,384 human gut microbiome samples in our SRA-MetaGut database (<xref ref-type="sec" rid="S16">Methods</xref>). Notably, this is an analysis that would otherwise have required access to hundreds of terabytes of raw sequencing data.</p><p id="P22">We recover strong associations between the <italic>Escherichia</italic> λ phage ev017 and the <italic>E. coli β</italic>-lactamase gene, two <italic>Klebsiella</italic> phages and carbapenem-resistant β-lactamases from <italic>Klebsiella pneumoniae</italic>, and β ev017 and the RNA antibiotic efflux pumps (<xref ref-type="fig" rid="F4">Figure 4 a</xref>). In addition, we studied trends in antibiotic resistance over time across various continents. We find significant strong growth trends over time in resistance against diaminopyrimidines in Africa, antiseptics and fluoroquinolones in Oceania, and against cephamycin and one of the so-called “last-resort” antibiotics tigecycline<sup><xref ref-type="bibr" rid="R58">58</xref></sup> (the only glycylcycline approved as an antibiotic<sup><xref ref-type="bibr" rid="R59">59</xref>,<xref ref-type="bibr" rid="R60">60</xref></sup>) in South America (<xref ref-type="fig" rid="F4">Figure 4 b</xref>).</p><p id="P23">As a demonstration for MetaGraph’s interactive capabilities, we provide publicly available example scripts<sup><xref ref-type="fn" rid="FN3">c</xref></sup>, querying the full CARD database against an index containing 4,220 whole metagenome sequencing samples from the MetaSUB cohort. We reproduce a ranking of cities based on the average number of AMR-markers in a sample (<xref ref-type="fig" rid="F8">Extended Data Figure 4 b</xref>), consistent with the analysis performed on the raw data using orthogonal strategies<sup><xref ref-type="bibr" rid="R39">39</xref></sup>. We also show other exploratory analyses, linking sample metadata, such as surface material at the sampling location, to the query results (<xref ref-type="fig" rid="F8">Extended Data Figure 4 c</xref>).</p></sec><sec id="S10"><title>Survey of back-splice junctions in GTEx and TCGA</title><p id="P24">Being constructed from raw data, MetaGraph indexes can easily express transcriptome features that are hard to represent in a classial, linear coordinate system. One example are back-splice junctions (BSJ) that connect the donor of an exon site to the acceptor site of a preceding exon, forming circular RNAs, which have been found to commonly occur also in humans<sup><xref ref-type="bibr" rid="R61">61</xref></sup>. When systematically querying all BSJ that can possibly be created using the GENCODE annotation (version 38) and the hg38 reference (<xref ref-type="sec" rid="S16">Methods</xref>), we found a total of 672 candidates perfectly matching to the full GTEx graph that did not match to the reference genome or transcriptome, and mapped more than 90% of <italic>k</italic>-mers to at least one sample. While such features are hard to map using linear RNA-Seq aligners (<xref ref-type="fig" rid="F8">Extended Data Figure 4 d</xref>), it is easy using a graph index. After removing 39 outlier-BSJ candidates that mapped to more than 300 samples, we found BSJ to be recurrently detectable in a large fraction of the GTEx tissues (<xref ref-type="fig" rid="F4">Figure 4 c</xref>), where pancreas, testis, skin, and muscle tissues showed the largest relative fraction.</p></sec><sec id="S11"><title>Seamless distribution and interactive use</title><p id="P25">In addition to the single-machine use case, where the index is constructed and queried locally, MetaGraph also supports querying indexes provided on a remote server via a client-server architecture. In this approach, a set of graphs and annotations can be easily distributed across multiple machines. Each machine runs MetaGraph in <italic>server mode</italic>, hosting one or multiple indexes and awaiting queries on a pre-defined port (<xref ref-type="fig" rid="F5">Extended Data Figure 1 b</xref>). This setup makes it straightforward to execute user queries across all indexes hosted on multiple servers. For easy integration of results and coordination of different MetaGraph instances, we provide client interfaces in Python (<xref ref-type="fig" rid="F5">Extended Data Figure 1 a</xref>).</p><p id="P26">Notably, our distribution approach can be used not only for hosting multiple indexes of distinct sources but also when indexing a single data set of extremely large size. When indexing the SRA as a whole, the final MetaGraph index constructed from it exceeds the amount of memory available on a single machine. Hence, the entire data set can be split into multiple parts, where each part is indexed separately. The resulting MetaGraph indexes can then be independently loaded and hosted on multiple machines. This distribution approach enables virtually unlimited scalability. For search, each query is sent to all index partitions, followed by aggregation of the partial results to generate a final result of the query returned back to the user.</p></sec><sec id="S12"><title>Search engine for biological sequences MetaGraph Online</title><p id="P27">Building on MetaGraph’s distribution capabilities, we developed a search engine for biological sequences MetaGraph Online to make our indexes publicly available for online queries. The service is publicly available for user queries at <ext-link ext-link-type="uri" xlink:href="https://metagraph.ethz.ch/search">https://metagraph.ethz.ch/search</ext-link>. It uses the MetaGraph framework for hosting the indexes and performing queries on them in real time, showing the result of a query practically immediately.</p><p id="P28">The search engine has a clean and intuitive graphical web user interface (UI) <xref ref-type="supplementary-material" rid="SD1">Supplemental Figure S-7</xref>, allowing the user to paste an arbitrary sequence and search it against a selected index. By default, the search is performed via basic <italic>k</italic>-mer matching. For greater sensitivity, it is also possible for all indexes to additionally align the searched sequence to the annotated graph. If <italic>k</italic>-mer coordinates or counts are represented in the queried index, the web UI allows retrieving them for the query sequence too.</p><p id="P29">MetaGraph Online currently hosts a large subset of the various indexes constructed and presented in this work, ranging from SRA samples to several collections of assembled and reference genomes. In addition to user interaction with the web interface, MetaGraph Online provides a web API that allows connecting to the respective servers via their endpoints. That is, any of the hosted indexes can be queried via Python API by connecting to the respective endpoint of the server hosting that index (<xref ref-type="supplementary-material" rid="SD1">Supplemental Figure S-8</xref>). Moreover, indexes constructed from public-access data can be downloaded for large-scale local analyses.</p></sec><sec id="S13"><title>MetaGraph provides a clear cost advantage</title><p id="P30">The presented MetaGraph approach is based on the strategy of pre-indexing raw data for accelerated search and optimized storage. While hosting all existing SRA data in a commercial compute cloud would amount to a total cost of $3,951,607 USD per year, storing the MetaGraph indexes even in their most performant representation would decrease the cost by 25% (<xref ref-type="supplementary-material" rid="SD1">Supplemental Table S-5</xref>). In an on-demand setting, the scenario with the least cost overhead, the annual hosting cost reduces to $52,261 (a 75-fold reduction). While existing on-demand approaches such as Serratus<sup><xref ref-type="bibr" rid="R62">62</xref></sup> have no hosting cost, every queried Mbp of sequence costs <italic>∼</italic>$1,736. MetaGraph on-demand, on the other hand, reduces this query cost to $2.80 per Mbp for alignment and $0.10 per Mbp for exact <italic>k</italic>-mer matching, resulting in a break-even at an annual query size of 30 Mbp. We have determined the additional cost to index each sample at $0.022, which is negligible compared to costs for data acquisition. Thus, MetaGraph is the hitherto most cost-effective solution to realize SRA full-text search. Full details for our calculations are available in <xref ref-type="supplementary-material" rid="SD1">Supplemental Section A.5</xref>.</p></sec></sec><sec id="S14" sec-type="discussion"><title>Discussion</title><p id="P31">In this work, we set out to demonstrate the practical feasibility of indexing whole sequencing archives, such as NCBI’s Sequence Read Archive (SRA), with the goal of making them accessible for full-text search. The major challenge of this task is to hold pace with the exponentially growing amount of input data. As a solution, we have presented MetaGraph, a highly scalable and modularized framework designed to index and analyze very large collections of biological sequence data.</p><p id="P32">In total we have processed almost 5 Petabases of public sequencing data and have transformed them into compressed indexes that are accessible for full-text search, reducing the input data size up to a factor of <italic>∼</italic>7,400 and showing up to 20-fold reduction compared to current state-of-the-art methods. This not only makes data better accessible but also easily transportable across analysis sites. Specifically, we have indexed various collections of real DNA and RNA sequences, including a significant portion of all publicly available whole-genome sequencing samples from the NCBI SRA. In particular, we have indexed over 90% of all Microbe, Fungi, Plant, Human, human gut metagenome, and a substantial part of the Metazoan samples from the SRA, which together alone make up 2.6 Petabases in 1,903,327 read sets. In addition, we indexed a number of other diverse and biologically relevant data sets, from reference genomes to raw metagenomic reads. The MetaGraph indexes we constructed require orders-of-magnitude less storage than the original gzip-compressed inputs: 4742× for GTEx, 77–2595× for SRA, 27× for MetaSUB, as well as 7.6×, 1.6×, and 1.1× for the UHGG, Tara Oceans MAGs, and RefSeq assembled sequences, respectively.</p><p id="P33">The scope of our index collection is only limited through the exclusion of controlled-access data and certain long-read sequencing technologies with a very high error rate. In general, we found that the effective handling of sequencing errors and technical variation in the input is one of the greatest challenges in building a joint index. For the data we have indexed, we have shown that, on average, more than 90% of the input data can be accurately aligned back to the index, achieving a very high sensitivity to recover the original experiment of a read.</p><p id="P34">Due to the sheer size of the data and because our indexes perform optimally when present in main memory, we have split up the input into several batches. Although this creates the overhead of running parallel queries to several indexes, this enables us to arbitrarily scale out the index representation. All partitions can be used to emulate a single large index, which is enabled through MetaGraph’s server mode and the accompanying Python API. A second concession we needed to make to accommodate input size is the removal of spurious input <italic>k</italic>-mers. On all data sets (except assembled references), we apply a strategy of moderate cleaning to not accumulate sequencing noise in the final indexes. Although this slightly reduces our sensitivity for query, we generally observe a 10-fold reduction in index size. It is part of our future work to adapt the raw data cleaning and error correction approaches to also be applicable to sequencing platforms with higher error rates, such as PacBio’s SMRT or reads from Oxford Nanopore Technologies.</p><p id="P35">In addition to reducing the final representation size, a practical full-text index also needs to optimise for query efficiency. For the experiment discovery problem, we have shown that MetaGraph achieves a performance superior to other state-of-the-art methods. Using <italic>k</italic>-mer based query, we can search for <italic>∼</italic>300 Mbp of sequences per hour per thread against a cohort-size index. Through internal parallelization, rates of 10 Gbp/hour on a single server are easily achievable. Naturally, there is a trade-off between the choice of <italic>k</italic>, the distance between query and target, and the resulting query sensitivity. In settings where an increased sensitivity is needed or the distance between the query and the target is large, we provide several sequence-to-graph alignment strategies. Although this comes at the cost of greater querying complexity, our implementation achieves query times that are only a small constant factor worse than the less sensitive exact matching. The main challenge in the alignment regime is thus balancing the trade-off between alignment search time and sensitivity. In general, there is a trade-off between representation size and query efficiency. MetaGraph addresses this by representing input data as collections of <italic>k</italic>-mer sets stored in various succinct data structures, offering practically relevant trade-offs between index size and query performance. This flexibility allows for running MetaGraph at different scales and on different hardware, from laptops to research compute clusters to distributed cloud environments. As new graph and annotation representations are developed, MetaGraph’s extensible framework allows us to readily integrate these new developments. For example, recent graph data structures with improved data locality<sup><xref ref-type="bibr" rid="R63">63</xref></sup> can enable parts of the index to be offloaded to disk to allow for streaming access patterns during search. Notably, all existing indexes can be easily transformed into new formats, directly benefiting from algorithmic improvements in the field.</p><p id="P36">We provide all indexes generated from public data as an open resource to the community. Through providing a web service for interactive queries at MetaGraph Online, we allow life science researchers and other communities, at last, easy and cost-efficient access to the sequence data for exploration and search. Although this still only represents about 10% of all available sequencing data, our effort has been carried out by a single research lab, demonstrating general feasibility and serving as a proof of concept. Processing the remaining 90%, as well as all future incoming data, can be easily solved via scaling through parallelisation and should be quite feasible for institutions such as EBI or NCBI.</p><p id="P37">The sequence search results we present in this work set a crucial milestone in computational modelling, solving the problem of making all existing biological sequence data searchable and easily accessible for exploration – a very timely problem of high practical relevance. For the first time, it is now possible to efficiently search for nucleotide sequences in close to all sequenced raw genomes across the tree of life. What was deemed challenging a few years ago, such as indexing and searching in a few thousand read sets, now is tractable and can easily be done on a modern laptop. We envision MetaGraph to serve as a versatile tool that enables researchers to perform large-scale comparative analyses in genomics and medicine on typical academic compute clusters, making public data sets truly open and interactively accessible. In particular, MetaGraph indexes can facilitate large-scale learning tasks on biological sequences (e.g., DNA, RNA, amino acid), such as training large language models.</p><p id="P38">The size and the diversity of the data we have processed prove the feasibility of keeping all existing sequence archives indexed in a general manner and making them searchable, similar to how Google indexes web pages and the information extracted from them. We emphasize that the support for sequence alignment is especially crucial, for instance, when searching for highly dissimilar sequences with high mutation rates. Together with its remarkable scalability, this makes MetaGraph stand out from all state-of-the-art methods and tools.</p><p id="P39">In addition to the basic search functionality, the MetaGraph framework allows for sequence assembly from sub-graphs, currently enabling our graph cleaning approach. A goal for improving this functionality is increasing contig lengths. While many sequence assemblers take an iterative cleaning approach to remove noise and produce longer contigs<sup><xref ref-type="bibr" rid="R33">33</xref>, <xref ref-type="bibr" rid="R64">64</xref>, <xref ref-type="bibr" rid="R65">65</xref></sup>, the alternative approach of chaining together unitigs to form longer contigs is a clear target for future work<sup><xref ref-type="bibr" rid="R66">66</xref></sup>. In particular, the use of the annotation matrix to guide the path traversal strategy could increase contig lengths without compromising assembly quality with heavy cleaning procedures.</p><p id="P40">An exciting new possibility enabled by our assembly framework is the ability to fetch biological sequences specific to certain properties or groups of interest (e.g., individual samples, patient subgroups, or any set function of them). This generalized view on assembly is an extension of pure selection of differential <italic>k</italic>-mers<sup><xref ref-type="bibr" rid="R67">67</xref></sup> and allows for new kinds of integrative analyses. For example, MetaGraph can answer such queries as “get all sequences found in samples <italic>x</italic> and <italic>y</italic> but not present in sample <italic>z</italic>”. Theoretically, any logical expression over labels is allowed.</p><p id="P41">Lastly, MetaGraph has been developed in the context of a highly active research community. Its design as a modular framework allows us to benefit also from future technological improvements. Many new exciting approaches for representing <italic>k</italic>-mer sets<sup><xref ref-type="bibr" rid="R43">43</xref>, <xref ref-type="bibr" rid="R63">63</xref></sup>, the use of approximate-membership-query data structures<sup><xref ref-type="bibr" rid="R34">34</xref>, <xref ref-type="bibr" rid="R68">68</xref>–<xref ref-type="bibr" rid="R70">70</xref></sup>, dynamically changing the <italic>k</italic>-mer set<sup><xref ref-type="bibr" rid="R71">71</xref></sup>, improved annotation compression<sup><xref ref-type="bibr" rid="R72">72</xref>, <xref ref-type="bibr" rid="R73">73</xref></sup>, as well as alternative alignment and seeding approaches<sup><xref ref-type="bibr" rid="R41">41</xref>, <xref ref-type="bibr" rid="R74">74</xref>–<xref ref-type="bibr" rid="R76">76</xref></sup> will be interesting avenues to explore for a future extension of MetaGraph.</p><p id="P42">We are confident that the approaches presented in this work can be employed and integrated into the infrastructure of large data repositories, such as ENA and NCBI to make all sequence data stored in these repositories searchable, thereby providing essentially a "Google for DNA". Notably, the cost of providing this whole service would be relatively small compared to the price paid to generate this data in the first place and the cost of storing it in the archives.</p></sec><sec id="S15" sec-type="methods"><title>Methods</title><sec id="S16"><title>Representing De Bruijn graphs</title><p id="P43">According to the formal definition of a De Bruijn graph, every two k-mers (short contiguous subsequences of length <italic>k</italic>) with an over-lap of <italic>k</italic> − 1 characters are connected with a directed edge. It can be seen that in the De Bruijn graph, the edges can always be derived from the nodes alone, and hence, it is sufficient to store only the k-mer set. These k-mers are used as elementary indexing tokens in MetaGraph.</p><p id="P44">MetaGraph provides several data structures for storing k-mer sets, which are used as a basis to implement different representations of the <italic>De Bruijn graph</italic> abstraction. In addition to the simple hash table, the k-mers may be stored in an indicator bitmap<sup><xref ref-type="bibr" rid="R77">77</xref></sup> (a binary vector represented as a succinct bitmap of size <italic>|</italic>Σ<italic>|<sup>k</sup></italic> indicating which k-mers are present in the set), or in the BOSS table<sup><xref ref-type="bibr" rid="R3">3</xref></sup> (a data structure proposed by <bold>B</bold>owe, <bold>O</bold>nodera, <bold>S</bold>adakane, and <bold>S</bold>hibuya for storing a set of k-mers succinctly). We call our De Bruijn graph implementations based on these data structures <monospace>HashDBG, BitmapDBG</monospace>, and <monospace>Succinct-DBG</monospace>, respectively. (For a detailed description of these representations, refer to <xref ref-type="supplementary-material" rid="SD1">Supplemental Section A.3.1</xref>.) All these data structures support exact membership queries, and they map k-mers to positive indexes from 1 to <italic>n</italic>, where <italic>n</italic> is the number of k-mers in the represented set (or zero if the queried k-mer does not belong to the set). While <monospace>HashDBG</monospace> is mostly used internally (e.g., for batched sequence search), <monospace>SuccinctDBG</monospace> typically exhibits the best compression performance, and, thus, serves as the default compressed representation.</p></sec><sec id="S17"><title>Scalable k-mer enumeration and counting</title><p id="P45">To count and de-duplicate k-mers, MetaGraph uses the following approach to generate the so-called <italic>k-mer spectrum</italic>: the input k-mers are appended to a list, which is sorted and de-duplicated every time it reaches the allocated space limit or after all input k-mers have been processed. During de-duplication, the k-mer counts are summed up to maintain the total count of each unique k-mer. We call this approach <italic>SortedSet</italic>. In addition, MetaGraph offers the <italic>SortedSetDisk</italic> approach, which implements a similar algorithm in external memory. Using a pre-allocated fixed-size buffer limits memory usage and allows for constructing virtually arbitrarily large k-mer spectra but requires a larger amount of disk I/O. Lastly, MetaGraph supports passing precomputed outputs from the KMC3<sup><xref ref-type="bibr" rid="R78">78</xref></sup> k-mer counting tool as input to make use of its exceptionally efficient counting algorithm and filters. Once the entire k-mer spectrum is obtained and all k-mers are sorted, they are converted into the final data structure to construct the target graph representation.</p></sec><sec id="S18"><title>Extracting contigs and unitigs from graphs</title><p id="P46">All sequences encoded in the graph (or any defined subgraph) can be extracted from it and stored in FASTA format via graph traversal. The graph is fully traversed and its paths formed by consecutive overlapping k-mers are converted into sequences (<italic>contigs</italic>) that are returned as a result of this operation. Each k-mer of the graph (or subgraph) appears in the assembled contigs exactly once. Thus, the resulting set of sequences is a disjoint node cover of the traversed graph.</p><p id="P47">MetaGraph provides efficient parallel algorithms for sequence extraction and distinguishes two main types of traversal: i) traversal in <italic>contig</italic> mode extends a traversed path until no further outgoing edge is present or if all the next outgoing edges have already been traversed, while ii) traversal in <italic>unitig</italic> mode only extends a path if its last node has a single outgoing edge, and this edge is the single edge incoming to its target node. This definition of a unitig matches the one from<sup><xref ref-type="bibr" rid="R4">4</xref></sup>.</p></sec><sec id="S19"><title>Basic, canonical, and primary graphs</title><p id="P48">When indexing raw reads sequenced from unknown strands, we supplement each sequence with its reverse complement, which is then indexed along with the original sequence. As a result, the De Bruijn graph accumulates each k-mer in both orientations. Such graphs (which we call <italic>canonical</italic>) can be represented by storing only one orientation of each k-mer and simulating the full canonical graph on-the-fly (e.g., for querying outgoing edges, return not only the edges outgoing from the source k-mer, but also all edges incoming to its reverse complement k-mer).</p><p id="P49">Storing only <italic>canonical k-mers</italic> (i.e., the lexico-graphically smallest of the k-mer and its reverse complement) effectively reduces the size of the graph by up to two times. However, this cannot be efficiently used with the succinct graph representation based on the BOSS table. The BOSS table, by design, requires that each k-mer in it has other k-mers overlapping its prefix and suffix of length <italic>k −</italic> 1 (at least one incoming and one outgoing edge in the De Bruijn graph). However, it is often the case that among two consecutive k-mers in a read, only one of them is canonical. Thus, storing only canonical k-mers in the BOSS table would often require adding several extra dummy k-mers for each real k-mer, which makes this approach memory-inefficient. We overcome this issue by constructing so-called <italic>primary graphs</italic>, where the word <italic>primary</italic> reflects the traversal order, as described in the next paragraph.</p><p id="P50">When traversing a canonical De Bruijn graph, we can additionally apply the constraint that only one of the orientations of a given k-mer is called. More precisely, the traversal algorithm works as usual, but never visits a k-mer if its reverse complement had already been visited. Whichever orientation of the forward or reverse complement k-mer is visited first is considered to be the <italic>primary k-mer</italic> of the pair (for an example illustration see <xref ref-type="supplementary-material" rid="SD1">Supplemental Figure S-5</xref>). This results in a set of sequences, which we call <italic>primary</italic> (<italic>primary contigs</italic> or <italic>primary unit-igs</italic>). Note that the traversal order of the graph may change the set of primary sequences extracted from it, but it may never change the total number of k-mers in these sequences (<italic>primary k-mers</italic>). This is relevant when extracting primary contigs with multiple threads since the node traversal order may differ between runs. We call graphs constructed from primary sequences <italic>primary graphs</italic>. Un-like the common approach where only canonical k-mers are stored, primary De Bruijn graphs can be efficiently represented succinctly using the BOSS table, and effectively allow us to reduce the size of the graph part of the MetaGraph index by up to two times.</p></sec><sec id="S20"><title>Graph cleaning</title><p id="P51">When a graph is constructed from raw sequencing data, it might contain a considerable number of k-mers resulting from sequencing errors (erroneous k-mers). These k-mers do not occur in the biological sequences and make up spurious paths in the graph, which one may desire to prune off. We call this procedure <italic>graph cleaning</italic>.</p><p id="P52">MetaGraph provides routines for graph cleaning and k-mer filtering based on the assumption that k-mers with relatively low abundance (low k-mer counts) in the input data were likely generated due to sequencing errors and, hence, should be dropped. To identify potentially erroneous k-mers, we use an algorithm proposed by Iqbal and colleagues<sup><xref ref-type="bibr" rid="R4">4</xref></sup>. In MetaGraph, we adapted and scaled up this algorithm to work not only for small but also for very large graphs (up to trillions of nodes).</p><p id="P53">Briefly, to make the cleaning procedure more robust, the decision about filtering out a k-mer is based on the median abundance of the unitig to which this k-mer belongs. That is, k-mers with low abundance are preserved if they are situated in a unitig with sufficiently many (more precisely, at least 50%) highly abundant (<italic>solid</italic>) k-mers. Then the entire unitig is considered <italic>solid</italic> and it is kept in the graph. All solid unitigs (which may also be concatenated into contigs called <italic>clean contigs</italic>) are extracted from the graph and output in FASTA format. Optionally, all tips (i.e., unitigs where the last node has no outgoing edges) that are shorter than a given cutoff (typically 2<italic>k</italic>) are discarded as well. Afterwards, a new graph can be constructed from these clean contigs, which we call a <italic>cleaned graph</italic>.</p><p id="P54">The abundance threshold for <italic>solid</italic> k-mers (i.e., k-mers that are considered likely non-erroneous) can be set either manually or computed automatically from the full <italic>k-mer spectrum</italic>, where it is assumed that the number of k-mers with sequencing errors (erroneous k-mers) follows a Poisson distribution with a Gamma distributed mean. Also, it is assumed that all k-mers with an abundance of 3 and less are generated due to sequencing errors. Based on these numbers, the algorithm fits a Poisson distribution and chooses a threshold such that k-mers predicted to be erroneous make up at most 0.1% of the total k-mer coverage. Finally, in case the chosen threshold leads to preserving less than 20% of the total coverage, the automatic estimation procedure is deemed unsuccessful and a pre-defined value (typically 2) is used as a fallback threshold instead.</p></sec><sec id="S21"><title>Constructing a joint graph from multiple samples</title><p id="P55">According to our workflow, when indexing multiple read sets (especially when indexing vast collections of raw sequence data), the recommended workflow for constructing a joint De Bruijn graph from the input samples consists of the following three steps. First, we independently construct a De Bruijn graph from each input read set. Since each graph is constructed from a single read set (or sample), we call these graphs <italic>sample graphs</italic>. If desired, these sample graphs are independently cleaned with the graph cleaning procedure described above. Then, each sample graph is decomposed into a set of (clean) contigs, either by extracting the contigs directly or as a result of the graph cleaning procedure. Finally, a new De Bruijn graph is constructed from all these contigs, which is then annotated to represent the relation between the k-mers and the input samples. As this graph represents the result of merging all sample graphs, we refer to it as the <italic>joint De Bruijn graph</italic>. In practice, the size of the contigs extracted from sample graphs is up to 100 times smaller than the raw input, which makes the construction of the joint De Bruijn graph by this workflow significantly more efficient compared to constructing it directly from the original raw read sets.</p></sec><sec id="S22"><title>Graph annotations</title><p id="P56">Once a De Bruijn graph is constructed, it can already be used to answer k-mer membership queries, that is, to check if a certain k-mer belongs to the graph or not. However, the De Bruijn graph alone can encode no additional metadata (such as sample ID, organism, chromosome number, expression level, or geographical location). Thus, we supplement the De Bruijn graph with another data structure called an <italic>annotation matrix</italic>. Each column of the annotation matrix <inline-formula><mml:math id="M1"><mml:mrow><mml:mi>𝒜</mml:mi><mml:mo>∈</mml:mo><mml:msup><mml:mrow><mml:mo>{</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo>}</mml:mo></mml:mrow><mml:mrow><mml:mi>n</mml:mi><mml:mo>×</mml:mo><mml:mi>m</mml:mi></mml:mrow></mml:msup></mml:mrow></mml:math></inline-formula>, where <italic>n</italic> is the number of k-mers in the graph and <italic>m</italic> is the number of annotation labels, is a bit vector indicating which k-mers possess a particular property: <disp-formula id="FD1"><label>(1)</label><mml:math id="M2"><mml:mrow><mml:msubsup><mml:mi mathvariant="script">A</mml:mi><mml:mi>j</mml:mi><mml:mi>i</mml:mi></mml:msubsup><mml:mo>:</mml:mo><mml:mo>=</mml:mo><mml:mo>{</mml:mo><mml:mrow><mml:mtable equalrows="true" equalcolumns="true"><mml:mtr><mml:mtd><mml:mrow><mml:mtable equalrows="true" equalcolumns="true"><mml:mtr><mml:mtd><mml:mrow><mml:mn>1</mml:mn><mml:mo>,</mml:mo></mml:mrow></mml:mtd><mml:mtd><mml:mrow><mml:mtext>k-mer</mml:mtext><mml:mspace width="0.2em"/><mml:mi>i</mml:mi><mml:mspace width="0.2em"/><mml:mtext>is</mml:mtext><mml:mspace width="0.2em"/><mml:mtext>in</mml:mtext><mml:mspace width="0.2em"/><mml:mtext>relation</mml:mtext><mml:mspace width="0.2em"/><mml:mtext>with</mml:mtext><mml:mspace width="0.2em"/><mml:mtext>attribute</mml:mtext><mml:mspace width="0.2em"/><mml:mi>j</mml:mi><mml:mo>,</mml:mo></mml:mrow></mml:mtd></mml:mtr><mml:mtr><mml:mtd><mml:mrow><mml:mn>0</mml:mn><mml:mo>,</mml:mo></mml:mrow></mml:mtd><mml:mtd columnalign="left"><mml:mrow><mml:mtext>otherwise</mml:mtext><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mrow><mml:mo/></mml:mrow></mml:math></disp-formula></p><p id="P57">Without loss of generality, we will assume that the annotation matrix encodes the membership of k-mers to different samples, i.e., encodes sample IDs. In this case, <inline-formula><mml:math id="M3"><mml:mrow><mml:msubsup><mml:mi mathvariant="script">A</mml:mi><mml:mi>j</mml:mi><mml:mi>i</mml:mi></mml:msubsup><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:math></inline-formula> indicates that k-mer <italic>i</italic> appears in sample <italic>j</italic>. (Note that the same k-mer may also appear in multiple samples.)</p><p id="P58">The number of rows of the annotation matrix corresponds to the number of k-mers indexed in the De Bruijn graph, and hence, the annotation matrix can be of enormous size, containing up to 10<sup>12</sup> rows and 10<sup>9</sup> columns. However, this matrix is typically extremely sparse and, thus, can be efficiently compressed.</p></sec><sec id="S23"><title>Representing graph annotations in MetaGraph</title><p id="P59">Independent of the choice of graph representation, a variety of methods are provided in MetaGraph for compressing annotation matrices to accommodate different query types. These different matrix representation schemes can be split into row-major and column-major. The row-major representations (<monospace>RowSparse</monospace><sup><xref ref-type="bibr" rid="R79">79</xref></sup>, <monospace>RowFlat</monospace><sup><xref ref-type="bibr" rid="R31">31</xref></sup>, etc.) enable fast row queries but have a poor performance of column queries. The column-major representations (<monospace>ColumnCompressed, Multi-BRWT</monospace><sup><xref ref-type="bibr" rid="R11">11</xref></sup>, etc.), on the contrary, provide fast access to individual columns of the annotation matrix but typically have a poorer row query performance. Despite being mathematically equivalent, up to the transposition of the represented matrix, these schemes are, in fact, different due to the need to adapt to the fact that the number of rows of the annotation matrix in practice is typically orders of magnitude larger than the number of columns. For a detailed description of these and other representation schemes, refer to <xref ref-type="supplementary-material" rid="SD1">Supplemental Section A.4</xref>.</p></sec><sec id="S24"><title>The RowDiff compression technique</title><p id="P60">Due to the nature of De Bruijn graphs and the fact that adjacent nodes (k-mers) usually originate from the same sequences, it turns out that, in practice, adjacent nodes in the graph are likely to carry identical or similar annotations. The RowDiff compression technique<sup><xref ref-type="bibr" rid="R79">79</xref>, <xref ref-type="bibr" rid="R80">80</xref></sup> exploits this regularity by replacing the annotations at nodes with their relative differences. This allows us to significantly sparsify the annotation matrix and, therefore, considerably improve its compressibility. Notably, the transformed annotation matrix can still be represented with any other available scheme, including those described above. MetaGraph provides a scalable implementation of this technique with efficient construction algorithms, which allow applying it to virtually arbitrarily large annotation matrices. The algorithm essentially consists of two parts. First, for each node with at least one outgoing edge, it picks one of the edges and marks its target node as a <italic>successor</italic>. Second, it replaces the original annotations at nodes with their differences to the annotations at their assigned successor nodes. This delta-like transform is applied to all nodes in the graph except for a small subset of them (called <italic>anchors</italic>), which keep their original annotation unchanged and serve to end every path composed of successors and break the recursion when reconstructing the original annotations (e.g., when querying).</p></sec><sec id="S25"><title>Counting De Bruijn graphs</title><p id="P61">Finally, MetaGraph supports generalized graph annotations for representing quantitative information such as k-mer positions and their abundances in input sources, encoded with non-binary matrices<sup><xref ref-type="bibr" rid="R40">40</xref></sup>.</p></sec><sec id="S26"><title>Annotation construction</title><p id="P62">The typical workflow for constructing an annotation matrix for a large input set consists of the following steps. After the joint De Bruijn graph has been constructed from the input sequences, we iterate over the different samples (corresponding to the different annotation labels) in parallel and map all k-mers of each sample to the joint graph, generating a single annotation column. To avoid the mapping of identical k-mers multiple times and to prevent the processing of erroneous k-mers (k-mer with sequencing errors), we use the unitigs extracted from the cleaned sample graphs instead of the raw sequences when annotating the graph. This dramatically reduces the annotation construction time, especially when the joint graph is represented with SuccinctDBG, for which the traversal to an adjacent k-mer is several times faster than a k-mer lookup performed from scratch (see <xref ref-type="supplementary-material" rid="SD1">Section A.3.2</xref>).</p><p id="P63">Once an annotation matrix has been constructed (typically in the <italic>ColumnCompressed</italic> representation), it can be transformed to any other representation to achieve the desired trade-offs between the representation size and the performance of the required operations. In particular, for sequence search, the recommended workflow is to apply the RowDiff transform on the annotation matrix and then convert the sparsified columns to the <italic>Multi-BRWT</italic> or <italic>RowSparse</italic> representation, depending on the desired speed vs. memory trade-off.</p></sec><sec id="S27"><title>Dynamic index augmentation and batch updates</title><p id="P64">Generally, there are three strategies for extending a fully constructed MetaGraph index (a joint De Bruijn graph and its corresponding annotation matrix). First, the batch of new sequences can be indexed separately and that second MetaGraph index can be hosted on the same or on a different server. Then, these two indexes can be queried simultaneously, as it is done for a distributed MetaGraph index.</p><p id="P65">Second, the graph can be updated directly if it is represented using a dynamic data structure that supports dynamic updates (e.g., SuccinctDBG (dynamic)). Then, the annotation matrix needs to be updated accordingly. This approach allows making instant changes. However, it does not enable large updates because of the limited performance of dynamic data structures<sup><xref ref-type="bibr" rid="R81">81</xref></sup>.</p><p id="P66">Finally, for large updates, the existing index can be reconstructed entirely. For the reconstruction, the index is first decomposed into contig buckets, where each bucket stores contigs extracted from the subgraph induced by the respective annotation column. Then, these buckets are augmented with the new data (either by adding the new sequences directly or by pre-constructing sample graphs from the new sequences and adding extracted from them contigs), and a new MetaGraph index is constructed from these augmented buckets. Notably, this approach uses a non-redundant set of contigs and does not require processing raw data from scratch again. Furthermore, instead of extracting contigs from the old index, it is also possible to use the inputs initially used to construct the old index (e.g., the contigs extracted from sample graphs), which can significantly simplify the process.</p></sec><sec id="S28"><title>Speeding up k-mer matching</title><p id="P67">For higher k-mer matching throughput, we implemented several techniques to speed up this procedure. First, when mapping k-mers to a primary graph (defined above), each k-mer may generally have to be searched twice (first that k-mer and then its reverse complement). Nevertheless, if a k-mer has been found, there is no need to search for its reverse complement. In fact, it is guaranteed in that case that the reverse complement k-mer would be missing in the graph. However, if a certain k-mer from the query is missing in the graph but its reverse complement is found, it is likely that for the next k-mer from the query sequence, which is adjacent to the current one, the same applies. Thus, in such cases, we directly start the search for the next k-mer by querying the graph with the reverse complement and checking for the original k-mer only if that reverse complement k-mer is not found in the graph.</p><p id="P68">When the graph is represented with the BOSS table, indexing <italic>k</italic>-mer ranges in the BOSS table (as described in <xref ref-type="supplementary-material" rid="SD1">Supplementary Section A.3.2</xref>) greatly speeds up k-mer lookups, especially relevant when querying short sequences or arbitrary sequences against a primary graph.</p><p id="P69">Another optimization consists of querying the annotation matrix in batches, which improves cache locality and removes possible row duplications. To go further and speed up k-mer mapping as well, we developed the batch query algorithm described below in detail.</p></sec><sec id="S29"><title>Batched sequence search</title><p id="P70">To increase the throughput of sequence search for large queries (e.g., sets of sequencing reads or long sequences), we have designed an additional batch query algorithm schematically shown in <xref ref-type="fig" rid="F5">Extended Data Figure 1e</xref>. The algorithm exploits possible query set redundancy: the presence of k-mers shared between individual queries. More precisely, query sequences are processed in batches and an intermediate <italic>batch graph</italic> is constructed from each batch. This batch graph is then effectively intersected with the large joint graph from the MetaGraph index. The result of this intersection operation forms a relatively small subgraph of the joint graph, which we call a <italic>query graph</italic> and is represented in a fast-to-query uncompressed format (<monospace>HashDBG</monospace>). In practice, this intersection is performed as follows. First, the batch graph is traversed (Step 2 in <xref ref-type="fig" rid="F5">Extended Data Figure 1e</xref>) to extract a non-redundant set of contigs that are afterwards mapped against the joint graph via exact k-mer matching (Step 3) and the respective annotations are extracted from the compressed index accordingly to construct the query graph with its respective annotations representing the intersection of the batch graph with the full MetaGraph index (Step 4). All query sequences from the current batch are then queried against this query graph (Step 5). Depending on the structure of the query data, this algorithm achieves a 10- to 100-fold speedup.</p></sec><sec id="S30"><title>Sequence search with alignment</title><p id="P71">For cases where the sensitivity of sequence search via exact k-mer matching is insufficient, we developed several approaches for aligning sequences to the MetaGraph index, a process known as <italic>sequence-to-graph alignment</italic>. Note that each approach has its target use cases and the choice should be made based on the particular application and the problem setting.</p><p id="P72">Each alignment algorithm takes a classical seed- and-extend approach<sup><xref ref-type="bibr" rid="R82">82</xref></sup>. Given an input sequence, the seeds are composed by joining consecutive k-mer matches within the graph’s unitigs (called unitig maximal exact matches, or Uni-MEMs<sup><xref ref-type="bibr" rid="R35">35</xref></sup>). Although, by default, this restricts the seeds to be at least of length <italic>k</italic>, representing the graph with the BOSS table allows for relaxing this restriction by mapping arbitrarily short sequences to suffixes of the k-mers indexed in the graph (as described in <xref ref-type="supplementary-material" rid="SD1">Supplementary Section A.3.2</xref>).</p><p id="P73">Each seed is extended in the graph forwards and backwards to produce a complete local alignment. Similarly to how GraphAligner<sup><xref ref-type="bibr" rid="R5">5</xref>, <xref ref-type="bibr" rid="R83">83</xref></sup> builds on Myers’ algorithm<sup><xref ref-type="bibr" rid="R84">84</xref></sup>, our extension algorithm is a generalization of the Smith-Waterman-Gotoh local alignment algorithm with affine gap penalties<sup><xref ref-type="bibr" rid="R85">85</xref></sup>.</p><p id="P74">We now describe the extension algorithm in more detail. Given a seed, let <italic>s</italic> = <italic>s</italic><sub>1</sub> … <italic>s<sub>ℓ</sub></italic> denote the suffix of the query sequence starting from the first character of the seed. We use a dynamic programming table to represent the scores of the best partial alignments. More precisely, each node <italic>v</italic> has three corresponding integer score vectors <italic>S<sub>v</sub></italic>, <italic>E<sub>v</sub></italic>, and <italic>F<sub>v</sub></italic> of size <italic>ℓ</italic>. <italic>S<sub>v</sub></italic>[<italic>i</italic>] stores the best alignment score of the prefix <italic>s</italic><sub>1</sub> <italic>· · · s<sub>i</sub></italic> ending at node <italic>v</italic>. <italic>E<sub>v</sub></italic>[<italic>i</italic>] and <italic>F<sub>v</sub></italic>[<italic>i</italic>] represent the best alignment scores of <italic>s</italic><sub>1</sub> <italic>· · · s<sub>i</sub></italic> ending with an insertion and deletion at node <italic>v</italic>, respectively.</p><p id="P75">Let <italic>v<sub>S</sub></italic> be the first node of the seed <italic>S</italic>. We define an <italic>alignment tree</italic> <italic>𝒯<sub>S</sub></italic> = (<italic>V<sub>S</sub>, E<sub>S</sub></italic> = (<italic>V<sub>S</sub>, E<sub>S</sub></italic>) rooted at <italic>v<sub>S</sub></italic> encoding all walks traversed during the search starting from <italic>v<sub>S</sub></italic>, where <italic>V<sub>S</sub></italic> ⊂ <italic>V</italic> × ℕ contains all the nodes of the paths originating at <italic>v<sub>S</sub></italic> and <italic>E<sub>S</sub></italic> ⊂ <italic>V<sub>S</sub></italic> × <italic>V<sub>S</sub></italic> contains all the edges within these paths. <italic>𝒯<sub>S</sub></italic> is constructed on-the-fly during the seed extension process by extending it with new nodes and edges after each graph traversal step.</p><p id="P76">Since the size of <italic>𝒯<sub>S</sub></italic> can grow exponentially if all paths are explored (and is, in fact, of infinite size if the graph is cyclic), we traverse the graph and update <italic>𝒯<sub>S</sub></italic> in a score-guided fashion. For this, we maintain a priority queue graph nodes and corresponding score vectors to be traversed, prioritizing nodes whose traversal led to the best local score update<sup><xref ref-type="bibr" rid="R83">83</xref></sup>. We employ several heuristics to restrict the alignment search space. Firstly, we employ the <italic>X</italic>-drop criterion<sup><xref ref-type="bibr" rid="R86">86</xref>,<xref ref-type="bibr" rid="R87">87</xref></sup>, skipping an element if it is more than <italic>X</italic> units lower than the current best-computed alignment score. Additionally, we maintain an aggregated score column for each graph node storing the element-wise maximum score achieved among the score columns of each node in <italic>𝒯<sub>S</sub></italic>. Using this, we discard nodes in <italic>𝒯<sub>S</sub></italic> from further consideration if their traversal did not update the aggregate score column. Finally, we apply a restriction on the total number of nodes which can be explored as a constant factor of <italic>ℓ</italic>.</p><p id="P77">To find seeds of length <italic>&gt; k</italic> matching to the suffixes of nodes in the canonical graph, a three-step approach is taken. First, seeds corresponding to the forward orientation of the query are found according to the algorithm described above. The next two steps then retrieve suffix matches which are represented in their reverse complement form in the graph. In the second step, the reverse complements of the query k-mers are searched to find node ranges corresponding to suffix matches of length <italic>k′</italic>. Finally, these ranges are traversed forwards <italic>k − k′</italic> steps in the graph to make the prefixes of these nodes correspond to the sequence matched. The reverse complements of these nodes are then returned as the remaining suffix matches.</p><p id="P78">While primary graphs act as an efficient representation of canonical De Bruijn graphs, special considerations need to be made when aligning to these graphs to ensure that all paths that are present in the corresponding canonical graph are still reachable. For this, we introduce a further extension of the alignment algorithm to allow for alignment to an implicit canonical graph while only keeping a primary graph in memory. During seed extension, the children of a given node are determined simply by finding the children of that node in the primary graph, along with the parents of its reverse complement node. Finding exact matching seeds of length <italic>≥ k</italic> can be achieved in a similar fashion, searching for both the forward and reverse complement of each k-mer in the primary graph.</p><p id="P79">MetaGraph maintains three different alignment approaches that determine how the graph is traversed during seed extension, called MetaGraph-Align, MetaGraph-LA, and TCG-Aligner, each applying different restrictions to traversal.</p><sec id="S31"><title>MetaGraph-Align</title><p id="P80">In this approach, the sequences are aligned against the joint De Bruijn graph to compute their respective closest walks in the graph. After computing a set of alignments, they are used in place of the original sequences to fetch their corresponding annotations. This approach allows for aligning to paths representing <italic>recombinations</italic> of sequences across annotation labels.</p></sec><sec id="S32"><title>Label-consistent graph alignment</title><p id="P81">When label recombination is not desired, we support an alternative approach where queries are aligned to subgraphs of the joint graph induced by single annotation labels (columns of the annotation matrix). We call this approach <italic>label-consistent</italic> graph alignment (or <italic>alignment to columns</italic>) and is implemented by the MetaGraph-LA algorithm<sup><xref ref-type="bibr" rid="R46">46</xref></sup>. However, instead of aligning to all the subgraphs independently, we perform the alignment with a single search procedure while keeping track of the annotations corresponding to the alignments.</p></sec><sec id="S33"><title>Trace-consistent graph alignment (TCG-Aligner)</title><p id="P82">Finally, when input sequences are losslessly encoded in a MetaGraph index, the alignment can be done against those original input sequences whose respective walks in the graph are called <italic>traces</italic>. This method is called the <italic>trace-consistent graph aligner</italic> (TCG-Aligner)<sup><xref ref-type="bibr" rid="R40">40</xref></sup>.</p></sec></sec><sec id="S34"><title>Column transformations</title><p id="P83">In addition to the operations mentioned above, MetaGraph supports operations aggregating multiple annotation columns to compute statistics for the k-mers and their counts (abundances). In general, the following formula is used in the aggregation to compute the <italic>i</italic>-th bit of the new annotation column: <disp-formula id="FD2"><label>(2)</label><mml:math id="M4"><mml:mrow><mml:msub><mml:mi>a</mml:mi><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:msub><mml:mo>≤</mml:mo><mml:munderover><mml:mi>∑</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>m</mml:mi></mml:munderover><mml:mn>1</mml:mn><mml:mo>[</mml:mo><mml:mrow><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:msub><mml:mo>≤</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>≤</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>max</mml:mi></mml:mrow></mml:msub></mml:mrow><mml:mo>]</mml:mo><mml:mo>≤</mml:mo><mml:msub><mml:mi>a</mml:mi><mml:mrow><mml:mi>max</mml:mi></mml:mrow></mml:msub><mml:mo>,</mml:mo></mml:mrow></mml:math></disp-formula> where <italic>c<sub>ij</sub></italic> is the count (abundance) of the <italic>i</italic>-th k-mer in the <italic>j</italic>-th label, and 1[<italic>A</italic>] is a boolean predicate function, which evaluates as 1 if the statement <italic>A</italic> is true and as 0 otherwise. If no counts are associated with the column, we assume <italic>c<sub>ij</sub></italic> = 1 for every set bit in the <italic>j</italic>-th annotation column and 0 otherwise. If the sum <inline-formula><mml:math id="M5"><mml:mrow><mml:mstyle displaystyle="true"><mml:msubsup><mml:mi>∑</mml:mi><mml:mrow><mml:mi>j</mml:mi><mml:mo>=</mml:mo><mml:mn>1</mml:mn></mml:mrow><mml:mi>m</mml:mi></mml:msubsup><mml:mn>1</mml:mn></mml:mstyle><mml:mo stretchy="false">[</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>min</mml:mi></mml:mrow></mml:msub><mml:mo>≤</mml:mo><mml:msub><mml:mi>c</mml:mi><mml:mrow><mml:mi>i</mml:mi><mml:mi>j</mml:mi></mml:mrow></mml:msub><mml:mo>≤</mml:mo><mml:msub><mml:mi>v</mml:mi><mml:mrow><mml:mi>max</mml:mi></mml:mrow></mml:msub><mml:mo stretchy="false">]</mml:mo></mml:mrow></mml:math></inline-formula> falls within specified minimum and maximum abundance thresholds <italic>a</italic><sub>min</sub> and <italic>a</italic><sub>max</sub>, the bit in the aggregated column for this k-mer is set to 1, and the value of the sum is written as the count associated with that bit. In other words, the resulting aggregated column is always supplemented with a count vector representing the number of original annotation columns with k-mer counts between <italic>v</italic><sub>min</sub> and <italic>v</italic><sub>max</sub>, which can be used in downstream analyses as an ordinary count vector.</p></sec><sec id="S35"><title>MetaGraph API and Python client</title><p id="P84">For querying large graph indexes interactively, MetaGraph offers an API that allows clients to send requests to a single or multiple MetaGraph servers. When started in server mode, the MetaGraph index will be persistently present in server memory, which will accept HTTP requests on a pre-defined port. To make the querying more convenient, we have also implemented a Python API client as a Python package available at <ext-link ext-link-type="uri" xlink:href="https://github.com/ratschlab/metagraph/tree/master/metagraph/api/python">https://github.com/ratschlab/metagraph/tree/master/metagraph/api/python</ext-link>.</p></sec><sec id="S36"><title>Indexing public read sets from the NCBI Sequence Read Archive (SRA)</title><p id="P85">We have split the set of all read sets from SRA (excluding sequencing technologies with high read error rates, see more details in the sections below) into different groups of related samples and constructed a separate MetaGraph index for each group. The groups were defined either using data set definitions of prior work<sup><xref ref-type="bibr" rid="R25">25</xref></sup> or using the metadata provided by NCBI SRA. As a result, we constructed the following 6 data sets: SRA-MetaGut, SRA-Microbe, SRA-Fungi, SRA-Plants, SRA-Human, and SRA-Metazoa. All these data sets are listed in <bold>Extended Data Table 1</bold> and make up a total of 4.4 Pbp and 2.3 PB of gzip-compressed input sequences, while the indexes make up only 11.6 TB, which corresponds to the overall compression ratio of 193×, or 376 bp/byte.</p><p id="P86">For constructing the SRA-Microbe index, we used cleaned contigs downloaded from the European Bioinformatics Institute FTP file server provided as Supplementary Data to BIGSI<sup><xref ref-type="bibr" rid="R25">25</xref></sup>. Thus, no additional data preprocessing was needed for this data set.</p><p id="P87">For all other data sets, each sample was either transferred and decompressed from NCBI’s mirror on the Google Cloud Platform or, if not available on Google Cloud, downloaded from the ENA onto one of our cloud-compute servers and subjected to k-mer counting with KMC3<sup><xref ref-type="bibr" rid="R78">78</xref></sup> to generate the full k-mer spectrum. If the median k-mer count on the spectrum was less than 2, the sample was further processed without any cleaning. Otherwise, the sample was subjected to cleaning with the standard graph cleaning procedure implemented in MetaGraph, with pruning tips shorter than 2<italic>k</italic> (for all these data sets <italic>k</italic> was set to 31) and using an automatically computed k-mer abundance threshold for pruning low-coverage unitigs, with a fallback threshold value of 3. This cleaning procedure was applied for SRA-Fungi, SRA-Plants, SRA-Human, and SRA-Metazoa.</p><p id="P88">For read sets of the SRA-MetaGut data set, the sequencing depth was typically low, and hence, we applied a more lenient cleaning strategy. Namely, we have switched off the singleton filtering on the k-mer spectrum and used a constant cleaning threshold of 2 during graph cleaning to remove all unitigs with a median k-mer abundance of 1.</p><p id="P89">For each data set, we first constructed a joint canonical graph with <italic>k</italic> = 31 (including for each indexed k-mer its reverse complement) from the cleaned contigs and then transformed it into a primary graph (storing only one form of each k-mer and representing the other implicitly). Finally, using the same cleaned contigs, we annotated the joint primary graph with sample IDs to construct the annotation matrix. Each input sample thereby formed an individual column of the annotation matrix. The annotation matrix was then transformed to the <monospace>RowDiff&gt;MULTI-BRWT&lt;</monospace> representation for higher compression and faster queries. The graph was, in turn, transformed to the small representation. For exact commands and scripts refer to <xref ref-type="supplementary-material" rid="SD2">Supplemental Data</xref>.</p></sec><sec id="S37"><title>SRA subsets composition</title><p id="P90">Here we provide a detailed description of each of the 6 data sets.</p><sec id="S38"><title>SRA-Microbe</title><p id="P91">This data set was first used to construct the BIGSI index<sup><xref ref-type="bibr" rid="R25">25</xref></sup>. Consisting of 446,506 microbial genome sequences, this data set once posed the largest indexed set of raw sequencing data. To the moment of performing our experiments, however, it only represented an outdated snapshot of the corresponding part of the SRA. Nevertheless, we decided to keep the same sequence set for this work to enable direct comparison and benchmarking. A complete list of SRA IDs contained in this set is available as file <monospace>TableS1_SRA_Microbe.tsv</monospace> (with further information available in <monospace>TableS10_SRA_Microbe_McCortex_logs.tsv.</monospace> and <monospace>TableS11_SRA_Microbe_no_logs.tsv</monospace>) in <xref ref-type="supplementary-material" rid="SD2">Supplemental Data</xref>. For details on how the set of genomes was selected, we refer to the original publication<sup><xref ref-type="bibr" rid="R25">25</xref></sup>.</p></sec><sec id="S39"><title>SRA-Fungi</title><p id="P92">This data set contains all samples from the SRA assigned to the taxonomic ID <monospace>4751</monospace> (Fungi) specifying the library source <monospace>GENOMIC</monospace> and excluding samples using platforms <monospace>PACBIO_SMRT</monospace> or <monospace>OXFORD_NANOPORE</monospace>. In total, this amounts to 125,585 samples processed for cleaning. Out of these, 114,839 (91.4%) could be successfully cleaned and were used to assemble the final MetaGraph index. All sample metadata was requested from NCBI SRA on 25.09.2020 using the BigQuery tool on the Google Cloud Platform.</p></sec><sec id="S40"><title>SRA-Plants</title><p id="P93">This data set contains all samples from the SRA assigned to the taxonomic ID <monospace>33090</monospace> (Viridiplantae), specifying the library source <monospace>GENOMIC</monospace> and excluding samples using platforms <monospace>PACBIO_SMRT</monospace> or <monospace>OXFORD_NANOPORE</monospace>. In total, this amounts to 576,226 samples processed for cleaning. Out of these, 531,736 (92.3%) could be successfully cleaned and were used to assemble the final MetaGraph index. All sample metadata was requested from NCBI SRA on 17.08.2020 using the BigQuery tool on the Google Cloud Platform.</p></sec><sec id="S41"><title>SRA-Human</title><p id="P94">This data set contains all samples of assay type <monospace>WGS</monospace>, <monospace>AMPLICON</monospace>, <monospace>WXS</monospace>, <monospace>WGA</monospace>, <monospace>WCS</monospace>, <monospace>CLONE</monospace>, <monospace>POOLCLONE</monospace>, or <monospace>FINISHING</monospace> from the SRA assigned to the taxonomic ID <monospace>9606</monospace> (Homo sapiens) specifying the library source <monospace>GENOMIC</monospace> and excluding samples using platforms <monospace>PACBIO_SMRT</monospace> or <monospace>OXFORD_NANOPORE</monospace>. In total, this amounts to 454,252 samples processed for cleaning. Out of these, 436,502 (96.1%) could be successfully cleaned and were used to assemble the final Meta-Graph index. All sample metadata was requested from NCBI SRA on 12.12.2020 using the BigQuery tool on the Google Cloud Platform.</p></sec><sec id="S42"><title>SRA-Metazoa</title><p id="P95">This data set contains all samples from the SRA assigned to the taxonomic ID <monospace>33208</monospace> (Meta-zoa) specifying the library source <monospace>GENOMIC</monospace> and excluding samples using platforms <monospace>PACBIO_SMRT</monospace> or <monospace>OXFORD_NANOPORE</monospace>. In total, this amounts to 906,401 samples processed for cleaning. Out of these, 805,239 (88.8%) could be successfully cleaned and were used to assemble the final MetaGraph index. All sample metadata was requested from NCBI SRA on 17.09.2020 using the BigQuery tool on the Google Cloud Platform.</p></sec><sec id="S43"><title>SRA-MetaGut (human gut microbiome)</title><p id="P96">This group contains all sequencing samples of the assay type <monospace>WGS</monospace> and <monospace>AMPLICON</monospace> from the SRA assigned to the taxonomic ID <monospace>408170</monospace> (Human gut metagenome), excluding samples using platforms <monospace>PACBIO_SMRT</monospace> and <monospace>OXFORD_NANOPORE</monospace>. In total, this amounts to 242,619 samples, where 177,759 (73.3%) were <monospace>AMPLICON</monospace> and 64,860 (26.7%) were <monospace>WGS</monospace> samples. All these samples were successfully cleaned and were used to assemble the final MetaGraph index. All sample metadata was requested from NCBI SRA on 01.10.2020 using the Big-Query tool on the Google Cloud Platform.</p><p id="P97">The complete lists of all samples (including the list of successfully cleaned ones) for each subset are available in <xref ref-type="supplementary-material" rid="SD2">Supplemental Data</xref>.</p></sec></sec><sec id="S44"><title>Indexing Genotype Tissue Expression (GTEx) data</title><p id="P98">The 9,759 raw RNA-Seq samples of the Genotype-Tissue Expression (GTEx) project have become a <italic>de facto</italic> reference set for the study of human transcriptomics<sup><xref ref-type="bibr" rid="R50">50</xref></sup>. All available RNA-Seq samples that were part of the version 7 release of GTEx were downloaded via dbGaP to our compute cluster of ETH Zurich. A list of all samples used is available in the <xref ref-type="supplementary-material" rid="SD2">Supplemental Data</xref>.</p><p id="P99">Each sample was individually transformed into a graph using <italic>k</italic> = 31 and then cleaned with the standard graph cleaning algorithm implemented in MetaGraph, with trimming tips shorter than 2<italic>k</italic> and using an automatically computed coverage threshold with the fallback value of 2 for removing unitigs with low median k-mer abundance. All resulting cleaned contigs were assembled into a joint canonical De Bruijn graph and then transformed to the final primary graph. Using the typical workflow, the primary joint graph was annotated using the cleaned contigs extracted from each sample, generating one label per sample. All individual annotation columns were finally collected into one matrix and transformed into the <monospace>RowDiff&gt;MULTI-BRWT&lt;</monospace> representation.</p><p id="P100">When performing the indexing with k-mer counts (row ‘GTEx with counts’ in <xref ref-type="table" rid="T1">Table 1</xref>), we applied an additional smoothing of k-mer counts within cleaned unitigs to facilitate the compression. We used a smoothing window of size 60. That is, for each k-mer of a cleaned unitig, its count was replaced with the median abundance of 30 k-mers before it in that unitig and 30 after. This smoothing window is significantly smaller than the expected transcript length, however, it was sufficient to considerably reduce the annotation size (from 184GB when indexing the original counts to 76 GB).</p></sec><sec id="S45"><title>Indexing the TCGA RNA-Seq cohort</title><p id="P101">The Cancer Genome Atlas (TCGA) has collected RNA-Seq samples on the same order of magnitude from primary tumors, spanning across more than 30 cancer types, constituting a central resource for cancer research<sup><xref ref-type="bibr" rid="R49">49</xref></sup>. We downloaded the data from the Genomic Data Commons Portal of the NCI. A list containing all processed samples is available as file <monospace>TableS8_TCGA.tsv.gz</monospace> in the <xref ref-type="supplementary-material" rid="SD2">Supplemental Data</xref>. In total, the index contains 11,095 individual records spanning all available TCGA cancer types. We used the same indexing workflow as for GTEx. Similarly to GTEx, we have also constructed MetaGraph indexes with k-mer counts for TCGA (see <xref ref-type="table" rid="T1">Table 1</xref>).</p></sec><sec id="S46"><title>Indexing environmental metagenome samples (Meta-SUB)</title><p id="P102">This data set contains 4,220 whole metagenome sequencing samples collected from the built environment through the MetaSUB consortium<sup><xref ref-type="bibr" rid="R48">48</xref></sup>. The swabs were collected at different locations and from different objects, where we also contributed to data collection by collecting swabs from benches, ticket machines, and various other objects at different tram stops and train stations in Zurich. When sampling, each swab was annotated with additional data including the location of sampling, the type of object from which the swab was collected, the material of that object, the elevation above or below sea level, and the station or line where the sample was collected. The swabs were then sent for further processing to the sequencing team. For more details about DNA extraction and sequencing, refer to the original publication<sup><xref ref-type="bibr" rid="R48">48</xref></sup>.</p><p id="P103">The raw data (read sets) can be downloaded using the MetaSUB utils<sup><xref ref-type="bibr" rid="R88">88</xref></sup>. A list of all sample IDs used in this study is available as file <monospace>TableS6_MetaSUB.csv.gz</monospace> in the <xref ref-type="supplementary-material" rid="SD2">Supplemental Data</xref>.</p><p id="P104">All input samples were directly assembled into canonical De Bruijn graphs (sample graphs) with <italic>k</italic> = 41. All graphs were then cleaned with the standard graph cleaning procedure implemented in MetaGraph, with pruning tips shorter than 2<italic>k</italic> and removing unitigs depending on coverage (automatically computed based on k-mer spectrum). If no threshold could be computed by the algorithm, we used 3 as a fallback value. The cleaned graphs were transformed into primary contigs, which were then used to assemble a joint graph and annotate it. We annotated the graph with sample IDs, which is the most fine-grained annotation we could construct. Thus, each sample was transformed into a single annotation column in the final MetaGraph index. All the annotation columns were finally aggregated into a joint annotation matrix compressed with the <monospace>RowDiff&gt;MULTI-BRWT&lt;</monospace> representation. The additional metadata, such as the location, the object, and the surface material, were written to a separate table and could easily be retrieved for any sample ID.</p></sec><sec id="S47"><title>Indexing the Reference Sequence (RefSeq) collection</title><p id="P105">The NCBI RefSeq database<sup><xref ref-type="bibr" rid="R52">52</xref></sup> contains a non-redundant collection of genomic DNA sequences (all assembled reference genome sequences), transcripts, and proteins.</p><p id="P106">We indexed all 32,881,422 nucleotide sequences from release 97 of the RefSeq collection, a total of 1.7 Tbp, which takes 483 GB when compressed with gzip −9. We constructed three indexes of different annotation granularity: annotating NCBI Taxonomy IDs at the genus level (85,375 binary annotation columns), annotating sequence accessions (32,881,348 binary annotation columns), and finally annotating k-mer coordinates within buckets split by Taxonomy IDs (85,375 annotation columns with tuples of k-mer coordinates). All these three indexes employ the same underlying De Bruijn graph as a k-mer index with <italic>k</italic> = 31, encoding all the k-mers extracted from the sequences of the RefSeq collection. The graph was constructed in <italic>basic</italic> mode (non-canonical, non-primary), as all the sequences of the collection are assemblies and, hence, are of a determined orientation.</p><p id="P107">The summary of the indexes is shown in <xref ref-type="table" rid="T1">Table 1</xref>. As expected, the compression ratio (the ratio between the compressed input and the index size) depends on the annotation granularity, varying from 1.9× for annotations derived from Taxonomy IDs to 1.0× for lossless indexing with k-mer coordinates. Our indexes form an alternative to the commonly used BLAST database<sup><xref ref-type="bibr" rid="R19">19</xref></sup> for competitive high-throughput search<sup><xref ref-type="bibr" rid="R40">40</xref></sup>.</p></sec><sec id="S48"><title>Indexing global ocean microbiome (Tara Oceans) data</title><p id="P108">This collection contains 34,815 genomes reconstructed from metagenomic data sets from major oceanographical surveys and time-series studies with high coverage of global ocean microbial communities across ocean basins, depth layers, and time<sup><xref ref-type="bibr" rid="R54">54</xref></sup>. In addition to metagenome-assembled genomes (MAGs) constructed from 1,038 publicly available metagenomes extracted from ocean water samples collected at 215 globally distributed sampling sites, the collection includes a set of single amplified genomes (SAGs) and reference genome sequences of marine bacteria and archaea from other existing databases. For more details on the data composition, refer to the original publication<sup><xref ref-type="bibr" rid="R54">54</xref></sup>.</p><p id="P109">We constructed two indexes for this collection (see summary information in <xref ref-type="table" rid="T1">Table 1</xref>). Both indexes employ a De Bruijn graph over <italic>k</italic> = 31 constructed in the <italic>basic</italic> mode, with 62 million k-mers. The first index annotates k-mers to represent their membership to individual filtered scaffolds reconstructed from the metagenomic samples and takes 1.6× less space than the gzip-compressed input. The second index encodes the coordinates of the k-mers within individual assembled genomes and, hence, losslessly represents the input sequences. Notably, it still achieves a compression ratio of 1.2×. Lastly, in addition to the two indexes described above, we also indexed the raw assembled scaffolded contigs (360 Gbp) in an annotated graph with 318 million annotation labels. Due to the very large number of annotation columns, unlike the annotation matrices in other indexes typically represented in the Multi-BRWT format, for this index, we represent the RowDiff-transformed annotation matrix in the <monospace>RowFlat</monospace> format for fast row queries.</p></sec><sec id="S49"><title>Experiments</title><p id="P110">This section summarizes the experimental setup for the different results presented in this work.</p><sec id="S50"><title>Benchmarking BIGSI and COBS</title><p id="P111">When indexing subsets of the collection of bacterial and viral genomic read sets<sup><xref ref-type="bibr" rid="R25">25</xref></sup> in our evaluation experiments, we used BIGSI<sup><xref ref-type="bibr" rid="R25">25</xref></sup> with the same parameters as in the original work<sup><xref ref-type="bibr" rid="R25">25</xref></sup> (three hash functions with Bloom filters of size 25 · 10<sup><xref ref-type="bibr" rid="R6">6</xref></sup>) and COBS<sup><xref ref-type="bibr" rid="R26">26</xref></sup> in two settings: i) four hash functions and the target false-positive rate of 5%; ii) seven hash functions and the target false-positive rate of 1%.</p></sec><sec id="S51"><title>Experiment discovery on SRA graphs</title><p id="P112">We evaluated each graph using 300 randomly selected samples from their respective input sample sets. To generate a query file for a graph, we randomly selected 100 reads (or the entire read set if fewer than 100 reads are available) from each of the 300 selected samples, resulting in query files of 30’000 reads per graph. To generate auxiliary reads with errors, we selected subsets of the original query sets such that 10 random reads would be selected from each sample. Then, we introduced substitution errors to these reads with probabilities 0.1%, 1%, 2%, 5%, and 10% and insertions-deletions at 10% of the substitution probability using Mutation-Simulator<sup><xref ref-type="bibr" rid="R89">89</xref></sup>. Given these read sets, we then discarded all reads whose mean <italic>k</italic>-mer multiplicities were below the unitig cleaning thresholds determined by the cleaning procedure (<bold>Methods Subsection</bold> “<xref ref-type="sec" rid="S21">Graph cleaning</xref>”).</p><p id="P113">We evaluated experiment discovery at two different levels of granularity: <italic>(i)</italic> mapping to individual sample graphs (<xref ref-type="fig" rid="F7">Extended Data Figure 3 a</xref>) and <italic>(ii)</italic> mapping to joint annotated graphs (<xref ref-type="fig" rid="F3">Figure 3 a,b</xref>). When mapping to joint graphs, we only considered mapping results that retrieved the ground-truth label of each query read. For all granularities, we mapped the reads via both exact <italic>k</italic>-mer matching and label-consistent sequence-to-graph alignment using MetaGraph-LA<sup><xref ref-type="bibr" rid="R46">46</xref></sup>. We measure how well the reads aligned as the percentage of characters in the query that are covered by at least one reported mapping.</p></sec><sec id="S52"><title>Human gut resistome and phageome exploration</title><p id="P114">We queried all antimicrobial resistance (AMR) genes from the Comprehensive Antibiotic Resistance Database (CARD) database (version 3.2.7)<sup><xref ref-type="bibr" rid="R47">47</xref>, <xref ref-type="bibr" rid="R56">56</xref></sup> and all bacteriophages from RefSeq Release 218<sup><xref ref-type="bibr" rid="R57">57</xref></sup>. We selected bacteriophages by selecting all viral sequences with the term <monospace>phage</monospace> in their header. We mapped these sequences to all accessions in the SRA-MetaGut index representing whole-metagenome sequencing samples. We recorded an accession as a match to a query if at least 80% of the query’s k-mers exactly matched a k-mer in the accession. We then reduced the pools of AMR genes, SRA accessions, and RefSeq bacteriophages to those for which at least one match was found.</p><p id="P115">To measure the degree of association for each AMR gene family-bacteriophage pair, we computed two binary vectors where each index represents a gut microbiome sample. The first vector indicates the presence of at least one gene match from the gene family and the second vector indicates a match to the phage. We then measure the association using the Matthews correlation coefficient (denoted by Corr<sub>MCC</sub>) if both vectors indicate at least 5 present matches (value <monospace>1</monospace>) and at least 5 absent matches (value <monospace>0</monospace>).</p><p id="P116">When measuring the growth of resistance to antibiotics over time in each continent, we normalized the counts in the confusion matrix before computing Corr<sub>MCC</sub> to cor-rect for differing numbers of samples deposited in each year and from each continent. If we denote the number of accessions from a continent <italic>C</italic> by <italic>n<sub>C</sub></italic> and the number of accessions from a year <italic>Y</italic> by <italic>n<sub>Y</sub></italic>, we normalised the counts by letting each accession from continent <italic>C</italic> and year <italic>Y</italic> contribute a count of <inline-formula><mml:math id="M6"><mml:mrow><mml:mi>c</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:msub><mml:mi>n</mml:mi><mml:mi>N</mml:mi></mml:msub></mml:mrow><mml:mrow><mml:msub><mml:mi>n</mml:mi><mml:mi>C</mml:mi></mml:msub><mml:mo>⋅</mml:mo><mml:msub><mml:mi>n</mml:mi><mml:mi>Y</mml:mi></mml:msub></mml:mrow></mml:mfrac></mml:mrow></mml:math></inline-formula> instead of 1. <italic>n<sub>N</sub></italic> is a scaling factor applied to the four counts in the confusion matrix so that their sum equals the total number of accessions considered. We use the same scaling factor <italic>c</italic> for each count when fitting a linear regression model to the match counts to determine drug resistance growth over time for each continent.</p><p id="P117">We compute <italic>p</italic>-values for each gene-to-phage correlation Corr<sub>MCC</sub> and each drug resistance growth linear regression slope <italic>s</italic> via permutation testing. For each analysis, we compute 100 permutations of the antibiotic and gene family indicator vectors, respectively, and compute <italic>p</italic>-values relative to the resulting null distributions.</p><p id="P118">In <xref ref-type="fig" rid="F4">Figure 4 a</xref>, we only plot a gene family or a phage if it has at least one significant correlation with Corr<sub>MCC</sub> &lt; 0.25. In <xref ref-type="fig" rid="F4">Figure 4 b</xref>, we report all antibiotics for which we measure statistically significant growth in at least one continent. All <italic>p</italic>-values are corrected using the Benjamini-Yekutieli procedure to a family-wise error rate of 0.05 and are considered to be significant if they are <italic>p &gt;</italic> 0.05 after correction.</p></sec><sec id="S53"><title>Re-alignment experiments against GTEx index</title><p id="P119">We randomly selected a subset of 10 samples from the GTEx cohort (available as file <monospace>TableS14_GTExSubset.tsv</monospace> in supplemental resources given in Section 1) to evaluate the re-alignment of samples against the graph. For each sample, we considered the first 250,000 read pairs. The reads were re-aligned to the human reference genome (version hg38.p12) using the STAR aligner<sup><xref ref-type="bibr" rid="R90">90</xref></sup> (version 2.7.0f). Similarly, we used the MetaGraph sequence-to-graph alignment to align the reads back to the GTEx index. In either setting, we used sensitive alignment criteria, utilizing <monospace>-outFilterMatchNmin 21</monospace> for STAR and <monospace>-align-min-seed-length 21</monospace> for MetaGraph. The latter setting does not apply for Meta-Graph exact k-mer matching, where always a full k-mer is mapped.</p></sec><sec id="S54"><title>Query of TCGA index</title><p id="P120">To generate the list of candidate trans-junctions, we iterated over all genes present in the GENCODE annotation (version 32) and formed for all transcripts</p></sec></sec><sec id="S55"><title>The architecture and the implementation of Meta-Graph Online</title><p id="P121">The architecture of the MetaGraph Online service is schematically shown in <xref ref-type="supplementary-material" rid="SD1">Figure S-6</xref>. The backend server (<xref ref-type="supplementary-material" rid="SD1">Figure S-6</xref>, <bold>middle</bold>) implemented as a Flask application provides a web interface and generates dynamic web pages for submitting search queries and viewing the query results. The user queries are processed and transformed into a search query, which is then passed to the remote servers hosting the MetaGraph indexes (<xref ref-type="supplementary-material" rid="SD1">Figure S-6</xref>, <bold>right</bold>). Once the query has been executed by the respective MetaGraph server, the results are sent back to the backend server and an aggregated summary is rendered to the user. Each MetaGraph index is hosted on a remote server by running the MetaGraph tool in server mode (<xref ref-type="supplementary-material" rid="SD1">Figure S-6</xref>, <bold>right</bold>). The server applications run independently and are distributed across the available machines. Each MetaGraph server receives HTTP requests formed by the central backend server on user search requests. The communication between the central backend server and the other remote MetaGraph servers happens via the Python API. For seamless compatibility, we also made the backend server redirect user requests and provide the same web API for querying MetaGraph servers (e.g., from Python or as a simple HTTP request) as if the MetaGraph tool is locally running in server mode.</p><p id="P122">The backend of MetaGraph Online is implemented as a Flask application. This web application is deployed in a Docker container using the Nginx server as a backend. For each search query from the user, it forms a request accordingly and sends it via the Python API client to the MetaGraph servers hosting the indexes. We run these MetaGraph servers in Docker containers on the same or other machines in a federated manner. In addition, the web application emulates the usual MetaGraph API by redirecting all requests to the respective individual Meta-Graph servers hosting the indexes.</p></sec></sec><sec id="S56" sec-type="extended-data"><title>Extended Data</title><fig id="F5" position="anchor"><label>Extended Data Figure 1</label><caption><title>MetaGraph API and search approaches</title><p id="P123"><bold>a)</bold> MetaGraph is designed to support a client-server infrastructure as exemplified here with a script in Python. In a few steps, several remote (or local) graph instances can be created and queried interactively. Results are returned as a data frame that can be used for further analyses. <bold>b)</bold> Conceptual overview of remote or local index distribution. Every graph index runs on a separate server, accepting queries via the client API. <bold>c-e)</bold> Schematic representation of two main approaches for sequence search. <bold>c)</bold> Counting exact k-mer matches between query and graph. <bold>d)</bold> Alignment finds all closest paths within a given edit distance. <bold>e)</bold> Batched sequence search retrieves a decompressed subgraph (query graph) from the full compressed annotated graph for subsequent query. All query sequences are combined into an intermediate batch graph, which is then traversed to extract contigs to be queried against the full index. Hits and their corresponding annotations are aggregated to construct the final query graph, which is then searched against with the original query sequences.</p></caption><graphic xlink:href="EMS196134-f005"/></fig><fig id="F6" position="anchor"><label>Extended Data Figure 2</label><caption><p id="P124"><bold>Accuracy of sequence search approaches</bold> for queries of <bold>a)</bold> Illumina-type, <bold>b)</bold> PacBio HiFi-type, and <bold>c)</bold> ONT-type simulated reads. All graphs (indexes) were constructed from an <italic>Escherichia coli</italic> reference genome or its simulated Illumina-type reads at different sequencing depths. Accuracy is measured as the mean Pearson correlation between the edit distance computed by each method and gold-standard edit distances, measured across 1000 bootstrap samples of 500 simulated <italic>E. coli</italic> query reads. Error bars represent 95% confidence intervals of the mean. Bar hatching indicates a method that uses sequence-to-graph alignment instead of exact k-mer matching.</p></caption><graphic xlink:href="EMS196134-f006"/></fig><fig id="F7" position="anchor"><label>Extended Data Figure 3</label><caption><title>Completeness and specificity</title><p id="P125"><bold>a)</bold> Complementary ECDF curve showing the fraction of reads that can be re-aligned to the index (y-axis) requiring at least x% matching positions (x-axis) for a range of indexed SRA datasets. <bold>b)</bold> Distribution of sample counts retrieved from the MetaGraph GTEx index for the transcript ENST00000519937.6 of the gene SFTPB, known to be specifically expressed in lung and thyroid tissues.</p></caption><graphic xlink:href="EMS196134-f007"/></fig><fig id="F8" position="anchor"><label>Extended Data Figure 4</label><caption><title>Additional applications</title><p id="P126"><bold>a)</bold> Number of antimicrobial resistance (AMR) gene families per sample in the SRA-MetaGut human gut microbiome samples. <bold>b)</bold> Number of AMR markers per sample for different cities in the MetaSUB study. Bars represent <italic>±σ</italic>. <bold>c)</bold> Distribution of the mean number of AMR markers grouped by surface material based on all samples of the MetaSUB data set <bold>d)</bold> Back-splice junction detection on the DENND1A gene in GTEx RNA-Seq sample <monospace>SRR627455</monospace>.</p></caption><graphic xlink:href="EMS196134-f008"/></fig></sec><sec sec-type="supplementary-material" id="SM"><title>Supplementary Material</title><supplementary-material content-type="local-data" id="SD1"><label>Supplemental Material</label><media xlink:href="EMS196134-supplement-Supplemental_Material.pdf" mimetype="application" mime-subtype="pdf" id="d34aAcFbB" position="anchor"/></supplementary-material><supplementary-material content-type="local-data" id="SD2"><label>Supplemental Data</label><media xlink:href="EMS196134-supplement-Supplemental_Data.pdf" mimetype="application" mime-subtype="pdf" id="d34aAcFcB" position="anchor"/></supplementary-material></sec></body><back><ack id="S57"><title>Acknowledgements</title><p>This work was supported through funds of ETH Zurich, MK, and HM are funded by the Swiss National Science Foundation Grant No. 407540_167331 “Scalable Genome Graph Data Structures for Metagenomics and Genome Annotation” as part of Swiss National Research Programme (NRP) 75 “Big Data.” The authors would like to thank the members of the MetaSUB international consortium for early access to raw sequencing data and their feedback on early versions of the geolocation DNA sequence search. We also would like to acknowledge the NCBI staff working on maintaining and developing the SRA for their support and interest in our project. The authors thank the members of the Biomedical Informatics Group at ETH Zurich for constant feedback and input on the project. The authors also would like to thank Google Inc. for providing a package of free compute credits on the Google Cloud Platform. We further would like to thank the donors and their families who contributed data to the Genotype-Tissue Expression (GTEx) and The Cancer Genome Atlas (TCGA) projects. This study contains data gathered by the GTEx project available through dbGaP at <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/gap">http://www.ncbi.nlm.nih.gov/gap</ext-link> through dbGaP accession number <monospace>phs000424.v7.p1</monospace>. This study further contains data gathered by the TCGA project available through dbGaP accession number <monospace>phs000178.v1.p1</monospace>. The authors are also grateful for the ability to use the publicly available data gathered by the gnomAD project.</p></ack><fn-group><fn id="FN1"><label>a</label><p id="P127">While Mantis, Bifrost, and MetaGraph provide <italic>lossless</italic> representations of the indexed k-mer sets, BIGSI and COBS both employ probabilistic data structures that lead to false-positive matches.</p></fn><fn id="FN2"><label>b</label><p id="P128"><monospace>haib18CEM5453_HMCMJCCXY_SL336225</monospace></p></fn><fn id="FN3"><label>c</label><p id="P129">Available at <ext-link ext-link-type="uri" xlink:href="https://github.com/ratschlab/metagraph_paper_resources/tree/master/notebooks">https://github.com/ratschlab/metagraph_paper_resources/tree/master/notebooks</ext-link></p></fn></fn-group><ref-list><ref id="R1"><label>1</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Stephens</surname><given-names>ZD</given-names></name><etal/></person-group><article-title>Big data: Astronomical or genomical?</article-title><source>PLoS Biology</source><year>2015</year><pub-id pub-id-type="pmcid">PMC4494865</pub-id><pub-id pub-id-type="pmid">26151137</pub-id><pub-id pub-id-type="doi">10.1371/journal.pbio.1002195</pub-id></element-citation></ref><ref id="R2"><label>2</label><element-citation publication-type="web"><person-group person-group-type="author"><name><surname>Archive</surname><given-names>EN</given-names></name></person-group><source>Ena statistics – assembled/annotated sequence growth</source><date-in-citation>Accessed: 2024-04-18</date-in-citation><comment><ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/ena/about/statistics">https://www.ebi.ac.uk/ena/about/statistics</ext-link></comment></element-citation></ref><ref id="R3"><label>3</label><element-citation publication-type="report"><person-group person-group-type="author"><name><surname>Bowe</surname><given-names>A</given-names></name><name><surname>Onodera</surname><given-names>T</given-names></name><name><surname>Sadakane</surname><given-names>K</given-names></name><name><surname>Shibuya</surname><given-names>T</given-names></name></person-group><source>Succinct de Bruijn graphs</source><series>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</series><year>2012</year></element-citation></ref><ref id="R4"><label>4</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Iqbal</surname><given-names>Z</given-names></name><name><surname>Caccamo</surname><given-names>M</given-names></name><name><surname>Turner</surname><given-names>I</given-names></name><name><surname>Flicek</surname><given-names>P</given-names></name><name><surname>McVean</surname><given-names>G</given-names></name></person-group><article-title>De novo assembly and genotyping of variants using colored de Bruijn graphs</article-title><source>Nature Genetics</source><year>2012</year><pub-id pub-id-type="pmcid">PMC3272472</pub-id><pub-id pub-id-type="pmid">22231483</pub-id><pub-id pub-id-type="doi">10.1038/ng.1028</pub-id></element-citation></ref><ref id="R5"><label>5</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rautiainen</surname><given-names>M</given-names></name><name><surname>Marschall</surname><given-names>T</given-names></name></person-group><article-title>Graphaligner: Rapid and versatile sequence-to-graph alignment</article-title><source>Genome Biology</source><year>2020</year><volume>21</volume><fpage>1</fpage><lpage>28</lpage><pub-id pub-id-type="pmcid">PMC7513500</pub-id><pub-id pub-id-type="pmid">32972461</pub-id><pub-id pub-id-type="doi">10.1186/s13059-020-02157-2</pub-id></element-citation></ref><ref id="R6"><label>6</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pandey</surname><given-names>P</given-names></name><etal/></person-group><article-title>Mantis: A Fast, Small, and Exact Large-Scale Sequence-Search Index</article-title><source>Cell Systems</source><year>2018</year><pub-id pub-id-type="pmcid">PMC10964368</pub-id><pub-id pub-id-type="pmid">29936185</pub-id><pub-id pub-id-type="doi">10.1016/j.cels.2018.05.021</pub-id></element-citation></ref><ref id="R7"><label>7</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Iqbal</surname><given-names>Z</given-names></name><name><surname>Turner</surname><given-names>I</given-names></name><name><surname>McVean</surname><given-names>G</given-names></name></person-group><article-title>High-throughput microbial population genomics using the cortex variation assembler</article-title><source>Bioinformatics</source><year>2013</year><volume>29</volume><fpage>275</fpage><lpage>276</lpage><pub-id pub-id-type="pmcid">PMC3546798</pub-id><pub-id pub-id-type="pmid">23172865</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/bts673</pub-id></element-citation></ref><ref id="R8"><label>8</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Barbay</surname><given-names>J</given-names></name><name><surname>Claude</surname><given-names>F</given-names></name><name><surname>Navarro</surname><given-names>G</given-names></name></person-group><article-title>Compact binary relation representations with rich functionality</article-title><source>Information and Computation</source><year>2013</year></element-citation></ref><ref id="R9"><label>9</label><element-citation publication-type="report"><person-group person-group-type="author"><name><surname>Gog</surname><given-names>S</given-names></name><name><surname>Beller</surname><given-names>T</given-names></name><name><surname>Moffat</surname><given-names>A</given-names></name><name><surname>Petri</surname><given-names>M</given-names></name></person-group><source>From theory to practice: Plug and play with succinct data structures</source><series>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</series><year>2014</year></element-citation></ref><ref id="R10"><label>10</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Muggli</surname><given-names>MD</given-names></name><name><surname>Alipanahi</surname><given-names>B</given-names></name><name><surname>Boucher</surname><given-names>C</given-names></name></person-group><article-title>Building large updatable colored de bruijn graphs via merging</article-title><source>Bioinformatics</source><year>2019</year><volume>35</volume><fpage>i51</fpage><lpage>i60</lpage><pub-id pub-id-type="pmcid">PMC6612864</pub-id><pub-id pub-id-type="pmid">31510647</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btz350</pub-id></element-citation></ref><ref id="R11"><label>11</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Karasikov</surname><given-names>M</given-names></name><etal/></person-group><source>Sparse binary relation representations for genome graph annotation</source><conf-name>International Conference on Research in Computational Molecular Biology</conf-name><conf-sponsor>Springer</conf-sponsor><year>2019</year><fpage>120</fpage><lpage>135</lpage></element-citation></ref><ref id="R12"><label>12</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Danciu</surname><given-names>D</given-names></name><name><surname>Karasikov</surname><given-names>M</given-names></name><name><surname>Mustafa</surname><given-names>H</given-names></name><name><surname>Kahles</surname><given-names>A</given-names></name><name><surname>Ratsch</surname><given-names>G</given-names></name></person-group><article-title>Using genome graph topology to guide annotation matrix sparsification</article-title><source>bioRxiv</source><year>2020</year></element-citation></ref><ref id="R13"><label>13</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Garrison</surname><given-names>E</given-names></name><etal/></person-group><article-title>Variation graph toolkit improves read mapping by representing genetic variation in the reference</article-title><source>Nature biotechnology</source><year>2018</year><volume>36</volume><fpage>875</fpage><lpage>879</lpage><pub-id pub-id-type="pmcid">PMC6126949</pub-id><pub-id pub-id-type="pmid">30125266</pub-id><pub-id pub-id-type="doi">10.1038/nbt.4227</pub-id></element-citation></ref><ref id="R14"><label>14</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Durbin</surname><given-names>R</given-names></name></person-group><article-title>Efficient haplotype matching and storage using the positional burrows–wheeler transform (pbwt)</article-title><source>Bioinformatics</source><year>2014</year><volume>30</volume><fpage>1266</fpage><lpage>1272</lpage><pub-id pub-id-type="pmcid">PMC3998136</pub-id><pub-id pub-id-type="pmid">24413527</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btu014</pub-id></element-citation></ref><ref id="R15"><label>15</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Novak</surname><given-names>AM</given-names></name><name><surname>Garrison</surname><given-names>E</given-names></name><name><surname>Paten</surname><given-names>B</given-names></name></person-group><article-title>A graph extension of the positional burrows–wheeler transform and its applications</article-title><source>Algorithms for Molecular Biology</source><year>2017</year><volume>12</volume><fpage>18</fpage><pub-id pub-id-type="pmcid">PMC5505026</pub-id><pub-id pub-id-type="pmid">28702075</pub-id><pub-id pub-id-type="doi">10.1186/s13015-017-0109-9</pub-id></element-citation></ref><ref id="R16"><label>16</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Jain</surname><given-names>C</given-names></name><name><surname>Misra</surname><given-names>S</given-names></name><name><surname>Zhang</surname><given-names>H</given-names></name><name><surname>Dilthey</surname><given-names>A</given-names></name><name><surname>Aluru</surname><given-names>S</given-names></name></person-group><source>Accelerating sequence alignment to graphs</source><conf-name>2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS)</conf-name><conf-sponsor>IEEE</conf-sponsor><year>2019</year><fpage>451</fpage><lpage>461</lpage></element-citation></ref><ref id="R17"><label>17</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Hickey</surname><given-names>G</given-names></name><etal/></person-group><article-title>Genotyping structural variants in pangenome graphs using the vg toolkit</article-title><source>Genome biology</source><year>2020</year><volume>21</volume><fpage>1</fpage><lpage>17</lpage><pub-id pub-id-type="pmcid">PMC7017486</pub-id><pub-id pub-id-type="pmid">32051000</pub-id><pub-id pub-id-type="doi">10.1186/s13059-020-1941-7</pub-id></element-citation></ref><ref id="R18"><label>18</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Altschul</surname><given-names>SF</given-names></name><name><surname>Gish</surname><given-names>W</given-names></name><name><surname>Miller</surname><given-names>W</given-names></name><name><surname>Myers</surname><given-names>EW</given-names></name><name><surname>Lipman</surname><given-names>DJ</given-names></name></person-group><article-title>Basic local alignment search tool</article-title><source>Journal of molecular biology</source><year>1990</year><volume>215</volume><fpage>403</fpage><lpage>410</lpage><pub-id pub-id-type="pmid">2231712</pub-id></element-citation></ref><ref id="R19"><label>19</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Morgulis</surname><given-names>A</given-names></name><etal/></person-group><article-title>Database indexing for production megablast searches</article-title><source>Bioinformatics</source><year>2008</year><volume>24</volume><fpage>1757</fpage><lpage>1764</lpage><pub-id pub-id-type="pmcid">PMC2696921</pub-id><pub-id pub-id-type="pmid">18567917</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btn322</pub-id></element-citation></ref><ref id="R20"><label>20</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Chen</surname><given-names>Y</given-names></name><name><surname>Ye</surname><given-names>W</given-names></name><name><surname>Zhang</surname><given-names>Y</given-names></name><name><surname>Xu</surname><given-names>Y</given-names></name></person-group><article-title>High speed blastn: an accelerated megablast search tool</article-title><source>Nucleic acids research</source><year>2015</year><volume>43</volume><fpage>7762</fpage><lpage>7768</lpage><pub-id pub-id-type="pmcid">PMC4652774</pub-id><pub-id pub-id-type="pmid">26250111</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkv784</pub-id></element-citation></ref><ref id="R21"><label>21</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kim</surname><given-names>D</given-names></name><name><surname>Song</surname><given-names>L</given-names></name><name><surname>Breitwieser</surname><given-names>FP</given-names></name><name><surname>Salzberg</surname><given-names>SL</given-names></name></person-group><article-title>Centrifuge: rapid and sensitive classification of metagenomic sequences</article-title><source>Genome research</source><year>2016</year><volume>26</volume><fpage>1721</fpage><lpage>1729</lpage><pub-id pub-id-type="pmcid">PMC5131823</pub-id><pub-id pub-id-type="pmid">27852649</pub-id><pub-id pub-id-type="doi">10.1101/gr.210641.116</pub-id></element-citation></ref><ref id="R22"><label>22</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ondov</surname><given-names>BD</given-names></name><etal/></person-group><article-title>Mash: fast genome and metagenome distance estimation using minhash</article-title><source>Genome biology</source><year>2016</year><volume>17</volume><fpage>132</fpage><pub-id pub-id-type="pmcid">PMC4915045</pub-id><pub-id pub-id-type="pmid">27323842</pub-id><pub-id pub-id-type="doi">10.1186/s13059-016-0997-x</pub-id></element-citation></ref><ref id="R23"><label>23</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Ondov</surname><given-names>BD</given-names></name><etal/></person-group><article-title>Mash screen: High-throughput sequence containment estimation for genome discovery</article-title><source>Genome biology</source><year>2019</year><volume>20</volume><fpage>232</fpage><pub-id pub-id-type="pmcid">PMC6833257</pub-id><pub-id pub-id-type="pmid">31690338</pub-id><pub-id pub-id-type="doi">10.1186/s13059-019-1841-x</pub-id></element-citation></ref><ref id="R24"><label>24</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Breitwieser</surname><given-names>F</given-names></name><name><surname>Baker</surname><given-names>D</given-names></name><name><surname>Salzberg</surname><given-names>SL</given-names></name></person-group><article-title>Krakenuniq: confident and fast metagenomics classification using unique k-mer counts</article-title><source>Genome biology</source><year>2018</year><volume>19</volume><fpage>198</fpage><pub-id pub-id-type="pmcid">PMC6238331</pub-id><pub-id pub-id-type="pmid">30445993</pub-id><pub-id pub-id-type="doi">10.1186/s13059-018-1568-0</pub-id></element-citation></ref><ref id="R25"><label>25</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bradley</surname><given-names>P</given-names></name><name><surname>den Bakker</surname><given-names>HC</given-names></name><name><surname>Rocha</surname><given-names>EP</given-names></name><name><surname>McVean</surname><given-names>G</given-names></name><name><surname>Iqbal</surname><given-names>Z</given-names></name></person-group><article-title>Ultrafast search of all deposited bacterial and viral genomic data</article-title><source>Nature biotechnology</source><year>2019</year><volume>37</volume><fpage>152</fpage><pub-id pub-id-type="pmcid">PMC6420049</pub-id><pub-id pub-id-type="pmid">30718882</pub-id><pub-id pub-id-type="doi">10.1038/s41587-018-0010-1</pub-id></element-citation></ref><ref id="R26"><label>26</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Bingmann</surname><given-names>T</given-names></name><name><surname>Bradley</surname><given-names>P</given-names></name><name><surname>Gauger</surname><given-names>F</given-names></name><name><surname>Iqbal</surname><given-names>Z</given-names></name></person-group><source>Cobs: a compact bit-sliced signature index</source><conf-name>International Symposium on String Processing and Information Retrieval</conf-name><conf-sponsor>Springer</conf-sponsor><year>2019</year><fpage>285</fpage><lpage>303</lpage></element-citation></ref><ref id="R27"><label>27</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Solomon</surname><given-names>B</given-names></name><name><surname>Kingsford</surname><given-names>C</given-names></name></person-group><article-title>Improved Search of Large Transcriptomic Sequencing Databases Using Split Sequence Bloom Trees</article-title><source>Journal of Computational Biology</source><year>2018</year><volume>25</volume><fpage>755</fpage><lpage>765</lpage><pub-id pub-id-type="pmcid">PMC6067102</pub-id><pub-id pub-id-type="pmid">29641248</pub-id><pub-id pub-id-type="doi">10.1089/cmb.2017.0265</pub-id></element-citation></ref><ref id="R28"><label>28</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Harris</surname><given-names>RS</given-names></name><name><surname>Medvedev</surname><given-names>P</given-names></name></person-group><article-title>Improved representation of sequence bloom trees</article-title><source>Bioinformatics</source><year>2020</year><volume>36</volume><fpage>721</fpage><lpage>727</lpage><pub-id pub-id-type="pmcid">PMC8215923</pub-id><pub-id pub-id-type="pmid">31504157</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btz662</pub-id></element-citation></ref><ref id="R29"><label>29</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Holley</surname><given-names>G</given-names></name><name><surname>Wittler</surname><given-names>R</given-names></name><name><surname>Stoye</surname><given-names>J</given-names></name></person-group><article-title>Bloom Filter Trie: an alignment-free and reference-free data structure for pangenome storage</article-title><source>Algorithms for Molecular Biology</source><year>2016</year><volume>11</volume><fpage>3</fpage><pub-id pub-id-type="pmcid">PMC4832552</pub-id><pub-id pub-id-type="pmid">27087830</pub-id><pub-id pub-id-type="doi">10.1186/s13015-016-0066-8</pub-id></element-citation></ref><ref id="R30"><label>30</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Almodaresi</surname><given-names>F</given-names></name><name><surname>Pandey</surname><given-names>P</given-names></name><name><surname>Ferdman</surname><given-names>M</given-names></name><name><surname>Johnson</surname><given-names>R</given-names></name><name><surname>Patro</surname><given-names>R</given-names></name></person-group><source>An efficient, scalable and exact representation of high-dimensional color information enabled via de bruijn graph search</source><conf-name>International Conference on Research in Computational Molecular Biology</conf-name><conf-sponsor>Springer</conf-sponsor><year>2019</year><fpage>1</fpage><lpage>18</lpage></element-citation></ref><ref id="R31"><label>31</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Muggli</surname><given-names>MD</given-names></name><etal/></person-group><article-title>Succinct colored de Bruijn graphs</article-title><source>Bioinformatics</source><year>2017</year><pub-id pub-id-type="pmcid">PMC5872255</pub-id><pub-id pub-id-type="pmid">28200001</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btx067</pub-id></element-citation></ref><ref id="R32"><label>32</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alipanahi</surname><given-names>B</given-names></name><name><surname>Muggli</surname><given-names>MD</given-names></name><name><surname>Jundi</surname><given-names>M</given-names></name><name><surname>Noyes</surname><given-names>NR</given-names></name><name><surname>Boucher</surname><given-names>C</given-names></name></person-group><article-title>Metagenome snp calling via read colored de bruijn graphs</article-title><source>Bioinformatics</source><year>2020</year><pub-id pub-id-type="pmcid">PMC8016496</pub-id><pub-id pub-id-type="pmid">32049324</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btaa081</pub-id></element-citation></ref><ref id="R33"><label>33</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Li</surname><given-names>D</given-names></name><name><surname>Liu</surname><given-names>C-M</given-names></name><name><surname>Luo</surname><given-names>R</given-names></name><name><surname>Sadakane</surname><given-names>K</given-names></name><name><surname>Lam</surname><given-names>T-W</given-names></name></person-group><article-title>Megahit: an ultra-fast single-node solution for large and complex metagenomics assembly via succinct de bruijn graph</article-title><source>Bioinformatics</source><year>2015</year><volume>31</volume><fpage>1674</fpage><lpage>1676</lpage><pub-id pub-id-type="pmid">25609793</pub-id></element-citation></ref><ref id="R34"><label>34</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lemane</surname><given-names>T</given-names></name><etal/></person-group><article-title>Indexing and real-time user-friendly queries in terabyte-sized complex genomic datasets with kmindex and ora</article-title><source>Nature Computational Science</source><year>2024</year><volume>4</volume><fpage>104</fpage><lpage>109</lpage><pub-id pub-id-type="pmid">38413777</pub-id></element-citation></ref><ref id="R35"><label>35</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Liu</surname><given-names>B</given-names></name><name><surname>Guo</surname><given-names>H</given-names></name><name><surname>Brudno</surname><given-names>M</given-names></name><name><surname>Wang</surname><given-names>Y</given-names></name></person-group><article-title>debga: read alignment with de bruijn graph-based seed and extension</article-title><source>Bioinformatics</source><year>2016</year><volume>32</volume><fpage>3224</fpage><lpage>3232</lpage><pub-id pub-id-type="pmid">27378303</pub-id></element-citation></ref><ref id="R36"><label>36</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Limasset</surname><given-names>A</given-names></name><name><surname>Cazaux</surname><given-names>B</given-names></name><name><surname>Rivals</surname><given-names>E</given-names></name><name><surname>Peterlongo</surname><given-names>P</given-names></name></person-group><article-title>Read mapping on de bruijn graphs</article-title><source>BMC bioinformatics</source><year>2016</year><volume>17</volume><fpage>1</fpage><lpage>12</lpage><pub-id pub-id-type="pmcid">PMC4910249</pub-id><pub-id pub-id-type="pmid">27306641</pub-id><pub-id pub-id-type="doi">10.1186/s12859-016-1103-9</pub-id></element-citation></ref><ref id="R37"><label>37</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Heydari</surname><given-names>M</given-names></name><name><surname>Miclotte</surname><given-names>G</given-names></name><name><surname>Van de Peer</surname><given-names>Y</given-names></name><name><surname>Fostier</surname><given-names>J</given-names></name></person-group><article-title>Browniealigner: accurate alignment of illumina sequencing data to de bruijn graphs</article-title><source>BMC bioinformatics</source><year>2018</year><volume>19</volume><fpage>1</fpage><lpage>10</lpage><pub-id pub-id-type="pmcid">PMC6122196</pub-id><pub-id pub-id-type="pmid">30180801</pub-id><pub-id pub-id-type="doi">10.1186/s12859-018-2319-7</pub-id></element-citation></ref><ref id="R38"><label>38</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Ivanov</surname><given-names>P</given-names></name><etal/></person-group><source>Astarix: Fast and optimal sequence-to-graph alignment</source><conf-name>International Conference on Research in Computational Molecular Biology</conf-name><conf-sponsor>Springer</conf-sponsor><year>2020</year><fpage>104</fpage><lpage>119</lpage></element-citation></ref><ref id="R39"><label>39</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Danko</surname><given-names>D</given-names></name><etal/></person-group><article-title>A global metagenomic map of urban microbiomes and antimicrobial resistance</article-title><source>Cell</source><year>2021</year><volume>184</volume><fpage>3376</fpage><lpage>3393</lpage><elocation-id>e17</elocation-id><comment><ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S0092867421005857">https://www.sciencedirect.com/science/article/pii/S0092867421005857</ext-link></comment><pub-id pub-id-type="pmcid">PMC8238498</pub-id><pub-id pub-id-type="pmid">34043940</pub-id><pub-id pub-id-type="doi">10.1016/j.cell.2021.05.002</pub-id></element-citation></ref><ref id="R40"><label>40</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Karasikov</surname><given-names>M</given-names></name><name><surname>Mustafa</surname><given-names>H</given-names></name><name><surname>Rätsch</surname><given-names>G</given-names></name><name><surname>Kahles</surname><given-names>A</given-names></name></person-group><article-title>Lossless indexing with counting de bruijn graphs</article-title><source>Genome Research</source><year>2022</year><volume>32</volume><fpage>1754</fpage><lpage>1764</lpage><comment><ext-link ext-link-type="uri" xlink:href="http://genome.cshlp.org/content/32/9/1754.abstract">http://genome.cshlp.org/content/32/9/1754.abstract</ext-link>. <ext-link ext-link-type="uri" xlink:href="https://genome.cshlp.org/content/32/9/1754.full.pdf+html">http://genome.cshlp.org/content/32/9/1754.full.pdf+html</ext-link></comment><pub-id pub-id-type="pmcid">PMC9528980</pub-id><pub-id pub-id-type="pmid">35609994</pub-id><pub-id pub-id-type="doi">10.1101/gr.276607.122</pub-id></element-citation></ref><ref id="R41"><label>41</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alanko</surname><given-names>JN</given-names></name><name><surname>Vuohtoniemi</surname><given-names>J</given-names></name><name><surname>Mäklin</surname><given-names>T</given-names></name><name><surname>Puglisi</surname><given-names>SJ</given-names></name></person-group><article-title>Themisto: a scalable colored k-mer index for sensitive pseudoalignment against hundreds of thousands of bacterial genomes</article-title><source>Bioinformatics</source><year>2023</year><volume>39</volume><fpage>i260</fpage><lpage>i269</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/bioinformatics/article-pdf/39/Supplement_1/i260/50741469/btad233.pdf">https://academic.oup.com/bioinformatics/article-pdf/39/Supplement_1/i260/50741469/btad233.pdf</ext-link></comment><pub-id pub-id-type="pmcid">PMC10311346</pub-id><pub-id pub-id-type="pmid">37387143</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btad233</pub-id></element-citation></ref><ref id="R42"><label>42</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Khan</surname><given-names>J</given-names></name><name><surname>Kokot</surname><given-names>M</given-names></name><name><surname>Deorowicz</surname><given-names>S</given-names></name><name><surname>Patro</surname><given-names>R</given-names></name></person-group><article-title>Scalable, ultra-fast, and low-memory construction of compacted de bruijn graphs with cuttlefish 2</article-title><source>Genome Biology</source><year>2022</year><volume>23</volume><fpage>190</fpage><pub-id pub-id-type="pmcid">PMC9454175</pub-id><pub-id pub-id-type="pmid">36076275</pub-id><pub-id pub-id-type="doi">10.1186/s13059-022-02743-6</pub-id></element-citation></ref><ref id="R43"><label>43</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Fan</surname><given-names>J</given-names></name><name><surname>Singh</surname><given-names>NP</given-names></name><name><surname>Khan</surname><given-names>J</given-names></name><name><surname>Pibiri</surname><given-names>GE</given-names></name><name><surname>Patro</surname><given-names>R</given-names></name></person-group><source>Fulgor: A Fast and Compact {k-mer} Index for Large-Scale Matching and Color Queries</source><person-group person-group-type="editor"><name><surname>Belazzougui</surname><given-names>D</given-names></name><name><surname>Ouangraoua</surname><given-names>A</given-names></name></person-group><conf-name>23rd International Workshop on Algorithms in Bioinformatics (WABI 2023), vol. 273 of Leibniz International Proceedings in Informatics (LIPIcs), 18:1-18:21</conf-name><conf-sponsor>Schloss Dagstuhl – Leibniz-Zentrum für Informatik, Dagstuhl</conf-sponsor><conf-loc>Germany</conf-loc><year>2023</year><pub-id pub-id-type="doi">10.4230/LIPIcs.WABI.2023.18</pub-id></element-citation></ref><ref id="R44"><label>44</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cracco</surname><given-names>A</given-names></name><name><surname>Tomescu</surname><given-names>AI</given-names></name></person-group><article-title>Extremely fast construction and querying of compacted and colored de bruijn graphs with ggcat</article-title><source>Genome Research</source><year>2023</year><elocation-id>gr–277615</elocation-id><pub-id pub-id-type="pmcid">PMC10538363</pub-id><pub-id pub-id-type="pmid">37253540</pub-id><pub-id pub-id-type="doi">10.1101/gr.277615.122</pub-id></element-citation></ref><ref id="R45"><label>45</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Holley</surname><given-names>G</given-names></name><name><surname>Melsted</surname><given-names>P</given-names></name></person-group><article-title>Bifrost: highly parallel construction and indexing of colored and compacted de bruijn graphs</article-title><source>Genome Biology</source><year>2020</year><volume>21</volume><fpage>249</fpage><pub-id pub-id-type="pmcid">PMC7499882</pub-id><pub-id pub-id-type="pmid">32943081</pub-id><pub-id pub-id-type="doi">10.1186/s13059-020-02135-8</pub-id></element-citation></ref><ref id="R46"><label>46</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mustafa</surname><given-names>H</given-names></name><name><surname>Karasikov</surname><given-names>M</given-names></name><name><surname>Rätsch</surname><given-names>G</given-names></name><name><surname>Kahles</surname><given-names>A</given-names></name></person-group><article-title>Metagraph-mla: Label-guided alignment to variable-order de bruijn graphs</article-title><source>bioRxiv</source><year>2022</year><pub-id pub-id-type="doi">10.4230/LIPIcs.WABI.2023.18</pub-id></element-citation></ref><ref id="R47"><label>47</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alcock</surname><given-names>BP</given-names></name><etal/></person-group><article-title>Card 2020: antibiotic resistome surveillance with the comprehensive antibiotic resistance database</article-title><source>Nucleic acids research</source><year>2020</year><volume>48</volume><fpage>D517</fpage><lpage>D525</lpage><pub-id pub-id-type="pmcid">PMC7145624</pub-id><pub-id pub-id-type="pmid">31665441</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkz935</pub-id></element-citation></ref><ref id="R48"><label>48</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Danko</surname><given-names>D</given-names></name><etal/></person-group><article-title>A global metagenomic map of urban microbiomes and antimicrobial resistance</article-title><source>Cell</source><year>2021</year><volume>184</volume><fpage>3376</fpage><lpage>3393</lpage><elocation-id>e17</elocation-id><comment><ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S0092867421005857">https://www.sciencedirect.com/science/article/pii/S0092867421005857</ext-link></comment></element-citation></ref><ref id="R49"><label>49</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Weinstein</surname><given-names>JN</given-names></name><etal/></person-group><article-title>The cancer genome atlas pan-cancer analysis project</article-title><source>Nature genetics</source><year>2013</year><volume>45</volume><fpage>1113</fpage><pub-id pub-id-type="pmcid">PMC3919969</pub-id><pub-id pub-id-type="pmid">24071849</pub-id><pub-id pub-id-type="doi">10.1038/ng.2764</pub-id></element-citation></ref><ref id="R50"><label>50</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lonsdale</surname><given-names>J</given-names></name><etal/></person-group><article-title>The genotype-tissue expression (gtex) project</article-title><source>Nature genetics</source><year>2013</year><volume>45</volume><fpage>580</fpage><pub-id pub-id-type="pmcid">PMC4010069</pub-id><pub-id pub-id-type="pmid">23715323</pub-id><pub-id pub-id-type="doi">10.1038/ng.2653</pub-id></element-citation></ref><ref id="R51"><label>51</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kodama</surname><given-names>Y</given-names></name><name><surname>Shumway</surname><given-names>M</given-names></name><collab>I N S D C</collab><name><surname>Leinonen</surname><given-names>Rasko</given-names></name></person-group><article-title>The sequence read archive: explosive growth of sequencing data</article-title><source>Nucleic Acids Research</source><year>2011</year><volume>40</volume><fpage>D54</fpage><lpage>D56</lpage><comment>o. b. o. t.</comment><pub-id pub-id-type="pmcid">PMC3245110</pub-id><pub-id pub-id-type="pmid">22009675</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkr854</pub-id></element-citation></ref><ref id="R52"><label>52</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>O’Leary</surname><given-names>NA</given-names></name><etal/></person-group><article-title>Reference sequence (RefSeq) database at NCBI: Current status, taxonomic expansion, and functional annotation</article-title><source>Nucleic Acids Research</source><year>2016</year><pub-id pub-id-type="pmcid">PMC4702849</pub-id><pub-id pub-id-type="pmid">26553804</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkv1189</pub-id></element-citation></ref><ref id="R53"><label>53</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Almeida</surname><given-names>A</given-names></name><etal/></person-group><article-title>A unified catalog of 204,938 reference genomes from the human gut microbiome</article-title><source>Nature Biotechnology</source><year>2021</year><volume>39</volume><fpage>105</fpage><lpage>114</lpage><pub-id pub-id-type="pmcid">PMC7801254</pub-id><pub-id pub-id-type="pmid">32690973</pub-id><pub-id pub-id-type="doi">10.1038/s41587-020-0603-3</pub-id></element-citation></ref><ref id="R54"><label>54</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Paoli</surname><given-names>L</given-names></name><etal/></person-group><article-title>Biosynthetic potential of the global ocean microbiome</article-title><source>Nature</source><year>2022</year><volume>607</volume><fpage>111</fpage><lpage>118</lpage><pub-id pub-id-type="pmcid">PMC9259500</pub-id><pub-id pub-id-type="pmid">35732736</pub-id><pub-id pub-id-type="doi">10.1038/s41586-022-04862-3</pub-id></element-citation></ref><ref id="R55"><label>55</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Leinonen</surname><given-names>R</given-names></name><etal/></person-group><article-title>UniProt archive</article-title><source>Bioinformatics</source><year>2004</year><volume>20</volume><fpage>3236</fpage><lpage>3237</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/bioinformatics/article-pdf/20/17/3236/48906545/bioinformatics_20_17_3236.pdf">https://academic.oup.com/bioinformatics/article-pdf/20/17/3236/48906545/bioinformatics_20_17_3236.pdf</ext-link></comment><pub-id pub-id-type="pmid">15044231</pub-id></element-citation></ref><ref id="R56"><label>56</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alcock</surname><given-names>BP</given-names></name><etal/></person-group><article-title>CARD 2023: expanded curation, support for machine learning, and resistome prediction at the Comprehensive Antibiotic Resistance Database</article-title><source>Nucleic Acids Research</source><year>2022</year><volume>51</volume><fpage>D690</fpage><lpage>D699</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/nar/article-pdf/51/D1/D690/48441073/gkac920.pdf">https://academic.oup.com/nar/article-pdf/51/D1/D690/48441073/gkac920.pdf</ext-link></comment><pub-id pub-id-type="pmcid">PMC9825576</pub-id><pub-id pub-id-type="pmid">36263822</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkac920</pub-id></element-citation></ref><ref id="R57"><label>57</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Sayers</surname><given-names>EW</given-names></name><etal/></person-group><article-title>Database resources of the National Center for Biotechnology Information in 2023</article-title><source>Nucleic Acids Research</source><year>2022</year><volume>51</volume><fpage>D29</fpage><lpage>D38</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/nar/article-pdf/51/D1/D29/48441212/gkac1032.pdf">https://academic.oup.com/nar/article-pdf/51/D1/D29/48441212/gkac1032.pdf</ext-link></comment><pub-id pub-id-type="pmcid">PMC9825438</pub-id><pub-id pub-id-type="pmid">36370100</pub-id><pub-id pub-id-type="doi">10.1093/nar/gkac1032</pub-id></element-citation></ref><ref id="R58"><label>58</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Yahav</surname><given-names>D</given-names></name><name><surname>Lador</surname><given-names>A</given-names></name><name><surname>Paul</surname><given-names>M</given-names></name><name><surname>Leibovici</surname><given-names>L</given-names></name></person-group><article-title>Efficacy and safety of tigecycline: a systematic review and meta-analysis</article-title><source>Journal of Antimicrobial Chemotherapy</source><year>2011</year><volume>66</volume><fpage>1963</fpage><lpage>1971</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/jac/article-pdf/66/9/1963/16862362/dkr242.pdf">https://academic.oup.com/jac/article-pdf/66/9/1963/16862362/dkr242.pdf</ext-link></comment><pub-id pub-id-type="pmid">21685488</pub-id></element-citation></ref><ref id="R59"><label>59</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zelmer</surname><given-names>AR</given-names></name><name><surname>Nelson</surname><given-names>R</given-names></name><name><surname>Richter</surname><given-names>K</given-names></name><name><surname>Atkins</surname><given-names>GJ</given-names></name></person-group><article-title>Can intracellular staphylococcus aureus in osteomyelitis be treated using current antibiotics? a systematic review and narrative synthesis</article-title><source>Bone Research</source><year>2022</year><volume>10</volume><fpage>53</fpage><pub-id pub-id-type="pmcid">PMC9374758</pub-id><pub-id pub-id-type="pmid">35961964</pub-id><pub-id pub-id-type="doi">10.1038/s41413-022-00227-8</pub-id></element-citation></ref><ref id="R60"><label>60</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Peterson</surname><given-names>LR</given-names></name></person-group><article-title>A review of tigecycline — the first glycylcycline</article-title><source>International Journal of Antimicrobial Agents</source><year>2008</year><volume>32</volume><fpage>S215</fpage><lpage>S222</lpage><comment>Therapeutic challenges in the era of antibiotic resistance. <ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S0924857909700056">https://www.sciencedirect.com/science/article/pii/S0924857909700056</ext-link></comment><pub-id pub-id-type="pmid">19134522</pub-id></element-citation></ref><ref id="R61"><label>61</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Salzman</surname><given-names>J</given-names></name><name><surname>Gawad</surname><given-names>C</given-names></name><name><surname>Wang</surname><given-names>PL</given-names></name><name><surname>Lacayo</surname><given-names>N</given-names></name><name><surname>Brown</surname><given-names>PO</given-names></name></person-group><article-title>Circular rnas are the predominant transcript isoform from hundreds of human genes in diverse cell types</article-title><source>PloS one</source><year>2012</year><volume>7</volume><elocation-id>e30733</elocation-id><pub-id pub-id-type="pmcid">PMC3270023</pub-id><pub-id pub-id-type="pmid">22319583</pub-id><pub-id pub-id-type="doi">10.1371/journal.pone.0030733</pub-id></element-citation></ref><ref id="R62"><label>62</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Edgar</surname><given-names>RC</given-names></name><etal/></person-group><article-title>Petabase-scale sequence alignment catalyses viral discovery</article-title><source>Nature</source><year>2022</year><volume>602</volume><fpage>142</fpage><lpage>147</lpage><pub-id pub-id-type="pmid">35082445</pub-id></element-citation></ref><ref id="R63"><label>63</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pibiri</surname><given-names>GE</given-names></name></person-group><article-title>Sparse and skew hashing of k-mers</article-title><source>Bioinformatics</source><year>2022</year><volume>38</volume><fpage>i185</fpage><lpage>i194</lpage><pub-id pub-id-type="pmcid">PMC9235479</pub-id><pub-id pub-id-type="pmid">35758794</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btac245</pub-id></element-citation></ref><ref id="R64"><label>64</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bankevich</surname><given-names>A</given-names></name><etal/></person-group><article-title>Spades: a new genome assembly algorithm and its applications to single-cell sequencing</article-title><source>Journal of computational biology</source><year>2012</year><volume>19</volume><fpage>455</fpage><lpage>477</lpage><pub-id pub-id-type="pmcid">PMC3342519</pub-id><pub-id pub-id-type="pmid">22506599</pub-id><pub-id pub-id-type="doi">10.1089/cmb.2012.0021</pub-id></element-citation></ref><ref id="R65"><label>65</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Nurk</surname><given-names>S</given-names></name><name><surname>Meleshko</surname><given-names>D</given-names></name><name><surname>Korobeynikov</surname><given-names>A</given-names></name><name><surname>Pevzner</surname><given-names>P</given-names></name></person-group><article-title>A. metaspades: a new versatile metagenomic assembler</article-title><source>Genome research</source><year>2017</year><volume>27</volume><fpage>824</fpage><lpage>834</lpage><pub-id pub-id-type="pmcid">PMC5411777</pub-id><pub-id pub-id-type="pmid">28298430</pub-id><pub-id pub-id-type="doi">10.1101/gr.213959.116</pub-id></element-citation></ref><ref id="R66"><label>66</label><element-citation publication-type="confproc"><person-group person-group-type="author"><name><surname>Baaijens</surname><given-names>JA</given-names></name><name><surname>Stougie</surname><given-names>L</given-names></name><name><surname>Schönhuth</surname><given-names>A</given-names></name></person-group><source>Strain-aware assembly of genomes from mixed samples using flow variation graphs</source><conf-name>International Conference on Research in Computational Molecular Biology</conf-name><conf-sponsor>Springer</conf-sponsor><year>2020</year><fpage>221</fpage><lpage>222</lpage></element-citation></ref><ref id="R67"><label>67</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Lemane</surname><given-names>T</given-names></name><name><surname>Chikhi</surname><given-names>R</given-names></name><name><surname>Peterlongo</surname><given-names>P</given-names></name></person-group><article-title>kmdiff, large-scale and user-friendly differential k-mer analyses</article-title><source>Bioinformatics</source><year>2022</year><volume>38</volume><fpage>5443</fpage><lpage>5445</lpage><pub-id pub-id-type="pmcid">PMC9750116</pub-id><pub-id pub-id-type="pmid">36315078</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btac689</pub-id></element-citation></ref><ref id="R68"><label>68</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Robidou</surname><given-names>L</given-names></name><name><surname>Peterlongo</surname><given-names>P</given-names></name></person-group><article-title>fimpera: drastic improvement of approximate membership query data-structures with counts</article-title><source>Bioinformatics</source><year>2023</year><volume>39</volume><elocation-id>btad305</elocation-id><pub-id pub-id-type="pmcid">PMC10212535</pub-id><pub-id pub-id-type="pmid">37195454</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btad305</pub-id></element-citation></ref><ref id="R69"><label>69</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Marchet</surname><given-names>C</given-names></name><name><surname>Limasset</surname><given-names>A</given-names></name></person-group><article-title>Scalable sequence database search using partitioned aggregated bloom comb trees</article-title><source>Bioinformatics</source><year>2023</year><volume>39</volume><fpage>i252</fpage><lpage>i259</lpage><pub-id pub-id-type="pmcid">PMC10311332</pub-id><pub-id pub-id-type="pmid">37387170</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btad225</pub-id></element-citation></ref><ref id="R70"><label>70</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mehringer</surname><given-names>S</given-names></name><etal/></person-group><article-title>Hierarchical interleaved bloom filter: enabling ultrafast, approximate sequence queries</article-title><source>Genome Biology</source><year>2023</year><volume>24</volume><fpage>131</fpage><pub-id pub-id-type="pmcid">PMC10230713</pub-id><pub-id pub-id-type="pmid">37259161</pub-id><pub-id pub-id-type="doi">10.1186/s13059-023-02971-4</pub-id></element-citation></ref><ref id="R71"><label>71</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Martayan</surname><given-names>I</given-names></name><name><surname>Cazaux</surname><given-names>B</given-names></name><name><surname>Limasset</surname><given-names>A</given-names></name><name><surname>Marchet</surname><given-names>C</given-names></name></person-group><article-title>Conway-bromage-lyndon (cbl): an exact, dynamic representation of k-mer sets</article-title><source>bioRxiv</source><year>2024</year><comment>2024–01</comment><pub-id pub-id-type="pmcid">PMC11211824</pub-id><pub-id pub-id-type="pmid">38940123</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btae217</pub-id></element-citation></ref><ref id="R72"><label>72</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Bˇrinda</surname><given-names>K</given-names></name><etal/></person-group><article-title>Efficient and robust search of microbial genomes via phylogenetic compression</article-title><source>bioRxiv</source><year>2024</year></element-citation></ref><ref id="R73"><label>73</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rahman</surname><given-names>A</given-names></name><name><surname>Dufresne</surname><given-names>Y</given-names></name><name><surname>Medvedev</surname><given-names>P</given-names></name></person-group><article-title>Compression algorithm for colored de bruijn graphs</article-title><source>bioRxiv</source><year>2023</year><comment>2023–05</comment><pub-id pub-id-type="pmcid">PMC11071130</pub-id><pub-id pub-id-type="pmid">38712341</pub-id><pub-id pub-id-type="doi">10.4230/LIPIcs.WABI.2023.17</pub-id></element-citation></ref><ref id="R74"><label>74</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alanko</surname><given-names>J</given-names></name><etal/></person-group><article-title>Computing the lcp array of a labeled graph</article-title><source>arXiv preprint</source><year>2024</year><elocation-id>arXiv:2404.14235</elocation-id></element-citation></ref><ref id="R75"><label>75</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Schulz</surname><given-names>T</given-names></name><name><surname>Medvedev</surname><given-names>P</given-names></name></person-group><article-title>Eskemap: exact sketch-based read mapping</article-title><source>Algorithms for Molecular Biology</source><year>2024</year><volume>19</volume><fpage>19</fpage><pub-id pub-id-type="pmcid">PMC11069465</pub-id><pub-id pub-id-type="pmid">38704605</pub-id><pub-id pub-id-type="doi">10.1186/s13015-024-00261-7</pub-id></element-citation></ref><ref id="R76"><label>76</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Marçais</surname><given-names>G</given-names></name><name><surname>DeBlasio</surname><given-names>D</given-names></name><name><surname>Kingsford</surname><given-names>C</given-names></name></person-group><article-title>Sketching methods with small window guarantee using minimum decycling sets</article-title><source>arXiv</source><year>2023</year><elocation-id>2311.03592</elocation-id><pub-id pub-id-type="pmid">38980804</pub-id></element-citation></ref><ref id="R77"><label>77</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Conway</surname><given-names>TC</given-names></name><name><surname>Bromage</surname><given-names>AJ</given-names></name></person-group><article-title>Succinct data structures for assembling large genomes</article-title><source>Bioinformatics</source><year>2011</year><volume>27</volume><fpage>479</fpage><lpage>486</lpage><pub-id pub-id-type="pmid">21245053</pub-id></element-citation></ref><ref id="R78"><label>78</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kokot</surname><given-names>M</given-names></name><name><surname>Długosz</surname><given-names>M</given-names></name><name><surname>Deorowicz</surname><given-names>S</given-names></name></person-group><article-title>KMC 3: counting and manipulating k-mer statistics</article-title><source>Bioinformatics</source><year>2017</year><volume>33</volume><fpage>2759</fpage><lpage>2761</lpage><pub-id pub-id-type="pmid">28472236</pub-id></element-citation></ref><ref id="R79"><label>79</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Danciu</surname><given-names>D</given-names></name><name><surname>Karasikov</surname><given-names>M</given-names></name><name><surname>Mustafa</surname><given-names>H</given-names></name><name><surname>Kahles</surname><given-names>A</given-names></name><name><surname>Rätsch</surname><given-names>G</given-names></name></person-group><article-title>Topology-based sparsification of graph annotations</article-title><source>Bioinformatics</source><year>2021</year><volume>37</volume><fpage>i169</fpage><lpage>i176</lpage><pub-id pub-id-type="pmcid">PMC8346655</pub-id><pub-id pub-id-type="pmid">34252940</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btab330</pub-id></element-citation></ref><ref id="R80"><label>80</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Karasikov</surname><given-names>M</given-names></name><name><surname>Mustafa</surname><given-names>H</given-names></name><name><surname>Rätsch</surname><given-names>G</given-names></name><name><surname>Kahles</surname><given-names>A</given-names></name></person-group><article-title>Lossless indexing with counting de bruijn graphs</article-title><source>Genome Research</source><year>2022</year><volume>32</volume><fpage>1754</fpage><lpage>1764</lpage></element-citation></ref><ref id="R81"><label>81</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Alipanahi</surname><given-names>B</given-names></name><name><surname>Kuhnle</surname><given-names>A</given-names></name><name><surname>Puglisi</surname><given-names>SJ</given-names></name><name><surname>Salmela</surname><given-names>L</given-names></name><name><surname>Boucher</surname><given-names>C</given-names></name></person-group><article-title>Succinct Dynamic de Bruijn Graphs</article-title><source>Bioinformatics</source><year>2020</year><comment>Btaa546, <ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa546/33317620/btaa546.pdf">https://academic.oup.com/bioinformatics/advance-article-pdf/doi/10.1093/bioinformatics/btaa546/33317620/btaa546.pdf</ext-link></comment><pub-id pub-id-type="pmcid">PMC8337006</pub-id><pub-id pub-id-type="pmid">32462192</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btaa546</pub-id></element-citation></ref><ref id="R82"><label>82</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Altschul</surname><given-names>SF</given-names></name><name><surname>Gish</surname><given-names>W</given-names></name><name><surname>Miller</surname><given-names>W</given-names></name><name><surname>Myers</surname><given-names>EW</given-names></name><name><surname>Lipman</surname><given-names>DJ</given-names></name></person-group><article-title>Basic local alignment search tool</article-title><source>Journal of Molecular Biology</source><year>1990</year><volume>215</volume><fpage>403</fpage><lpage>410</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://www.sciencedirect.com/science/article/pii/S0022283605803602">https://www.sciencedirect.com/science/article/pii/S0022283605803602</ext-link></comment></element-citation></ref><ref id="R83"><label>83</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Rautiainen</surname><given-names>M</given-names></name><name><surname>Mäkinen</surname><given-names>V</given-names></name><name><surname>Marschall</surname><given-names>T</given-names></name></person-group><article-title>Bit-parallel sequence-to-graph alignment</article-title><source>Bioinformatics</source><year>2019</year><volume>35</volume><fpage>3599</fpage><lpage>3607</lpage><pub-id pub-id-type="pmcid">PMC6761980</pub-id><pub-id pub-id-type="pmid">30851095</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btz162</pub-id></element-citation></ref><ref id="R84"><label>84</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Myers</surname><given-names>G</given-names></name></person-group><article-title>A fast bit-vector algorithm for approximate string matching based on dynamic programming</article-title><source>J ACM</source><year>1999</year><volume>46</volume><fpage>395</fpage><lpage>415</lpage><pub-id pub-id-type="doi">10.1145/316542.316550</pub-id></element-citation></ref><ref id="R85"><label>85</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Gotoh</surname><given-names>O</given-names></name></person-group><article-title>An improved algorithm for matching biological sequences</article-title><source>Journal of molecular biology</source><year>1982</year><volume>162</volume><fpage>705</fpage><lpage>708</lpage><pub-id pub-id-type="pmid">7166760</pub-id></element-citation></ref><ref id="R86"><label>86</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Altschul</surname><given-names>SF</given-names></name><etal/></person-group><article-title>Gapped blast and psi-blast: a new generation of protein database search programs</article-title><source>Nucleic acids research</source><year>1997</year><volume>25</volume><fpage>3389</fpage><lpage>3402</lpage><pub-id pub-id-type="pmcid">PMC146917</pub-id><pub-id pub-id-type="pmid">9254694</pub-id><pub-id pub-id-type="doi">10.1093/nar/25.17.3389</pub-id></element-citation></ref><ref id="R87"><label>87</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Zhang</surname><given-names>Z</given-names></name><name><surname>Schwartz</surname><given-names>S</given-names></name><name><surname>Wagner</surname><given-names>L</given-names></name><name><surname>Miller</surname><given-names>W</given-names></name></person-group><article-title>A greedy algorithm for aligning dna sequences</article-title><source>Journal of Computational biology</source><year>2000</year><volume>7</volume><fpage>203</fpage><lpage>214</lpage><pub-id pub-id-type="pmid">10890397</pub-id></element-citation></ref><ref id="R88"><label>88</label><element-citation publication-type="web"><collab>Consortium, M</collab><source>Metasub utilities</source><comment><ext-link ext-link-type="uri" xlink:href="https://github.com/MetaSUB/metasub_utils">https://github.com/MetaSUB/metasub_utils</ext-link></comment></element-citation></ref><ref id="R89"><label>89</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Kühl</surname><given-names>MA</given-names></name><name><surname>Stich</surname><given-names>B</given-names></name><name><surname>Ries</surname><given-names>DC</given-names></name></person-group><article-title>Mutation-Simulator: fine-grained simulation of random mutations in any genome</article-title><source>Bioinformatics</source><year>2020</year><volume>37</volume><fpage>568</fpage><lpage>569</lpage><comment><ext-link ext-link-type="uri" xlink:href="https://academic.oup.com/bioinformatics/article-pdf/37/4/568/50359780/btaa716.pdf">https://academic.oup.com/bioinformatics/article-pdf/37/4/568/50359780/btaa716.pdf</ext-link></comment><pub-id pub-id-type="pmcid">PMC8088320</pub-id><pub-id pub-id-type="pmid">32780803</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/btaa716</pub-id></element-citation></ref><ref id="R90"><label>90</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dobin</surname><given-names>A</given-names></name><etal/></person-group><article-title>Star: ultrafast universal rna-seq aligner</article-title><source>Bioinformatics</source><year>2013</year><volume>29</volume><fpage>15</fpage><lpage>21</lpage><pub-id pub-id-type="pmcid">PMC3530905</pub-id><pub-id pub-id-type="pmid">23104886</pub-id><pub-id pub-id-type="doi">10.1093/bioinformatics/bts635</pub-id></element-citation></ref></ref-list></back><floats-group><fig id="F1" position="float"><label>Figure 1</label><caption><title>The MetaGraph framework</title><p>Schematic overview of graph construction and representation. Individual sequencing samples (<bold>left</bold>) are assembled into graphs (<italic>sample graphs</italic>), which are then cleaned to remove spurious paths and misassemblies (<bold>middle</bold>). Next, the sample graphs are merged to form a MetaGraph index (<bold>right top</bold>), consisting of the compressed <italic>k</italic>-mer dictionary index and a compressed annotation matrix (<bold>right middle</bold>, gray color indicates parts that can be efficiently compressed and do not have to be stored explicitly). The index is then used as the basis for downstream applications, such as sequence search, differential assembly, and other queries (<bold>right bottom</bold>).</p></caption><graphic xlink:href="EMS196134-f001"/></fig><fig id="F2" position="float"><label>Figure 2</label><caption><p><bold>a)</bold> Size of evaluated index data structures for representing a set of microbial WGS experiments of increasing size, shown for both lossy indexing methods BIGSI and COBS and lossless Mantis, Bifrost, and MetaGraph with the SuccinctDBG and RowDiff-MultiBRWT compression schemes to encode the graph and the annotation, respectively. Dashed lines indicate lossy methods. The construction of the Mantis indexes could not be done on all the subsets as indexing of the 13,500 sample subset was only 43.6% complete after reaching our 240 h run time limit. <bold>b)</bold> Times for querying human gut metagenome AMPLICON sequencing reads (SRA accession ID <monospace>DRR067889</monospace>) against indexes constructed with MetaGraph and other state-of-the-art tools from sets of microbial WGS experiments of increasing size. All curves show the performance of exact k-mer matching, except for the dotted MetaGraph curve, which shows the query performance with the more sensitive search strategy involving alignment. <bold>c)</bold> Overview of all MetaGraph indexes — For all data sets we show the total number of input characters on the x-axis and index size (given as the total number of unique <italic>k</italic>-mers) on the y-axis. Marker size represents the size of the index. The solid portion of each marker represents the fraction of the total size taken by the graph and the translucent portion represents the fraction taken by the annotation (<xref ref-type="table" rid="T1">Table 1</xref>). (*) Input of the UniParc dataset are amino acid sequences, not base pairs.</p></caption><graphic xlink:href="EMS196134-f002"/></fig><fig id="F3" position="float"><label>Figure 3</label><caption><title>MetaGraph completeness and accuracy</title><p><bold>a)</bold> Complementary estimator of the cumulative distribution function (ECDF) curve showing the fraction of reads that are retrieving the correct label from the index (<italic>Label recall</italic>, y-axis) requiring at least x% matching positions (x-axis) for a range of indexed SRA datasets. We define the <italic>realignability</italic> of a graph-query pair as the area under this curve. <bold>b)</bold> Realignability of each graph for increasing error rates in the query. <bold>c)</bold> Coverage plot for human transcript SFTPB-207 in GTEx sample SRR599154 determined via STAR alignment against hg38 (top, blue) and retrieved from the MetaGraph GTEx index with counts (bottom, orange).</p></caption><graphic xlink:href="EMS196134-f003"/></fig><fig id="F4" position="float"><label>Figure 4</label><caption><title>MetaGraph aids biological discovery</title><p id="P130"><bold>a)</bold> Associations between antimicrobial resistance (AMR) gene families and RefSeq bacteriophages (phages) discovered in publicly-available human gut microbiomes deposited to the NCBI SRA from 2008 to 2022. Squares with a black border indicate a statistically significant association and missing squares indicate hypotheses that were not tested due to an insufficient number of matching samples. <bold>b)</bold> Growth in the prevalence of resistance to antibiotics in human gut microbiomes across six continents from 2010 to 2020. Each point represents the normalised proportion of samples from a continent matching genes conferring resistance in a given year, while each line represents a binomial regression fit. Squares with a black border indicate regressions with significantly high training scores and missing squares indicate experiments with an insufficient number of samples. <bold>c)</bold> Relative fraction of GTEx samples per tissue (x-axis) that carry recurrent back-splice-junctions (BSJ). Per-tissue ratio is computed as samples that carry at least 2 BSJ (dark blue) over all samples of that tissue (light blue) - both on the y-axis. Absolute numbers are given in parenthesis, and relative fractions are in grey at the top.</p></caption><graphic xlink:href="EMS196134-f004"/></fig><table-wrap id="T1" position="float" orientation="portrait"><label>Table 1</label><caption><title>Summary of the data sets and constructed indexes.</title><p>Indexes marked with <sup>†</sup> encode genome coordinates (hence, fully lossless). Indexes marked with <sup>‡</sup> in addition to the membership of <italic>k</italic>-mers to different labels also represent their respective counts. Each index is assigned to one of three classes: DNA (D), RNA (R), or Protein (P). The index sizes for SRA-Metazoa and SRA-Public marked with * are estimated from their respective subsets. The compression ratio is measured in char/byte (base pairs or amino acids of input sequences per byte of the MetaGraph index), which corresponds to the input/output ratio if 1 char. takes 1 byte. The last two columns show the two factors of the compression ratio: redundancy of the data (due to sequencing depth, sequencing errors, and genome complexity/repetitiveness), and indexing efficiency, i.e., how many (<italic>k</italic>-mer, label) relations are encoded per byte of the MetaGraph index.</p></caption><table frame="box" rules="groups"><thead><tr><th align="center" valign="top">Type</th><th align="left" valign="top">Data set</th><th align="right" valign="top">Class</th><th align="right" valign="top">Tbp</th><th align="right" valign="top"># labels</th><th align="right" valign="top">Index size</th><th align="right" valign="top" style="border-right: solid thin">Compression (char./byte)</th><th align="right" valign="top">Redund. (char./rel.)</th><th align="right" valign="top">Efficiency (rel./byte)</th></tr></thead><tbody><tr><td align="center" valign="middle" rowspan="6" style="writing-mode:tb-rl;writing-mode:vertical-rl;">Assembled seq.</td><td align="left" valign="top">UHGG (catalog)</td><td align="right" valign="top">D</td><td align="right" valign="top">0.01</td><td align="right" valign="top">4,644</td><td align="right" valign="top">3.2 GB</td><td align="right" valign="top" style="border-right: solid thin">3.5</td><td align="right" valign="top">1.0</td><td align="right" valign="top">3.5</td></tr><tr><td align="left" valign="top">UHGG (all)</td><td align="right" valign="top">D</td><td align="right" valign="top">0.71</td><td align="right" valign="top">286,997</td><td align="right" valign="top">27.3 GB</td><td align="right" valign="top" style="border-right: solid thin">26.0</td><td align="right" valign="top">1.0</td><td align="right" valign="top">25.9</td></tr><tr><td align="left" valign="top">Tara Oceans (scaffolds)</td><td align="right" valign="top">D</td><td align="right" valign="top">0.36</td><td align="right" valign="top">318,205,057</td><td align="right" valign="top">110.2 GB</td><td align="right" valign="top" style="border-right: solid thin">3.2</td><td align="right" valign="top">1.0</td><td align="right" valign="top">3.1</td></tr><tr><td align="left" valign="top">Tara Oceans with coord.<sup>†</sup></td><td align="right" valign="top">D</td><td align="right" valign="top">0.06</td><td align="right" valign="top">34,815</td><td align="right" valign="top">14.6 GB</td><td align="right" valign="top" style="border-right: solid thin">4.2</td><td align="right" valign="top">1.0</td><td align="right" valign="top">4.2</td></tr><tr><td align="left" valign="top">RefSeq with coordinates<sup>†</sup></td><td align="right" valign="top">D</td><td align="right" valign="top">1.70</td><td align="right" valign="top">85,375</td><td align="right" valign="top">508.9 GB</td><td align="right" valign="top" style="border-right: solid thin">3.3</td><td align="right" valign="top">1.0</td><td align="right" valign="top">3.3</td></tr><tr style="border-bottom: solid thin"><td align="left" valign="top">UniParc</td><td align="right" valign="top">P</td><td align="right" valign="top">0.21</td><td align="right" valign="top">543,904,874</td><td align="right" valign="top">124.6 GB</td><td align="right" valign="top" style="border-right: solid thin">1.7</td><td align="right" valign="top">1.0</td><td align="right" valign="top">1.6</td></tr><tr><td align="center" valign="middle" rowspan="4" style="writing-mode:tb-rl;writing-mode:vertical-rl;">RNA-Seq</td><td align="left" valign="top">GTEx</td><td align="right" valign="top">R</td><td align="right" valign="top">71.2</td><td align="right" valign="top">9,759</td><td align="right" valign="top">9.6 GB</td><td align="right" valign="top" style="border-right: solid thin">7,416</td><td align="right" valign="top">241.2</td><td align="right" valign="top">30.7</td></tr><tr><td align="left" valign="top">GTEx with counts<sup>‡</sup></td><td align="right" valign="top">R</td><td align="right" valign="top">71.2</td><td align="right" valign="top">9,759</td><td align="right" valign="top">76.3 GB</td><td align="right" valign="top" style="border-right: solid thin">934</td><td align="right" valign="top">241.2</td><td align="right" valign="top">3.9</td></tr><tr><td align="left" valign="top">TCGA</td><td align="right" valign="top">R</td><td align="right" valign="top">81.2</td><td align="right" valign="top">11,095</td><td align="right" valign="top">11.1 GB</td><td align="right" valign="top" style="border-right: solid thin">7,288</td><td align="right" valign="top">334.4</td><td align="right" valign="top">21.8</td></tr><tr style="border-bottom: solid thin"><td align="left" valign="top">TCGA with counts<sup>‡</sup></td><td align="right" valign="top">R</td><td align="right" valign="top">81.2</td><td align="right" valign="top">11,095</td><td align="right" valign="top">81.2 GB</td><td align="right" valign="top" style="border-right: solid thin">1,001</td><td align="right" valign="top">320.4</td><td align="right" valign="top">3.1</td></tr><tr><td align="center" valign="middle" rowspan="2" style="writing-mode:tb-rl;writing-mode:vertical-rl;">MGS</td><td align="left" valign="top">MetaSUB</td><td align="right" valign="top">D</td><td align="right" valign="top">7.2</td><td align="right" valign="top">4,220</td><td align="right" valign="top">46.7 GB</td><td align="right" valign="top" style="border-right: solid thin">155</td><td align="right" valign="top">40.5</td><td align="right" valign="top">3.8</td></tr><tr style="border-bottom: solid thin"><td align="left" valign="top">SRA-MetaGut</td><td align="right" valign="top">D</td><td align="right" valign="top">155.8</td><td align="right" valign="top">241,384</td><td align="right" valign="top">1,111.3 GB</td><td align="right" valign="top" style="border-right: solid thin">140</td><td align="right" valign="top">22.2</td><td align="right" valign="top">6.3</td></tr><tr><td align="center" valign="middle" rowspan="6" style="writing-mode:tb-rl;writing-mode:vertical-rl;">SRA subsets</td><td align="left" valign="top">SRA-Microbe</td><td align="right" valign="top">D</td><td align="right" valign="top">221.1</td><td align="right" valign="top">446,506</td><td align="right" valign="top">57.1 GB</td><td align="right" valign="top" style="border-right: solid thin">3,870</td><td align="right" valign="top">157.6</td><td align="right" valign="top">24.5</td></tr><tr><td align="left" valign="top">SRA-Fungi</td><td align="right" valign="top">D</td><td align="right" valign="top">162.1</td><td align="right" valign="top">121,900</td><td align="right" valign="top">80.5 GB</td><td align="right" valign="top" style="border-right: solid thin">2,013</td><td align="right" valign="top">113.9</td><td align="right" valign="top">17.7</td></tr><tr><td align="left" valign="top">SRA-Plants</td><td align="right" valign="top">D</td><td align="right" valign="top">1,109.2</td><td align="right" valign="top">531,714</td><td align="right" valign="top">1,844.1 GB</td><td align="right" valign="top" style="border-right: solid thin">602</td><td align="right" valign="top">61.5</td><td align="right" valign="top">9.8</td></tr><tr><td align="left" valign="top">SRA-Metazoa (Human)</td><td align="right" valign="top">D</td><td align="right" valign="top">725.4</td><td align="right" valign="top">436,494</td><td align="right" valign="top">3,402.1 GB</td><td align="right" valign="top" style="border-right: solid thin">213</td><td align="right" valign="top">15.7</td><td align="right" valign="top">13.5</td></tr><tr><td align="left" valign="top">SRA-Metazoa (Mouse)</td><td align="right" valign="top">D</td><td align="right" valign="top">146.6</td><td align="right" valign="top">57,938</td><td align="right" valign="top">291.6 GB</td><td align="right" valign="top" style="border-right: solid thin">503</td><td align="right" valign="top">26.6</td><td align="right" valign="top">18.9</td></tr><tr style="border-bottom: solid thin"><td align="left" valign="top">SRA-Metazoa (w/o Human)</td><td align="right" valign="top">D</td><td align="right" valign="top">1,999.5</td><td align="right" valign="top">805,239</td><td align="right" valign="top">5,366.5 GB</td><td align="right" valign="top" style="border-right: solid thin">373</td><td align="right" valign="top">33.3</td><td align="right" valign="top">11.2</td></tr><tr><td align="center" valign="middle" rowspan="2" style="writing-mode:tb-rl;writing-mode:vertical-rl;">SRA</td><td align="left" valign="top">SRA-Public (100 studies)</td><td align="right" valign="top">D</td><td align="right" valign="top">9.6</td><td align="right" valign="top">5,184</td><td align="right" valign="top">32.0 GB</td><td align="right" valign="top" style="border-right: solid thin">300</td><td align="right" valign="top">73.3</td><td align="right" valign="top">4.1</td></tr><tr><td align="left" valign="top">SRA-Public to 01.01.2023</td><td align="right" valign="top">D</td><td align="right" valign="top">38,949.9</td><td align="right" valign="top">23,010,648</td><td align="right" valign="top">130 TB*</td><td align="right" valign="top" style="border-right: solid thin">300*</td><td align="right" valign="top">73.3*</td><td align="right" valign="top">4.1*</td></tr></tbody></table></table-wrap></floats-group></article>